# TODO split into multiple files and share common models!
# Unfortunately https://github.com/asyncapi/bundler wasn't usable 2022-01 and most AsyncAPI tooling can't handle
# external references! :-(
# This needs to be fixed first: https://github.com/asyncapi/bundler/issues/34
# Otherwise we have to hack together something, since copying and pasting the shared definitions between the different
# APIs makes no sense...
asyncapi: 2.2.0
id: 'urn:com:unfoldedcircle:integration'
info:
  title: Remote Two WebSocket Integration API
  version: '0.7.0-alpha'
  contact:
    name: API Support
    url: https://github.com/unfoldedcircle/core-api/issues
  license:
    name: Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
    url: https://creativecommons.org/licenses/by-sa/4.0/
  description: |
    **Work in progress** API definition of the Remote Two integration WebSocket API.
    
    API message status legend:
    
    | Icon | Description                                                                     |
    |------|---------------------------------------------------------------------------------|
    | üí°   | Idea, not yet official part of API definition.                                  |
    | üöß   | Planned feature and most likely not (fully) implemented in the initial release. |
    | üë∑   | API definition is work in progress, not ready yet for implementation.           |
    | üîç   | Api definition review & implementation.                                         |
    | üß™   | API has been implemented in the Remote Two and is currently being tested.       |
    | üöÄ   | Ready to use - feedback welcomed.                                               |
  
    Simple integrations with static entities don't need to implement all messages.  
    **All required messages are tagged with the üçï emoji.**
    
    ## Overview

    The Remote Two WebSocket integrations API allows writing device integrations for the Unfolded Circle Remote Two and
    former YIO remote.  
    At the moment only user integrations running on an external host are supported.
    
    The integration driver acts as server and the Remote Two as client. The remote connects to the integration when an
    integration instance is configured. Whenever the remote enters standby it may choose to disconnect and connect again
    after wakeup.
    
    The goal of the integration API is to cover simple static drivers like controlling GPIOs on a Raspberry Pi, up to
    integrating existing home automation hubs like Home Assistant, Homey, ioBroker, openHAB etc.  
    The focus of the integration API is on entity integration, not on controlling or configuring the Remote Two. Please
    refer to the core-API for other functionality: <https://github.com/unfoldedcircle/core-api>

    ## API Versioning
    
    The API is versioned according to [SemVer](https://semver.org/).  
    The initial public release will be `1.0.0` once it is considered stable enough with some initial integration
    implementations and developer examples.
    
    **Any major version zero (`0.y.z`) is for initial development and may change at any time!**  
    I.e. backward compatibility for minor releases is not yet established, anything MAY change at any time!

externalDocs:
  description: Find out more about the Remote Two
  url: 'https://www.unfoldedcircle.com/'
defaultContentType: application/json

servers:
  test:
    url: localhost:8001
    protocol: ws
    description: |
      Local test server.
    security:
      - token: []
  test-wss:
    url: localhost:8443
    protocol: wss
    description: |
      Local test server.
    security:
      - token: []
tags:
  - name: registration
    description: Integration driver registration
  - name: device
    description: Device handling
  - name: setup
    description: Integration discovery and setup
    externalDocs:
      url: https://github.com/unfoldedcircle/core-api/blob/main/doc/integration-driver/driver-setup.md
  - name: entity
    description: Entity handling
    externalDocs:
      url: https://github.com/unfoldedcircle/core-api/tree/main/doc/entities
  - name: event
    description: Event initiated by the integration driver
  - name: metadata
    description: Metadata information
  - name: required
    description: This message needs be handled / supported by an integration driver.

channels:
  /intg:
    publish:
      description: |
        Integration API for the Remote Two to interact with custom devices.  
        The publish channel lists all messages that the Remote Two sends to an integration driver server.
      operationId: pubIntegrationMessage
      message:
        oneOf:
          # --- common
          - $ref: '#/components/messages/auth'
          - $ref: '#/components/messages/get_driver_version'
          - $ref: '#/components/messages/get_driver_metadata'
          # --- device & setup handling
          - $ref: '#/components/messages/connect'
          - $ref: '#/components/messages/disconnect'
          - $ref: '#/components/messages/get_device_state'
          - $ref: '#/components/messages/setup_driver'
          - $ref: '#/components/messages/set_driver_user_data'
          - $ref: '#/components/messages/abort_driver_setup'
          # --- entity handling
          - $ref: '#/components/messages/get_available_entities'
          - $ref: '#/components/messages/subscribe_events'
          - $ref: '#/components/messages/unsubscribe_events'
          - $ref: '#/components/messages/get_entity_states'
          - $ref: '#/components/messages/entity_command'
          # --- system events
          - $ref: '#/components/messages/enter_standby'
          - $ref: '#/components/messages/exit_standby'
          # --- metadata & configuration response
          - $ref: '#/components/messages/version'
          - $ref: '#/components/messages/supported_entity_types'
          - $ref: '#/components/messages/configured_entities'
          - $ref: '#/components/messages/localization_cfg'
    subscribe:
      description: |
        Integration API for the Remote Two to receive messages from integration drivers.  
        The subscribe channel lists all messages that the integration driver server sends to the Remote Two.
      operationId: subIntegrationMessage
      message:
        oneOf:
          # --- common
          - $ref: '#/components/messages/auth_required'
          - $ref: '#/components/messages/authentication'
          - $ref: '#/components/messages/result'
          # --- system commands
          - $ref: '#/components/messages/driver_version'
          - $ref: '#/components/messages/driver_metadata'
          # --- device & setup handling
          - $ref: '#/components/messages/device_state'
          - $ref: '#/components/messages/driver_setup_change'
          # --- entity handling
          - $ref: '#/components/messages/entity_states'
          - $ref: '#/components/messages/available_entities'
          # ------ events
          - $ref: '#/components/messages/entity_change'
          - $ref: '#/components/messages/entity_available'
          - $ref: '#/components/messages/entity_removed'
          # --- metadata & configuration requests
          - $ref: '#/components/messages/get_version'
          - $ref: '#/components/messages/get_supported_entity_types'
          - $ref: '#/components/messages/get_configured_entities'
          - $ref: '#/components/messages/get_localization_cfg'

components:
  securitySchemes:
    token:
      description: |
        The API token is either provided in the `auth-token` header while upgrading to a WebSocket connection,
        or with an authentication message.
        - If the integration driver doesn't support header based authentication, it must send the `auth_required`
          message event after the WebSocket connection is established. The Remote Two will then authenticate with the
          `auth` request message.
        - If the driver doesn't support or require authentication, it still needs to send the `authentication` message
          with `code: 200` and `req_id: 0` after the WebSocket connection has been established by the Remote Two.
      type: httpApiKey
      in: header
      name: auth-token

  # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  messages:
    request:
      summary: üöÄ Generic request message.
      description: |
        This message defines the common structure of a request message. The receiver must reply with a response message.
      payload:
        $ref: '#/components/schemas/commonReq'
    response:
      summary: üöÄ Generic response message.
      description: |
        This message defines the common structure of a response message which is sent back after receiving a request
        message.
      payload:
        $ref: '#/components/schemas/commonResp'
    event:
      summary: üöÄ Generic event message.
      payload:
        $ref: '#/components/schemas/commonEvent'
    result:
      summary: üöÄ üçï Command result message.
      description: |
        A result message is a response message containing a result code and optional error information without further
        payload.
      payload:
        $ref: '#/components/schemas/commonResp'
      examples:
        - payload:
            kind: resp
            req_id: 123
            msg: result
            code: 200
        - payload:
            kind: resp
            req_id: 124
            msg: result
            code: 400
            msg_data:
              code: "INV_ARGUMENT"
              message: "Invalid argument. Foo must be a positive number."
      tags:
        - name: required
    auth_required:
      summary: üöÄ Authentication request event after connection is established.
      description: |
        This event is only sent if the integration doesn't support header based authentication during connection setup.  
        The Remote Two will then authenticate with the `auth` request message.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/authRequiredEvent'
    auth:
      summary: üöÄ Authenticate a connection.
      description: |
        Sent by the Remote Two after an `auth_required` request by the integration driver.
      payload:
        $ref: '#/components/schemas/authRequestMsg'
      x-response:
        $ref: '#/components/messages/authentication'
    authentication:
      summary: üöÄ üçï Authentication response.
      description: |
        The authentication result is provided in the `code` attribute:
        - `200`: success, API can be used and message requests are accepted.
        - `401`: authentication failed, the provided token is not valid.  
          The Remote Two will close the connection. The driver should also close the connection after sending this
          response.
        
        If the driver doesn't support or require authentication, it still needs to send the `authentication` message
        with `code: 200` and `req_id: 0` after the WebSocket connection has been established by the Remote Two.
        
        It's recommended to send the optional driver version object in the the msg_data payload to avoid eventual
        additional message exchanges.
      payload:
        $ref: '#/components/schemas/authMsg'
      tags:
        - name: required

    # =========================================================================
    # INTEGRATIONS API MESSAGES
    # =========================================================================

    get_driver_version:
      summary: üöÄ üçï Get version information about the integration driver.
      payload:
        $ref: '#/components/schemas/getDriverVersionMsg'
      x-response:
        $ref: '#/components/messages/driver_version'
      tags:
        - name: required
    driver_version:
      summary: üöÄ üçï Integration driver version information response.
      payload:
        $ref: '#/components/schemas/driverVersionMsg'
      tags:
        - name: required

    get_driver_metadata:
      summary: üöÄ üçï Retrieve the integration driver metadata.
      description: |
        The metadata is used to setup the driver in the remote / web-configurator and start the setup flow.
      tags:
        - name: metadata
        - name: required
      payload:
        $ref: '#/components/schemas/getDriverMetadataMsg'
      x-response:
        $ref: '#/components/messages/driver_metadata'
    driver_metadata:
      summary: üß™ üçï Integration driver metadata response.
      tags:
        - name: metadata
        - name: required
      payload:
        $ref: '#/components/schemas/driverMetadataMsg'

    enter_standby:
      summary: üîç Remote Two goes into standby event.
      description: |
        Notification event that the Remote Two goes into standby mode and won't process incoming events anymore.
      tags:
        - name: device
        - name: entity
        - name: event
      payload:
        $ref: '#/components/schemas/enterStandbyEvent'

    exit_standby:
      summary: üîç Remote Two leaves standby event.
      description: |
        Notification event that the Remote Two is out of standby. The integration should resume operation if it
        suspended it while receiving the `enter_standby` event.  
        This allows the integration to submit any entity state changes. Otherwise the Remote Two will likely request an
        entity state update.
      tags:
        - name: device
        - name: entity
        - name: event
      payload:
        $ref: '#/components/schemas/exitStandbyEvent'

    # --- registration handling
    # --- device & discovery handling
    connect:
      summary: üß™ Event to establish connection to entities or devices.
      description: |
        Optional: this event instructs the integration to establish the required connections to interact with the
        provided entities or devices.
        
        The integration should send `device_state` events to inform the Remote Two about the connection state.
      tags:
        - name: device
        - name: event
      payload:
        $ref: '#/components/schemas/connectEvent'
    disconnect:
      summary: üß™ Event to stop the connection to entities or devices.
      description: |
        Optional: this event instructs the integration to stop the interactions with the provided entities or devices,
        because the Remote Two temporarily doesn't need the entities. It's up to the integration what to do, but it
        needs to be prepared to react on a `connect` event.
        
        The integration should send `device_state` events to inform the Remote Two about the connection state.
      tags:
        - name: device
        - name: event
      payload:
        $ref: '#/components/schemas/disconnectEvent'
    get_device_state:
      summary: üöÄ üçï Get the current integration driver or device state.
      description: |        
        Called by the Remote Two when it needs to synchronize the device state, e.g. after waking up from standby, or if
        it doesn't receive regular `device_state` events.
        
        The `device_id` property is only required if the driver supports multiple device instances.
        
        Note: this request will not be answered with a response message but with an event.
      tags:
        - name: device
        - name: required
      payload:
        $ref: '#/components/schemas/getDeviceStateMsg'
      x-response:
        $ref: '#/components/messages/device_state'
    device_state:
      summary: üöÄ üçï Current integration driver or device state event.
      description: |
        If there's a device communication issue or other error, this state will inform the user with a UI notification
        about the issue.
        
        This event should be triggered by the integration driver whenever the state changes. Furthermore, the Remote Two
        can request the current state with the `get_device_state` request.
      tags:
        - name: device
        - name: required
      payload:
        $ref: '#/components/schemas/deviceStateEventMsg'
    setup_driver:
      summary: üß™ Start driver setup.
      description: |
        If a driver includes a `setup_data_schema` object in it's driver metadata, it enables the dynamic driver setup
        process. The setup process can be a simple "start-confirm-done" between the Remote Two and the integration
        driver, or a fully dynamic, multi-step process with user interactions, where the user has to provide additional
        data or select different options.

        After confirmation the `setup_driver` request, the integration driver has to send `driver_setup_change` events:
        
        - `event_type: SETUP` with `state: SETUP` is a progress event to keep the process running, see below.
        - `event_type: SETUP` with `state: WAIT_USER_ACTION` can be sent to the Remote Two to request a user
          interaction: either a confirmation to press next to continue the process, or input values.
        - `event_type: STOP` with `event: OK` finishes the setup process and the Remote Two creates an integration instance.
        - `event_type: STOP` with `event: ERROR` aborts the setup process.

        ‚ö†Ô∏è If the setup process takes more than a few seconds, the integration should send `driver_setup_change` events
        with `state: SETUP` to the Remote Two to show a setup progress to the user and prevent an inactivity timeout.  
        Default setup timeouts:
        - Setup progress (watchdog): 60 seconds. If no setup message is received within that time, the setup process
          is aborted.
        - Overall setup timeout: 5 minutes. If the setup process is automatically aborted if it is still running after
          that time.

        If no setup is needed, but the integration driver requires to show additional information to the user before
        the integration is setup (e.g. terms & conditions, further help information or web links, etc.), it can define
        an "information settings page" with text labels in `setup_data_schema` without any input fields. In this case
        the integration simply has to respond with a `driver_setup_change` event message with
        `event_type: STOP` and `state: OK` after confirming the `setup_driver` request message.
      tags:
        - name: setup
      payload:
        $ref: '#/components/schemas/setupDriverMsg'
      x-response:
        $ref: '#/components/messages/result'
    abort_driver_setup:
      summary: üöÄ Abort a driver setup.
      description: |
        If the user aborts the setup process, the Remote Two sends this event. Further messages from the integration
        from the setup process will be ignored afterwards.
      tags:
        - name: setup
        - name: event
      payload:
        $ref: '#/components/schemas/abortDriverSetupEvent'
    driver_setup_change:
      summary: üß™ Driver setup state change event.
      description: |
        Emitted for all driver setup flow state changes.
        
        Different change events:
        - `SETUP`: send progress, setup is still running 
        - `WAIT_USER_ACTION`: integration driver requires user input
        - `OK`: integration setup successfully completed
        - `ERROR`: integration setup failed
      tags:
        - name: setup
        - name: event
      payload:
        $ref: '#/components/schemas/driverSetupChangeEvent'
    set_driver_user_data:
      summary: üß™ Provide requested driver setup data.
      description: |
        Set required data to configure the integration driver or continue the setup process.
        
        Defined user actions to set in the request body `action` field:
        - `input_values`: if the user was requested to enter settings, e.g. connection or credential parameters to a
          device or service.
        - `confirm`: response to the user action `confirmation`. Set to `true` if the user had to perform an action like
          pressing a button on a device and then confirms the action with continuing the setup process.  
          ‚ö†Ô∏è The `false` value is not yet used but might be used in the future for yes / no choices.

        The `state` field in the response message indicate the current state of the setup process.
      tags:
        - name: setup
      payload:
        $ref: '#/components/schemas/setDriverUserDataMsg'
      x-response:
        $ref: '#/components/messages/result'

    # --- entity handling
    get_available_entities:
      summary: üöÄ üçï Retrieve the available entities from the integration driver.
      description: |
        Called while configuring profiles and assigning entities to pages or groups in the web-configurator or the
        embedded editor of the remote UI.
        
        With the optional filter, only entities of a given type can be requested.
      tags:
        - name: entity
        - name: required
      payload:
        $ref: '#/components/schemas/getAvailableEntitiesMsg'
      x-response:
        $ref: '#/components/messages/available_entities'
    available_entities:
      summary: üöÄ üçï Available entities response.
      description: |
        This message contains the available entities from the integration driver the Remote Two can configure.
        
        If the `get_available_entities` request included a filter, it is returned in the message data with only the 
        matching entities.
      tags:
        - name: entity
        - name: required
      payload:
        $ref: '#/components/schemas/availableEntitiesMsg'
    subscribe_events:
      summary: üß™ üçï Subscribe to events.
      description: |
        Subscribe to entity state change events to receive `entity_change` events from the integration driver.
        
        If no entity IDs are specified then events for all available entities are sent to the Remote Two.
        
        TODO support different event types?
      tags:
        - name: entity
        - name: required
      payload:
        $ref: '#/components/schemas/subscribeEventsMsg'
      x-response:
        $ref: '#/components/messages/result'
    unsubscribe_events:
      summary: üß™ Unsubscribe from events.
      description: |
        If no entity IDs are specified then all events for all available entities are stopped. 
        
        This message is sent by the Remote Two if a previously configured entity is no longer used and therefore no
        longer interested in entity updates. If the integration driver keeps sending events for the unsubscribed
        entities then they are simply discarded.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/unsubscribeEventsMsg'
      x-response:
        $ref: '#/components/messages/result'
    get_version:
      summary: üöÄ Get Remote Two version information.
      payload:
        $ref: '#/components/schemas/getVersionMsg'
      x-response:
        $ref: '#/components/messages/version'
    version:
      summary: üîç Remote version information response.
      payload:
        $ref: '#/components/schemas/versionMsg'
    get_supported_entity_types:
      summary: üöÄ Get supported entities in the Remote Two.
      description: |
        This is a metadata request for supported entities in the Remote Two and allows the client to check if it's still
        compatible. New releases can support new entities or entities might get renamed in major updates.
      tags:
        - name: entity
        - name: metadata
      payload:
        $ref: '#/components/schemas/getSupportedEntityTypesMsg'
      x-response:
        $ref: '#/components/messages/supported_entity_types'
    supported_entity_types:
      summary: üöÄ Supported entity types response.
      tags:
        - name: entity
        - name: metadata
      payload:
        $ref: '#/components/schemas/supportedEntityTypesMsg'
    get_configured_entities:
      summary: üîç Retrieve configured entities from this integration.
      description: |
        ‚ö†Ô∏è not yet implemented in the remote-core!

        Request the configured entities in the Remote Two originating from this integration. These are all the entities
        which are being used in the Remote Two and assigned in a profile.
        
        This allows the driver e.g. to optimize its device communication and only consider actively used entities.  
        Another option for the driver to be notified about used entities is through the `subscribe_events` requests.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/getConfiguredEntitiesMsg'
      x-response:
        $ref: '#/components/messages/configured_entities'
    configured_entities:
      summary: üîç Configured entities response.
      description: |
        ‚ö†Ô∏è not yet implemented in the remote-core!
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/configuredEntitiesMsg'
    get_localization_cfg:
      summary: üîç Retrieve the localization settings of the Remote Two.
      description: |
        The active localization settings of the Remote Two can be used if the integration driver requires localized
        settings for texts or units of measurements. 
        
        For language texts the driver should always provide an english option in addition to any localized texts.
      tags:
        - name: metadata
      payload:
        $ref: '#/components/schemas/getLocalizationMsg'
      x-response:
        $ref: '#/components/messages/localization_cfg'
    localization_cfg:
      summary: üîç Active localization settings of the Remote Two.
      tags:
        - name: metadata
      payload:
        $ref: '#/components/schemas/localizationMsg'

    get_entity_states:
      summary: üöÄ üçï Get the current state of the configured entities.
      description: |
        Called by the Remote Two when it needs to synchronize the dynamic entity attributes, e.g. after connection setup
        or waking up from standby.
        
        The integration should only send the state of the configured entities to reduce communication overhead,
        especially if there are many available entities, from which only a few are getting configured on the remote.  
        Any additional data will be ignored.
        
        Furthermore, the integration driver is free to decide which entity states it wants to send back. It's even
        advisable to use dirty flags in the integration driver if there are a lot of entities, and only return the
        changed data.
        
        ‚ö†Ô∏è Future change announcement: this request will be enhanced with a `force` flag (or the like) to signal that
        all entity states are required, and no data should be suppressed. This will happen for example after the
        remote is restarted.
      tags:
        - name: entity
        - name: required
      payload:
        $ref: '#/components/schemas/getEntityStatesMsg'
      x-response:
        $ref: '#/components/messages/entity_states'
    entity_states:
      summary: üöÄ üçï Current state of the entities.
      description: |
        Response message of the `get_entity_states` request. Contains the dynamic attributes of all entities.
      tags:
        - name: entity
        - name: required
      payload:
        $ref: '#/components/schemas/entityStatesMsg'
    entity_command:
      summary: üöÄ üçï Execute an entity command.
      description: |
        Instruct the integration driver to execute a command like "turn on" or "change temperature". 
        Optional command data like temperature value or channel number can be provided in the `params` array.
        The parameter objects are described in the entity feature definitions.
        
        The `result` response is to acknowledge the command and to return any immediate failures in case the driver
        already knows it's unable to perform the command due to invalid data, device communication issues etc.
        
        After successfully executing a command, the Remote Two expects an `entity_change` event with the updated feature 
        value(s).
      tags:
        - name: entity
        - name: required
      payload:
        $ref: '#/components/schemas/entityCommandMsg'
      x-response:
        $ref: '#/components/messages/result'
      examples:
        - payload:
            kind: req
            id: 123
            msg: entity_command
            msg_data:
              entity_type: button
              entity_id: button-1
              cmd_id: "press"
        - payload:
            kind: req
            id: 124
            msg: entity_command
            msg_data:
              entity_type: switch
              entity_id: switch-1
              cmd_id: "on"
        - payload:
            kind: req
            id: 124
            msg: entity_command
            msg_data:
              entity_type: switch
              entity_id: switch-1
              cmd_id: "off"
        - payload:
            kind: req
            id: 125
            msg: entity_command
            msg_data:
              entity_type: light
              entity_id: light-1
              cmd_id: "on"
        - payload:
            kind: req
            id: 125
            msg: entity_command
            msg_data:
              entity_type: light
              entity_id: light-1
              cmd_id: "on"
              params:
                brightness : 50
                temperature: 70
        - payload:
            kind: req
            id: 126
            msg: entity_command
            msg_data:
              entity_type: cover
              entity_id: blind-1
              cmd_id: up
        - payload:
            kind: req
            id: 126
            msg: entity_command
            msg_data:
              entity_type: cover
              entity_id: blind-1
              cmd_id: position
              params:
                position: 50
        - payload:
            kind: req
            id: 127
            msg: entity_command
            msg_data:
              entity_type: cover
              entity_id: blind-2_cover-only
              cmd_id: open
        - payload:
            kind: req
            id: 127
            msg: entity_command
            msg_data:
              entity_type: cover
              entity_id: blind-2_cover-only
              cmd_id: close

    # --- events
    entity_change:
      summary: üöÄ üçï Entity state change event.
      description: |
        Emitted when an attribute of an entity changes, e.g. is switched off. Either after an `entity_command` or if the
        entity is updated manually through a user or an external system. This keeps the Remote Two in sync with the real
        state of the entity without the need of constant polling.
      tags:
        - name: entity
        - name: event
        - name: required
      payload:
        $ref: '#/components/schemas/entityStateChangedEvent'

    entity_available:
      summary: üîç New entity available event.
      description: |
        Optional event to notify the Remote Two that new entities are available.
      tags:
        - name: entity
        - name: event
      payload:
        $ref: '#/components/schemas/entityAvailableEvent'

    entity_removed:
      summary: üîç Entity removed event.
      description: |
        Optional event to notify the Remote Two that entities were removed and no longer available.
      tags:
        - name: entity
        - name: event
      payload:
        $ref: '#/components/schemas/entityRemovedEvent'

  # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  schemas:
    # =========================================================================
    # Common message schemas
    # =========================================================================
    commonReq:
      description: Common request message properties.
      type: object
      properties:
        kind:
          description: Request message identifier.
          type: string
          const: req
        id:
          description: |
            Request ID which must be increased for every new request. This ID will be returned in the response message.
          type: integer
          minimum: 0
          default: 0
        msg:
          description: One of the defined API request message types.
          type: string
          minLength: 1
          maxLength: 32
      required:
        - kind
        - id
        - msg

    commonResp:
      description: Common response message properties.
      type: object
      properties:
        kind:
          description: Response message identifier.
          type: string
          const: resp
        req_id:
          $ref: '#/components/schemas/msgId'
        msg:
          description: One of the defined API response message types.
          type: string
          minLength: 1
          maxLength: 32
        code:
          description: Response code of the operation according to HTTP status codes.
          type: integer
          default: 200
        msg_data:
          description: Wrapper for response data object.
          type: object
      required:
        - kind
        - req_id
        - msg
        - code

    commonEvent:
      description: Common event message properties.
      type: object
      properties:
        kind:
          description: Event message identifier.
          type: string
          const: event
        msg:
          description: One of the defined API event message types.
          type: string
          minLength: 1
          maxLength: 32
        cat:
          description: Event category.
          type: string
        ts:
          type: string
          format: date-time
          description: Optional timestamp when the event was generated.
        msg_data:
          description: Wrapper for event data object.
          type: object
      required:
        - kind
        - msg
        - msg_data

    authRequiredEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: auth_required
            msg_data:
              $ref: '#/components/schemas/driverVersion'
          required:
            - msg
    authRequestMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: auth
            msg_data:
              type: object
              properties:
                token:
                  type: string
          required:
            - msg
            - msg_data
    authMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: authentication
            msg_data:
              $ref: '#/components/schemas/driverVersion'
          required:
            - msg

    # =========================================================================
    # INTEGRATIONS message schemas
    # =========================================================================
    getDriverVersionMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_driver_version
          required:
            - msg
    driverVersionMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: driver_version
            msg_data:
              $ref: '#/components/schemas/driverVersion'
          required:
            - msg
            - msg_data

    getDriverMetadataMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_driver_metadata
          required:
            - msg
    driverMetadataMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: driver_metadata
            msg_data:
              $ref: '#/components/schemas/driverMetadata'
          required:
            - msg
            - msg_data

    getVersionMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_version
          required:
            - msg
    versionMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: version
            msg_data:
              $ref: '#/components/schemas/versionInfo'
          required:
            - msg
            - msg_data

    # --- device & setup handling
    getDeviceStateMsg:
      description: |
        For simple drivers without dynamic devices the `msg_data` object can be omitted. In this case, the request
        is for the overall integration driver and not for a specific device.
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_device_state
            msg_data:
              type: object
              properties:
                device_id:
                  type: string
          required:
            - msg

    deviceStateEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: device_state
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/deviceState'
          required:
            - msg
            - msg_data

    setupDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: setup_driver
            msg_data:
              type: object
              properties:
                setup_data:
                  $ref: '#/components/schemas/SettingsValues'
              required:
                - setup_data
          required:
            - msg
            - msg_data

    driverSetupChangeEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: driver_setup_change
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/driverSetupChange'
          required:
            - msg
            - msg_data

    abortDriverSetupEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: abort_driver_setup
            cat:
              type: string
              const: DEVICE
            msg_data:
              type: object
              properties:
                error:
                  $ref: '#/components/schemas/integrationSetupError'
              required:
                - error
          required:
            - msg
            - msg_data

    # based on Core-API setIntegrationUserDataMsg: without driver_id
    setDriverUserDataMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_driver_user_data
            msg_data:
              type: object
              oneOf:
                - type: object
                  properties:
                    input_values:
                      $ref: '#/components/schemas/SettingsValues'
                  required:
                    - input_values
                - type: object
                  properties:
                    confirm:
                      type: boolean
                  required:
                    - confirm
          required:
            - msg
            - msg_data

    # --- entity handling

    getAvailableEntitiesMsg:
      description: |
        - TODO add paging: worst case this could include hundreds if not thousands of entities!
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_available_entities
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/availableEntityFilter'
          required:
            - msg

    availableEntitiesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: available_entities
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/availableEntityFilter'
                available_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/entity'
              required:
                - available_entities
          required:
            - msg
            - msg_data

    subscribeEventsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: subscribe_events
            msg_data:
              type: object
              properties:
                device_id:
                  description: Only required for multi-device integrations.
                  type: string
                entity_ids:
                  descriptions: Subscribe to events only for specified entities.
                  type: array
                  items:
                    type: string
          required:
            - msg

    unsubscribeEventsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: unsubscribe_events
            msg_data:
              type: object
              properties:
                device_id:
                  description: Only required for multi-device integrations.
                  type: string
                entity_ids:
                  descriptions: Unsubscribe from events only for specified entities.
                  type: array
                  items:
                    type: string
          required:
            - msg

    getSupportedEntityTypesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_supported_entity_types
          required:
            - msg

    supportedEntityTypesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: supported_entity_types
            msg_data:
              type: array
              items:
                type: string
          required:
            - msg
            - msg_data
  
    getConfiguredEntitiesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_configured_entities
          required:
            - msg
    configuredEntitiesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: configured_entities
            msg_data:
              description: Array of configured entity IDs.
              type: array
              items:
                type: string
          required:
            - msg
            - msg_data

    getLocalizationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_localization_cfg
          required:
            - msg
    localizationMsg:
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: localization_cfg
            msg_data:
              $ref: '#/components/schemas/localizationSettings'
          required:
            - msg
            - msg_data

    getEntityStatesMsg:
      description: |
        For simple drivers without dynamic devices the `msg_data.device_id` property can be omitted.
        In this case, the request is for the overall integration driver and not for a specific device.
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_entity_states
            msg_data:
              type: object
              properties:
                device_id:
                  description: Only required for multi-device integrations.
                  type: string
          required:
            - msg

    entityStatesMsg:
      description: |
        The `msg_data` payload is an array of the `entity_change` event.
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: entity_states
            msg_data:
              type: array
              items:
                $ref: '#/components/schemas/entityStateChanged'
          required:
            - msg
            - msg_data

    entityCommandMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: entity_command
            msg_data:
              type: object
              properties:
                device_id:
                  type: string
                entity_id:
                  type: string
                cmd_id:
                  type: string
                params:
                  description: |
                    TODO Define parameter objects with oneOf or just document possible objects?
                  type: object
              required:
                - entity_type
                - entity_id
                - cmd_id
          required:
            - msg
            - msg_data

    # =========================================================================
    # Event message schemas
    # =========================================================================

    error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    connectEvent:
      description: |
        For simple drivers without dynamic devices the `msg_data` object can be omitted. In this case, the connect event
        is for the overall integration driver and not for a specific device.
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: connect
            cat:
              type: string
              const: DEVICE
            msg_data:
              type: object
              properties:
                device_id:
                  documentation: Only required for multi device drivers.
                  type: string
          required:
            - msg

    disconnectEvent:
      description: |
        For simple drivers without dynamic devices the `msg_data` object can be omitted. In this case, the disconnect
        event is for the overall integration driver and not for a specific device.
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: disconnect
            cat:
              type: string
              const: DEVICE
            msg_data:
              type: object
              properties:
                device_id:
                  documentation: Only required for multi device drivers.
                  type: string
          required:
            - msg

    enterStandbyEvent:
      description: |
        TODO add standby type in msg_data? E.g. "screen off" & "sleep" for the integration to be notified that the
        Remote Two is no longer reachable? While the screen is off, the remote API is still running, but might soon go
        into sleep state.
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: enter_standby
            cat:
              type: string
              const: REMOTE
          required:
            - msg

    exitStandbyEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: exit_standby
            cat:
              type: string
              const: REMOTE
          required:
            - msg

    entityStateChangedEvent:
      description: An entity attribute has changed.
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: entity_change
            cat:
              type: string
              const: ENTITY
            msg_data:
              $ref: '#/components/schemas/entityStateChanged'
          required:
            - msg
            - msg_data

    entityStateChanged:
      description: See entity documentation for `attributes` payload.
      type: object
      properties:
        device_id:
          type: string
        entity_type:
          type: string
        entity_id:
          type: string
        attributes:
          type: object
      required:
        - entity_type
        - entity_id
        - attributes

    entityAvailableEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: entity_available
            cat:
              type: string
              const: ENTITY
            msg_data:
              $ref: '#/components/schemas/entity'
          required:
            - msg
            - msg_data

    entityRemovedEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: entity_removed
            cat:
              type: string
              const: ENTITY
            msg_data:
              type: object
              properties:
                device_id:
                  type: string
                entity_type:
                  type: string
                entity_id:
                  type: string
              required:
                - entity_type
                - entity_id
          required:
            - msg
            - msg_data

    # =========================================================================
    # Common schemas
    # =========================================================================

    msgId:
      description: Request message ID which is reflected in response message.
      type: integer
      minimum: 0
      default: 0

    driverVersion:
      type: object
      properties:
        name:
          type: string
        version:
          type: object
          properties:
            api:
              type: string
            driver:
              type: string

    driverMetadata:
      description: |
        Integration driver metadata.
      type: object
      properties:
        driver_id:
          type: string
        name:
          $ref: '#/components/schemas/languageText'
        driver_url:
          description: Optional WebSocket URL of the driver to override mDNS information.
          type: string
          format: uri
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/intgAuthMethod'
        version:
          description: Driver version, [SemVer](https://semver.org/) preferred.
          type: string
          maxLength: 20
        min_core_api:
          description: |
            Optional version check: minimum required Core-API version in the remote.
          type: string
          maxLength: 20
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        description:
          $ref: '#/components/schemas/languageText'
        developer:
          $ref: '#/components/schemas/driverDeveloper'
        home_page:
          description: Optional home page url for more information.
          type: string
          format: uri
          maxLength: 255
        device_discovery:
          description: Driver supports multi-device discovery. **Not yet supported**.
          type: boolean
        setup_data_schema:
          $ref: '#/components/schemas/SettingsPage'
        release_date:
          description: Release date of the driver.
          type: string
          format: date
      required:
        - driver_id
        - name
        - version

    driverDeveloper:
      type: object
      description: Optional information about the integration developer.
      properties:
        name:
          description: Optional developer information to display in UI / web-configurator.
          type: string
          maxLength: 50
        url:
          description: Optional developer home page.
          type: string
          format: uri
          maxLength: 255
        email:
          description: Optional developer contact email.
          type: string
          format: email
          maxLength: 100

    intgAuthMethod:
      type: string
      description: |
        Integration driver authentication method if a token is required.

        The JSON `auth` message is used if a token is configured but no authentication method is set.
      enum:
        - HEADER
        - MESSAGE

    deviceState:
      type: object
      properties:
        device_id:
          type: string
        state:
          type: string
          enum:
            - CONNECTED
            - CONNECTING
            - DISCONNECTED
            - ERROR
      required:
        - state

    availableEntityFilter:
      description: Optional filters
      type: object
      properties:
        device_id:
          type: string
          description: Optional device instance filter if driver supports multi instances.
        entity_type:
          $ref: '#/components/schemas/entityType'

    entity:
      description: |
        Common definition of an entity. Concrete entities are: `cover`, `button`, `climate`, `light`, `media_player`,
        `sensor`, `switch`. 
        
        The `entity_type` value acts as discriminator for the entity type, which defines the supported features and
        options of an entity.  
        E.g. a simple `button` entity supports on / off, whereas a `cover` entity can be a simple window cover with only
        the ability to open / close, or a venetian blind with position and tilting features.  
        See [polymorphism support in AsyncAPI specification](https://www.asyncapi.com/docs/specifications/v2.2.0#schemaComposition)
        for more information.
      discriminator: entity_type
      type: object
      properties:
        entity_id:
          description: Unique entity identifier.
          type: string
        entity_type:
          description: Discriminator value for the concrete entity device type.
          type: string
        device_id:
          description: Optional associated device, if the integration driver supports multiple devices.
          type: string
        features:
          description: |
            Supported features of the entity. See concrete entity definition for available features.
          type: array
          items:
            type: string
        name:
          description: |
            Display name of the entity in the UI. An english text should always be provided as fallback option.
          $ref: '#/components/schemas/languageText'
        area:
          description: |
            Optional area if supported by the integration, e.g. `Living room`. This information might be used by the UI
            in the setup process to automatically create profile pages for all areas returned in the available entities.
          type: string
      required:
        - entity_id
        - entity_type
        - name

    button:
      description: |
        A button entity can fire an event or start an action which cannot be further controlled once started.
        
        This can be used for "fire and forget" commands, e.g. running a system command, sending an IR code, restart a
        device, reset something etc.
        
        A button is stateless. To represent something that can be turned on and off, then the `switch` entity should be
        used.
      allOf:
        - $ref: '#/components/schemas/entity'
        - type: object
          properties:
            features:
              type: array
              items:
                type: string
                enum:
                  - press

    switch:
      description: |
        A switch entity can turn something on or off and the current state should be readable by the integration driver.
        
        If the state can't be read, the `readable` option property can be set to `false`. This should be avoided
        whenever possible, because the Remote Two either has to assume the current state, or the UI needs to ask the
        user for the current state.
        
        If the switch controls a light source, then the 'light' entity is usually a better choice.
      allOf:
        - $ref: '#/components/schemas/entity'
        - type: object
          properties:
            device_class:
              description: |
                Optional device type. This can be used by the UI to represent the entity with a different icon,
                behaviour etc.
              type: string
              enum:
                - switch
                - outlet
            features:
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - toggle
            options:
              type: object
              properties:
                readable:
                  description: |
                    If set to false the current state of the switch cannot be read. This will make the switch stateless
                    and the UI might ask the user for the current state.
                  type: boolean
                  default: true

    climate:
      description: |
        A climate entity controls heating, ventilation and air conditioning (HVAC) devices. This can range from simple
        fans to personal air conditioning units to integrated building devices.
      allOf:
        - $ref: '#/components/schemas/entity'
        - type: object
          properties:
            features:
              description: |
                Climate features:
                - `on_off`: The device can be turned on and off. The active HVAC mode after power on is device specific
                   and must be reflected in the `state` attribute.
                - `heat`: The device supports heating.
                - `cool`: The device supports cooling. 
                - `current_temperature`: The device can measure the current temperature
                - `target_temperature`: The device supports a target temperature for heating or cooling.
                - üöß `target_temperature_range`: The device supports a target temperature range.
                - üöß `fan`: The device has a controllable fan.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - heat
                  - cool
                  - current_temperature
                  - target_temperature
                  - target_temperature_range
                  - fan
            options:
              type: object
              properties:
                temperature_unit:
                  type: string
                  enum:
                    - CELSIUS
                    - FAHRENHEIT
                  default: CELSIUS
                target_temperature_step:
                  description: |
                    Step value for the UI for setting the target temperature. Defaults: `CELSIUS` = 0.5,
                    `FAHRENHEIT` = 1. Smallest step size: 0.1
                  type: number
                  default: 0.5
                  minimum: 0.1
                max_temperature:
                  description: |
                    Maximum temperature to show in the UI for the target temperature range. Defaults: `CELSIUS` = 30,
                    `FAHRENHEIT` = 90.
                  type: integer
                  format: int32
                  default: 30
                min_temperature:
                  description: |
                    Minimum temperature to show in the UI for the target temperature range. Defaults: `CELSIUS` = 10,
                    `FAHRENHEIT` = 50.
                  type: integer
                  format: int32
                  default: 10

    cover:
      description: |
        Entity for covering or opening things like blinds, window covers, curtains, etc. The entity `features` specify
        the abilities of the cover and the controllable properties, whereas the `device_class` specifies the UI
        representation.
      allOf:
        - $ref: '#/components/schemas/entity'
        - type: object
          properties:
            device_class:
              description: |
                Optional cover classification. If not specified, the entity will be treated as a window blind.  
                The device class is used by the UI to represent the cover with a different icon, behaviour etc.
              type: string
              enum:
                - blind
                - curtain
                - garage
                - shade
                - door
                - gate
                - window
            features:
              description: |
                Cover features:
                - `open`: The cover can can be opened.
                - `close`: The cover can can be closed.
                - `stop`: Opening, closing or setting the position can be stopped.
                - `position`: The cover can be moved to a specific position, e.g. 30% open.
                - üöß `tilt`: The cover supports being tilted up and down.
                - üöß `tilt_stop`: Tilting the cover can be stopped.
                - üöß `tilt_position`: The cover can be moved to a specific tilt position.
              type: array
              items:
                type: string
                enum:
                  - open
                  - close
                  - stop
                  - position
                  - tilt
                  - tilt_stop
                  - tilt_position

    light:
      description: |
        A light entity can be switched on and off and depending on its features, the light source can be further
        controlled like setting brightness, hue, color saturation and color temperature.
        
        The [HSV color model](https://en.wikipedia.org/wiki/HSL_and_HSV) is used for adjusting color and brightness.
      allOf:
        - $ref: '#/components/schemas/entity'
        - type: object
          properties:
            features:
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - toggle
                  - dim
                  - color
                  - color_temperature
            options:
              type: object
              properties:
                color_temperature_steps:
                  description: |
                    Number of color temperature steps of the light source. Some lamps only support 3 modes, where
                    others can be adjusted freely.
                  type: integer
                  default: 100
                  minimum: 2
                  maximum: 100

    media_player:
      description: |
        A media player entity controls playback of media on a device. This could be an online music streaming service,
        a TV, a stereo or a video player.
      allOf:
        - $ref: '#/components/schemas/entity'
        - type: object
          properties:
            features:
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - toggle
                  - volume
                  - volume_up_down
                  - mute_toggle
                  - mute
                  - unmute
                  - play_pause
                  - stop
                  - next
                  - previous
                  - fast_forward
                  - rewind
                  - repeat
                  - shuffle
                  - seek
                  - media_duration
                  - media_position
                  - media_title
                  - media_artist
                  - media_album
                  - media_image_url
                  - media_type
                  - source
                  - sound_mode
#                  - up # TODO media navigation controls: part of entity, or solve as yet to define "media player / scene card"?
#                  - down
#                  - left
#                  - right
#                  - ok
#                  - back
#                  - menu
#                  - home
                  # TODO playlist handling, browsing, searching
            options:
              type: object
              properties:
                volume_steps:
                  description: |
                    Number of available volume steps for the set volume command and UI controls. Examples:
                    - 100 = any value between 0..100
                    - 50 = only odd numbers
                    - 3 = \[33, 67, 100]
                    - etc.
                    
                    Value 0 = mute.
                    
                    Note: if the integration receives an "unexpected" number it is required to round up or down to the
                    next matching value.
                  type: integer
                  default: 100
                  minimum: 2
                  maximum: 100

    sensor:
      description: |
        A sensor entity provides measured values from devices or dedicated hardware sensors.  
        The device class specifies the type of sensor and links it with a default unit of measurement to display in the user
        interface.
      
        - The `custom` device class allows arbitrary UI labels and units.
        - The `temperature` device class performs automatic conversion between ¬∞C and ¬∞F.
      allOf:
        - $ref: '#/components/schemas/entity'
        - type: object
          properties:
            device_class:
              description: |
                Sensor type. This is used by the UI to represent the sensor with a matching icon, default unit etc.  
                To use a custom unit
              type: string
              enum:
                - custom
                - temperature
                - humidity
                - power
                - energy
                - voltage
                - current
                - battery
#                - air_quality_index
#                - carbon_dioxide
#                - carbon_monoxide
#                - illuminance
#                - pressure
            options:
              type: object
              properties:
                custom_label:
                  description: |
                    Label for a custom sensor if `device_class` is not specified or to override a default unit.
                  $ref: '#/components/schemas/languageText'
                custom_unit:
                  description: |
                    Unit label for a custom sensor if `device_class` is not specified or to override a default unit.
                  $ref: '#/components/schemas/languageText'
                native_unit:
                  description: |
                    The sensor's native unit of measurement to perform automatic conversion. Applicable to device
                    classes: `temperature`
                decimals:
                  description: |
                    Number of decimal places to show in the UI if the sensor provides the measurement as a number.
                    Not applicable to string values.
                  type: integer
                  default: 0
                min_value:
                  description: |
                    üöß Optional minimum value of the sensor output. This can be used in the UI for graphs or gauges.
                  type: number
                max_value:
                  description: |
                    üöß Optional maximum value of the sensor output. This can be used in the UI for graphs or gauges.
                  type: number

    entityType:
      description: |
        Supported entities, defined as extensible enum: already known entity types are in the enum, but other string
        values are allowed for forward compatability.
      type: string
      anyOf:
        - enum:
            - button
            - switch
            - light
            - cover
            - media_player
            - climate
            - sensor
            - remote
        - {}  # extensible enum: there might be more supported entity types in a newer implementation than defined above

    # derived from Core-API integrationSetupChange: without driver_id
    driverSetupChange:
      type: object
      properties:
        event_type:
          description: |
            - `START`: setup started
            - `SETUP`: setup in progress. See `state` enum for current setup state.
            - `STOP`: setup finished, either with: `state: OK` for successful setup, or `state: ERROR` if setup 
                      didn't completed successfully.
          type: string
          enum:
            - START
            - SETUP
            - STOP
        state:
          $ref: '#/components/schemas/integrationSetupState'
        error:
          $ref: '#/components/schemas/integrationSetupError'
        require_user_action:
          description: If set, the setup process waits for the specified user action.
          type: object
          oneOf:
            - type: object
              properties:
                input:
                  type: object
                  $ref: '#/components/schemas/SettingsPage'
              required:
                - input
            - type: object
              properties:
                confirmation:
                  type: object
                  $ref: '#/components/schemas/ConfirmationPage'
              required:
                - confirmation
      required:
        - event_type
        - state

    # shared with Core-API
    integrationSetupState:
      description: |
        - `SETUP`: setup in progress
        - `WAIT_USER_ACTION`: setup flow is waiting for user input. See `require_user_action` for requested input.
        - `OK`: setup finished successfully
        - `ERROR`: setup error
      type: string
      enum:
        - SETUP
        - WAIT_USER_ACTION
        - OK
        - ERROR

    # shared with Core-API
    integrationSetupError:
      description: |
        More detailed error reason for `state: ERROR` condition.
      type: string
      enum:
        - NONE
        - NOT_FOUND
        - CONNECTION_REFUSED
        - AUTHORIZATION_ERROR
        - TIMEOUT
        - OTHER

    # shared with Core-API
    ConfirmationPage:
      description: Confirmation screen
      type: object
      properties:
        title:
          $ref: '#/components/schemas/languageText'
        message1:
          description: Message to display between title and image (if supplied). Supports Markdown formatting.
          $ref: '#/components/schemas/languageText'
        image:
          description: |
            Optional base64-encoded image.

            TODO maximum encoded length to avoid WebSocket continuation frames, supported image formats
            (png & svg?), max height & width
          type: string
          format: byte
          maxLength: 32768
        message2:
          description: Message to display below message1 or image (if supplied). Supports Markdown formatting.
          $ref: '#/components/schemas/languageText'
      required:
        - title

    # shared with Core-API
    SettingsPage:
      description: Settings definition page, e.g. to configure an integration driver.
      type: object
      properties:
        title:
          $ref: '#/components/schemas/languageText'
        settings:
          description: One or multiple input field definitions, with optional pre-set values.
          type: array
          items:
            $ref: '#/components/schemas/Setting'
      required:
        - title
        - settings

    # shared with Core-API
    Setting:
      description: |
        An input setting is of a specific type defined in `field.type` which defines how it is presented to the user.

        Inspired by the [Homey SDK settings](https://apps.developer.homey.app/the-basics/devices/settings) concept.
      type: object
      properties:
        id:
          description: Unique identifier of the setting to be returned with the entered value.
          type: string
          maximum: 50
        label:
          $ref: '#/components/schemas/languageText'
        field:
          oneOf:
            - $ref: '#/components/schemas/SettingTypeNumber'
            - $ref: '#/components/schemas/SettingTypeText'
            - $ref: '#/components/schemas/SettingTypeTextArea'
            - $ref: '#/components/schemas/SettingTypePassword'
            - $ref: '#/components/schemas/SettingTypeCheckbox'
            - $ref: '#/components/schemas/SettingTypeDropdown'
            - $ref: '#/components/schemas/SettingTypeLabel'
      required:
        - id
        - label
        - field

    # shared with Core-API
    SettingTypeNumber:
      description: |
        Number input with optional `min`, `max`, `steps` and `decimals` properties. The default value must be specified
        in `value`. An optional unit of the number setting can be specified in `units`, which will be displayed next to
        the input field.
      type: object
      properties:
        number:
          type: object
          properties:
            value:
              description: Default value for input field.
              type: number
            min:
              description: "Optional validation: minimum allowed value (inclusive)."
              type: number
            max:
              description: "Optional validation: maximum allowed value (inclusive)."
              type: number
            steps:
              description: |
                Optional validation: allowed step increment between values. Might also be used in the UI for input helpers.
              type: number
            decimals:
              description: "Number of decimal places. 0 = integer value"
              type: integer
              minimum: 0
              default: 0
            unit:
              $ref: '#/components/schemas/languageText'
          required:
            - value
      required:
        - number

    # shared with Core-API
    SettingTypeText:
      description: |
        Single line of text input.

        TODO: format specifier for e.g. email, url, date, datetime etc.?
      type: object
      properties:
        text:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
            regex:
              description: Optional regex validation pattern for the input value.
              type: string
      required:
        - text

    # shared with Core-API
    SettingTypeTextArea:
      description: Multi-line text input, e.g. for providing a description.
      type: object
      properties:
        textarea:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
      required:
        - textarea

    # shared with Core-API
    SettingTypePassword:
      description: |
        Password or pin entry field with the input text hidden from the user. Otherwise the same as text input.
      type: object
      properties:
        password:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
              format: password
            regex:
              description: Optional regex validation pattern for the input value.
              type: string
      required:
        - password

    # shared with Core-API
    SettingTypeCheckbox:
      description: Checkbox setting with `true` / `false` values.
      type: object
      properties:
        checkbox:
          type: object
          properties:
            value:
              description: Initial setting.
              type: boolean
          required:
            - value
      required:
        - checkbox

    # shared with Core-API
    SettingTypeDropdown:
      description: Dropdown setting to pick a single value from a list. All values must be strings.
      type: object
      properties:
        dropdown:
          type: object
          properties:
            value:
              description: Pre-selected dropdown id
              type: string
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Selection identifier.
                    type: string
                  label:
                    $ref: '#/components/schemas/languageText'
                required:
                  - id
                  - label
          required:
            - items
      required:
        - dropdown

    # shared with Core-API
    SettingTypeLabel:
      description: |
        Additional read-only text for information purpose between other settings. Supports Markdown formatting.
      type: object
      properties:
        label:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/languageText'
          required:
            - value
      required:
        - label

    # shared with Core-API
    SettingsValues:
      description: |
        User input result of a SettingsPage as key values.
        - key: id of the field
        - value: entered user value as string. This is either the entered text or number, selected checkbox state or the
          selected dropdown item id.  
          ‚ö†Ô∏è Non native string values as numbers or booleans are represented as string values!
      type: object
      additionalProperties:
        type: string

    # shared with Core-API
    languageText: # untyped Map<string,string>
      type: object
      patternProperties:
        ^[a-z]{2}(_\w+)?$: # TODO make culture code pattern more strict or more open?
          type: string
          description: |
            Key value pairs of language texts. Key: ISO 639-1 code with optional country suffix to represent a `culture
            code`. Examples: `en`, `en_UK`, `en_US`, `de`, `de_CH`.   
            If we need to support more regional differences within a country, then the
            [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) might be a solution. This would even
            support the various Swiss German dialects!
      additionalProperties: false

    # =========================================================================
    # from core API
    # TODO use shared json schema
    # =========================================================================
    versionInfo:
      type: object
      properties:
        api:
          type: string
        core:
          type: string
        ui:
          type: string
        os:
          type: string
        integrations: # untyped Map<string,string>
          type: object
          additionalProperties:
            type: string

    localizationSettings:
      type: object
      properties:
        language_code:
          $ref: '#/components/schemas/languageCode'
        country_code:
          $ref: '#/components/schemas/countryCode'
        time_zone:
          type: string
        time_format_24h:
          type: boolean
          default: true
        measurement_unit:
          $ref: '#/components/schemas/measurementUnit'
    languageCode:
      type: string
      pattern: '^[a-z]{2}(_\w+)?$'
      description: |
        Language culture code: starting with the two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
        code, followed by an optional [ISO-3166 country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes),
        separated by an underscore.
        Examples: `en`, `en_UK`, `en_US`, `de`, `de_DE`, `de_CH` etc.
    countryCode:
      type: string
      format: iso-3166
      description: |
        Two-letter country codes defined in [ISO-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
    measurementUnit:
      type: string
      enum:
        - METRIC
        - US
        - UK

    # =========================================================================
    # from OpenAPI
    # TODO use shared json schema
    # =========================================================================

    iconIdentifier:
      type: string
      maxLength: 255
      description: |
        Optional icon identifier. If specified the icon will be set. An empty identifier while updating the object
        removes the existing icon.
