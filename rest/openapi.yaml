openapi: 3.0.3
info:
  title: Remote Two REST API
  version: 0.11.2
  contact:
    name: API Support
    url: 'https://github.com/unfoldedcircle/core-api/issues'
  license:
    name: Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
    url: 'https://creativecommons.org/licenses/by-sa/4.0/'
  description: "The Unfolded Circle Remote Two REST API allows to configure the remote and manage custom resource files.\nFurthermore, API-keys for the WebSocket & REST APIs can be created.\n\n## Overview\n\nThe Remote Two WebSockets Core-API allows you to interact with the Unfolded Circle remote-core application and take\nfull control of its features.\n\nThe focus of the Core-API is to provide all functionality for the UI application and the web-configurator.  \nIt may also be used by other external systems and integration drivers, if specific configuration or interaction\nfeatures are required, which are not present in the Integration API.\n\n## Authentication\n\nAll API endpoints besides `/api/pub` are secured. Available authentication methods are Basic Auth for every request\nand cookie based session login with the `/api/pub/login` endpoint.\n\n## \U0001F6A7 Missing Features\n\n**This API is a preview version and does not yet contain all functionality.**\n\nThe following features will be continuously added:\n\n- Software update checks, download & installation\n- Integration setup flow\n- Docking station integration\n\n## API Versioning\n\nThe API is versioned according to [SemVer](https://semver.org/).  \nThe initial public release will be `1.0.0` once it is considered stable enough with some initial integration\nimplementations and developer examples.\n\n**Any major version zero (`0.y.z`) is for initial development and may change at any time!**  \nI.e. backward compatibility for minor releases is not yet established, anything MAY change at any time!\n"
externalDocs:
  description: Find out more about the Remote Two
  url: 'https://www.unfoldedcircle.com/'
servers:
  - url: /api
  - url: 'http://localhost:8080/api'
  - url: 'https://localhost:8443/api'
  - url: 'http://unfolded-simulator.local:8080/api'
  - url: 'https://unfolded-simulator.local:8443/api'
security:
  - basicAuth: []
  - cookieAuth: []
tags:
  - name: info
    description: Public status information and health checks
  - name: auth
    description: Session authentication
  - name: api-keys
    description: API keys for authentication.
  - name: external-token
    description: Access token handling for external systems.
  - name: resources
    description: 'Media files handling, e.g. manage background images, icons or sound effects.'
  - name: integrations
    description: Integration handling
  - name: entities
    description: |
      Common handling of configured entities like sending commands and modifying editable properties.  
      Entities are usually provided by integrations, except the special activity, macro and infrared-remote entities.
  - name: activities
    description: |
      Combine multiple entities into an activity with optional on- & off-sequences, physical button mappings and a
      custom user interface.
  - name: macros
    description: |
      Macros execute a sequence of commands which is exposed as an entity command. Macros don't have a custom user
      interface.
  - name: infrared
    description: "\U0001F477 **work in progress**, not yet fully implemented! Infrared code set lookup, custom IR code management and IR emitter devices.\n"
  - name: remotes
    description: "\U0001F477 **work in progress**, not yet fully implemented! Customizable user interface and button mappings for remote-entities\ncontrolling single IR- and the like devices.\n"
  - name: profiles
    description: 'User profile configuration with profiles, groups, pages'
  - name: cfg
    description: Configuration settings
  - name: dock
    description: "\U0001F477 Dock infrared handling - **work in progress**"
  - name: system
    description: "\U0001F477 System information and commands - **work in progress**"
  - name: mdns
    description: "\U0001F477 Service Discovery - **work in progress**"
paths:
  /pub/version:
    get:
      tags:
        - info
      summary: Get version information about installed components.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
      security: []
  /pub/status:
    get:
      tags:
        - info
      summary: Get status information about the system.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  memory:
                    type: object
                    description: Memory status
                    properties:
                      total_memory:
                        type: integer
                        description: Amount of available RAM in KB
                      available_memory:
                        type: integer
                        description: Amount of available RAM in KB for (re)use
                      used_memory:
                        type: integer
                        description: Amount of used RAM in KB
                      total_swap:
                        type: integer
                        description: SWAP size in KB
                      used_swap:
                        type: integer
                        description: Free SWAP in KB
                  load_avg:
                    type: object
                    description: System load average
                    properties:
                      one:
                        type: number
                        description: Average load within one minute
                      five:
                        type: number
                        description: Average load within five minutes
                      fifteen:
                        type: number
                        description: Average load within fifteen minutes
                  filesystem:
                    type: object
                    description: Filesystem status
                    properties:
                      user_data:
                        type: object
                        properties:
                          available:
                            type: integer
                            description: Amount of available disk space in KB
                          used:
                            type: integer
                            description: Amount of used disk space in KB
      security: []
  /pub/health_check:
    get:
      tags:
        - info
      summary: Retrieve health check information about the system and running services.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  db:
                    type: string
                    enum:
                      - Healthy
                      - Degraded
                      - Unhealthy
                  ui:
                    $ref: '#/paths/~1pub~1health_check/get/responses/200/content/application~1json/schema/properties/db'
                  storage:
                    $ref: '#/paths/~1pub~1health_check/get/responses/200/content/application~1json/schema/properties/db'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
      security: []
  /pub/login:
    post:
      tags:
        - auth
      summary: Log in and create session.
      description: |
        A successful login returns a session authentication cookie which need to be submitted in subsequent requests.  
        The session ID is returned in a cookie named `id`.
      operationId: login
      requestBody:
        required: true
        description: A JSON object containing the username and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: []
      responses:
        '200':
          description: Successfully authenticated.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: id=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  /pub/logout:
    post:
      tags:
        - auth
      summary: Log out from session.
      description: |
        The session is removed and the session cookie named `id` is cleared.
      operationId: logout
      parameters:
        - name: id
          in: cookie
          description: Session cookie
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Successfully logged out.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'id=; HttpOnly; Path=/; Max-Age=0; Expires=Sat, 26 Jun 2021 12:05:09 GMT'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  /auth/api_keys:
    head:
      tags:
        - api-keys
      summary: Get total number of available API keys.
      operationId: getApiKeyCount
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - api-keys
      summary: List available API keys.
      description: |
        This endpoint is only intended for a management UI and not for client access. The response contains a key
        identifier in `key_id` which is required for further operations on the API key, like disabling or revoking it or
        adding a description.
      operationId: getApiKeys
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeys'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - api-keys
      summary: Create an API key for the Remote Two APIs.
      description: |
        The returned API key in `api_key` is only visible in this response. Afterwards it cannot be retrieved anymore!

        The newly created API key is usually not yet enabled for use and must first be approved by the user on the remote.

        The required scopes must be provided. They let you specify what exactly a client needs to access.
        When the access token request is displayed to the remote user for approval, the requested scopes will be
        displayed to them.

        An error is returned if an API key already exists for the provided `name`. To issue a new API key for the same
        name, the old token needs to be revoked first.
      operationId: createApiKey
      requestBody:
        description: Client information requesting access
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyRequest'
            example:
              name: My integration
              scopes:
                - admin
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - api-keys
      summary: Delete all API keys.
      description: |
        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: deleteAllApiKeys
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/auth/api_keys/{apiKeyId}':
    get:
      tags:
        - api-keys
      summary: Get information about an API key.
      description: |
        The API key itself is non-retrievable. This function provides the access rights and validity of a defined API key.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: getApiKey
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - api-keys
      summary: Update properties of an API key.
      operationId: updateApiKey
      description: |
        Activate, deactivate, rename or set validity periods of an existing API key.

        Note: access scopes cannot be changed. This requires to revoke the API key and request a new one.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      requestBody:
        description: Properties to update in the existing token.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - api-keys
      summary: Revoke an API key.
      description: |
        The API key will be deleted, no further access is possible.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: deleteApiKey
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /auth/scopes:
    get:
      tags:
        - api-keys
      summary: Get available access scopes.
      description: |
        Access scopes are used to create tokens for the WebSocket API.
      operationId: getAccessScopes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scopes'
  /auth/external:
    get:
      tags:
        - external-token
      summary: Get registered external systems.
      description: |
        External systems are handled with the R2 integrations. Before an access token for such a system can be provided,
        the corresponding system needs to be registered.

        _TODO: reference to WebSocket API for integration registration._

        If the expected system name is not returned by this call, any operations on that system name will fail:
        `/auth/external/{system}`.
        Therefore, it's advisable to either call this method first or react on the 404 error while providing or updating an
        external system token, to inform the client user, that the integration is not available on the remote.
      operationId: getExternalSystems
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSystems'
    delete:
      tags:
        - external-token
      summary: Remove all external access tokens.
      description: |
        Management operation to delete all external access tokens. Attention: this cannot be reverted!
      operationId: deleteAllExternalAccessTokens
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  '/auth/external/{system}':
    post:
      tags:
        - external-token
      summary: Provide an access token of an external system.
      description: |
        An access token is usually required to connect to external systems like Home Assistant.
        This method allows the external system to automatically provide the access token for the corresponding R2
        integration instead of forcing the user to type it in. If the token name already exists for the given system,
        error `422` is returned.
        Use the put method to update an existing token.

        The format of the access token depends on the external system and the involved R2 integration.
        It could be a UUID, a JWT or any other representation required for the integration to communicate with the
        external system.

        The `system` parameter is determined by the registered R2 integration. Only registered system name identifiers are
        valid, otherwise error `404` will be returned.
        E.g. a "FooBar" integration might register the system identifier name "foobar".
        Use the `GET /auth/external` method the retrieve the registered systems.
      operationId: addExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
      requestBody:
        description: Access token that needs to be added to the remote
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccessTokenRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the token identifier in the response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token_id:
                    type: string
                    format: '^[a-zA-Z0-9\-_]+$'
                    minLength: 1
                    maxLength: 36
                    description: |
                      Unique token identifier, used for later token management through the external system or management ui.
                      If the token identifier has been provided in the request, then then same identifier is returned, otherwise a
                      UUID is generated.
                required:
                  - token_it
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
      x-codegen-request-body-name: body
    head:
      tags:
        - external-token
      summary: Get total number of available tokens for an external system.
      operationId: getExternalAccessTokenCount
      parameters:
        - $ref: '#/components/parameters/system'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - external-token
      summary: List available tokens for an external system.
      operationId: getExternalAccessTokens
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccessTokens'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - external-token
      summary: Remove all access tokens of an external system.
      operationId: deleteExternalAccessTokensBySystem
      parameters:
        - $ref: '#/components/parameters/system'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/auth/external/{system}/{tokenId}':
    get:
      tags:
        - external-token
      summary: Get external access token.
      operationId: getExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccessToken'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - external-token
      summary: Replace an existing access token of an external system.
      description: |
        This methods allows an already provided token of an external system to be updated. The token is identified by
        the system name and the token identification.
      operationId: replaceExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      requestBody:
        description: Access token to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccessTokenRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - external-token
      summary: Remove an external access token.
      description: |
        No error is returned if the `tokenId` doesn't exist. `404` is only returned it the `system` is not found.
      operationId: deleteExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /resources:
    get:
      tags:
        - resources
      summary: Get supported media resource types.
      operationId: getResourceTypes
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceType'
    delete:
      tags:
        - resources
      summary: Delete all resources.
      operationId: deleteAllResources
      parameters:
        - $ref: '#/components/parameters/resource_type_query'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  '/resources/{type}':
    head:
      tags:
        - resources
      summary: Get total number of available resources of a given type.
      operationId: getResourceTypeItemsCount
      parameters:
        - $ref: '#/components/parameters/resource_type'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - resources
      summary: List available media resources of a given type.
      operationId: getResourceTypeItems
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceItems'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - resources
      summary: Upload media resource files.
      operationId: uploadFile
      parameters:
        - $ref: '#/components/parameters/resource_type'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceItems'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - resources
      summary: Delete all resources of a given type.
      operationId: deleteResources
      parameters:
        - $ref: '#/components/parameters/resource_type'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/resources/{type}/{id}':
    get:
      tags:
        - resources
      summary: Download a media resource.
      operationId: getResource
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/resource_id'
      responses:
        '200':
          description: A resource file
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpg:
              schema:
                type: string
                format: binary
            audio/vorbis:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - resources
      summary: Delete a media resource.
      operationId: deleteResource
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/resource_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg:
    get:
      tags:
        - integrations
      summary: Get integration status.
      description: |
        Retrieve an overview of the integration instances and their current connection state.
      operationId: getIntegrationStatus
      parameters:
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntegrationStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Connect or disconnect all integration instances.
      description: |
        Execute a command on all active integration instances:

        - `connect`: requests all enabled integrations to establish a session to the integration driver and start processing
          events.  
          Use `GET /intg` or `GET /intg/instances/{intgId}` to check on the connection status.
        - `disconnect`: disconnects all active integration driver sessions.
      operationId: executeCommandOnAllIntegrations
      parameters:
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - connect
              - disconnect
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg/drivers:
    head:
      tags:
        - integrations
      summary: Get total number of registered integration drivers.
      operationId: getIntegrationDriversCount
      parameters:
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/instantiable'
        - $ref: '#/components/parameters/single_device'
        - $ref: '#/components/parameters/has_instances'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - integrations
      summary: Get all registered integration drivers.
      description: |
        Returns an overview of all registered drivers. To retrieve all driver data use `/intg/drivers/{driverId}`.
      operationId: getIntegrationDrivers
      parameters:
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/instantiable'
        - $ref: '#/components/parameters/single_device'
        - $ref: '#/components/parameters/has_instances'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDrivers'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - integrations
      summary: Register a new integration driver.
      description: |
        A driver provides the connection parameters and optional setup configuration for an integration driver.

        Depending on the driver capabilities it either provides a single access point to the provided entities, or exposes
        multiple devices, each with its own unique set of entities. The former could for example be used to provide GPIO
        access of a Raspberry Pi or gather all supported devices it is able to interact with (e.g. network sensors, light
        switches etc.). The more capable multi-device mode is suited to bridge home automation hubs where multiple
        instances should be supported.

        Once a driver is registered, one or more integration instances must be configured to interact with the driver.  
        For simple integration drivers there's a 1:1 relationship between an instance and driver. For multi-device drivers, 
        each device corresponds to an integration instance.

        It is recommended to manually set a unique and human-readable driver identifier in `driver_id`. Otherwise a UUID
        will be assigned. The `driver_id` is required for all further interactions with the driver, like creating a runtime
        instance to connect to the driver and fetch available entities.
      operationId: registerIntegrationDriver
      requestBody:
        description: Integration driver data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationDriverRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the created integration driver in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/drivers/{driverId}':
    get:
      tags:
        - integrations
      summary: Get an integration driver.
      description: |
        Returns the full data of an integration driver, except the authentication token for external clients.
      operationId: getIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - integrations
      summary: Modify a configured integration driver.
      description: |
        Update one or several properties of an integration driver.  
        See request description on how to update or delete an existing property.
      operationId: updateIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        description: Entity data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationDriverRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the updated integration driver in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - integrations
      summary: Remove an integration driver.
      description: |
        Unloads and deletes an integration driver with all instances and provided entities.

        **Attention: all references to the integration driver will be removed! This includes all driver instances,
        provided entities and their references in profile pages and groups.**
      operationId: deleteIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Start or stop an integration driver
      description: |
        Manually start an integration driver to be ready for the integration instances, or stop a driver to disable all
        integration instances processing.

        If a driver is enabled it will start automatically. Manually starting and stopping a driver is for testing purposes
        and setting up new drivers in the web-configurator.
      operationId: integrationDriverCommand
      parameters:
        - $ref: '#/components/parameters/driver_id'
        - name: cmd
          in: query
          description: Execute a command on the driver.
          required: true
          schema:
            type: string
            enum:
              - START
              - STOP
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - integrations
      summary: Create a new integration instance from driver.
      description: |
        Create an integration driver instance and associate it with the driver.  
        For simple integration drivers there's a 1:1 relationship only between an instance and driver.
        For multi-device drivers, each device corresponds to an integration instance.

        - the `integration_id` is automatically created by the system to make it unique over all integrations.
        - for multi-device drivers the `device_id` must be specified and may not already exist in another instance of the
          same driver.
        - the driver's name is used by default if `name` isn't specified.
        - the instance is active by default if `enabled` isn't specified.
      operationId: createIntegration
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        description: Integration intance data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the created integration instance in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg/instances:
    head:
      tags:
        - integrations
      summary: Get total number of integration instances.
      operationId: getIntegrationsCount
      parameters:
        - $ref: '#/components/parameters/enabled'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - integrations
      summary: Get all integration instances.
      operationId: getIntegrations
      parameters:
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integrations'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}':
    get:
      tags:
        - integrations
      summary: Get an integration instance.
      operationId: getIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - integrations
      summary: Modify a configured integration instance.
      description: |
        Modify one or several properties of an integration instance.  
        See update model description on how to update or delete an existing property.

        The integration driver of an instance cannot be changed and will be ignored if provided in the request.
      operationId: updateIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      requestBody:
        description: Integration instance data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the updated integration instance in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - integrations
      summary: Remove an integration instance.
      description: |
        Unloads and deletes an integration instance.

        **Attention: all references to the integration instance will be removed! This includes configured entities and 
        their references in profile pages and groups.**
      operationId: deleteIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Connect or disconnect an integration instance.
      description: |
        Exectue a command on the integration instance:

        - `connect`: establish a session to the integration driver and start processing events.  
          Use `GET /intg` or `GET /intg/instances/{intgId}` to check on the connection status.
        - `disconnect`: disconnect from the driver and stop processing events.
      operationId: executeIntegrationCommand
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}/entities':
    get:
      tags:
        - integrations
      summary: Get available entities from integration instance.
      description: |
        Retrieve the available entities provided by the integration instance.

        By default only the entities are returned which are not yet configured. Use the `filter` query to include all or
        only the already configured entities.
      operationId: getAvailableEntitiesFromInstance
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - name: reload
          in: query
          description: Force reload available entities from driver.
          required: false
          schema:
            type: boolean
            default: false
        - name: filter
          in: query
          description: Filter available entities.
          required: false
          schema:
            type: string
            default: NEW
            enum:
              - NEW
              - CONFIGURED
              - ALL
        - $ref: '#/components/parameters/entity_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableEntity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}/entities/{entityId}':
    post:
      tags:
        - integrations
      summary: Configure an available entity.
      description: |
        Configure a new Remote Two entity from an available integration entity. Once configured, the entity will no longer
        show up as available entity (unless the `all` filter is set).

        The entity `name`, `icon` and `description` fields may be changed. If not specified in the request the values from
        the available entity are used.
      operationId: configureEntityFromIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Entity data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the configured entity in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
  /entities:
    head:
      tags:
        - entities
      summary: Get total number of configured entities.
      operationId: getEntityCount
      parameters:
        - $ref: '#/components/parameters/entity_type'
        - $ref: '#/components/parameters/intg_id'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - entities
      summary: Get configured entities.
      description: |
        Returns all configured and loaded entities.  
        Entities can be filtered by type and integration.
      operationId: getEntities
      parameters:
        - $ref: '#/components/parameters/entity_type'
        - $ref: '#/components/parameters/intg_id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/entities/{entityId}':
    get:
      tags:
        - entities
      summary: Get a configured entity.
      operationId: getEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - entities
      summary: Modify a configured entity.
      operationId: updateEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Entity data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the configured entity in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - entities
      summary: Remove a configured entity.
      description: |
        Unloads and deletes a configured entity. If the entity is still provided from an integration it can be reused and
        will show up again in the available entity group.

        All references to the configured entity will be removed from profile pages and groups.
      operationId: deleteEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/entities/{entityId}/command':
    put:
      tags:
        - entities
      summary: Execute an entity command.
      operationId: executeEntityCommand
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Command data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCommand'
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
  /activities:
    head:
      tags:
        - activities
      summary: Get total number of activity entities.
      description: |
        The total number of available activities are returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the activities with the `GET` operation and paging parameters.
      operationId: getActivityCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - activities
      summary: Get activity entities overview with paging.
      description: |
        Returns an overview of all defined activities with the given paging parameters. Use the `HEAD` operation to retrieve
        the total number of defined activities.

        The overview information doesn't include all details of an activity. The full activity information is retrievable
        with `/activities/{entityId}`.
      operationId: getActivities
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activities'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - activities
      summary: Create a new activity entity.
      description: |
        Create a new entity of type `activity`. An activity entity is a special internal entity without association to an
        integration driver.

        To create a new activity at least a name must be provided. The `icon`, `description` and `options.entity_ids`
        are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        An activity can be cloned from another activity-, macro- or remote-entity identifier in `clone_from`. 
        All applicable configuration will be copied, except a new activity name must be specified. The `icon` and
        `description` fields can still be specified and will override the copied data. The `options.entity_ids` is
        not allowed when cloning data, additional entities can be added later with the `PUT` update operation.

        The `entity_ids` may be omitted when creating a new activity and specified later when updating the activity.
      operationId: createActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityRequest'
            examples:
              simple:
                value:
                  name:
                    en: My new activity
              activity with icon and description:
                value:
                  name:
                    en: My new activity
                  icon: 'uc:bell'
                  description:
                    en: Testing the activity feature
              clone:
                value:
                  name:
                    en: My cloned activity
                  clone_from: uc.main.activity.watch-tv
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - activities
      summary: Delete all activity entities.
      description: |
        ⚠️ All defined activities will be irrevocably deleted!
      operationId: deleteAllActivities
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/activities/{entityId}':
    get:
      tags:
        - activities
      summary: Get an activity by its entity_id.
      description: "Returns all the information required to manage an existing activity. The included entities are enriched with `name`,\n`icon`, `entity_type`, available commands and if the entity is still available or has been removed since the\nactivity was defined.\n\nThe available entity commands are divided into:\n- `entity_commands`: regular entity commands as defined in the [entity documentation](https://github.com/unfoldedcircle/core-api/tree/main/doc/entities).\n   The identifier refers to the common entity command definitions, which describe all required parameters for \n   defining a command. This includes the mandatory `cmd_id` name and optional parameters.\n\n   \U0001F477 TODO endpoint to retrieve entity command definitions.\n- `simple_commands`: additional, simple dynamic commands of an entity. Like infrared code commands of a\n   remote-entity. A simple command relates directly to the `cmd_id` attribute when executing a command and there's\n   no further mapping as for _entity_commands_.\n"
      operationId: getActivity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update an activity entity.
      operationId: updateActivity
      description: |
        Update one or multiple properties of an activity. The omitted properties are ignored and not deleted. To clear an
        array simply provide an empty array.

        - Sequence- and button press commands are composed of command definitions (see description of `entity_commands` and
          `simple_commands` in GET operation). The `entity_id` and `cmd_id` attributes are always required. The `params`
          object is only required for `entity_commands` having parameters. 
        - The special `"type": "delay"` command is not described in the entity command definitions and can only be used in
          sequences.
        - ⚠️ Only `options.button_mapping.short_press` can be defined at the moment. The `options.button_mapping.long_press`
          is prepared in the data model, but not yet implemented!
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing activity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Delete an activity entity.
      description: |
        ⚠️ The given activity is irrevocably deleted.
      operationId: deleteActivity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /macros:
    head:
      tags:
        - macros
      summary: Get total number of macro entities.
      description: |
        The total number of available macros are returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the macros with the `GET` operation and paging parameters.
      operationId: getMacroCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - macros
      summary: Get macro entities overview with paging.
      description: |
        Returns an overview of all defined macros with the given paging parameters. Use the `HEAD` operation to retrieve
        the total number of defined macros.

        The overview information doesn't include all details of a macro. The full macro information is retrievable
        with `/macros/{entityId}`.
      operationId: getMacros
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macros'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - macros
      summary: Create a new macro entity.
      description: |
        Create a new entity of type `macro`. An macro entity is a special internal entity without association to an
        integration driver.

        To create a new macro at least a name must be provided. The `icon`, `description` and `options.entity_ids`
        are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        The new macro can be cloned from another macro-entity identifier in `clone_from`. All applicable configuration will
        be copied, except a new macro name must be specified. The `icon` and `description` fields can still be specified and
        will override the copied data. The `options.entity_ids` is not allowed when cloning data, additional entities
        can be added later with the `PUT` update operation.

        The `entity_ids` may be omitted when creating a new macro and specified later when updating the macro.
      operationId: createMacro
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroCreate'
            examples:
              simple:
                value:
                  name:
                    en: My new macro
              macro with icon and description:
                value:
                  name:
                    en: My new macro
                  icon: 'uc:bell'
                  description:
                    en: Testing the macro feature
              clone:
                value:
                  name:
                    en: My cloned macro
                  clone_from: uc.main.macro.vacation-mode
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - macros
      summary: Delete all macro entities.
      description: |
        ⚠️ All defined macros will be irrevocably deleted!
      operationId: deleteAllMacros
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/macros/{entityId}':
    get:
      tags:
        - macros
      summary: Get a macro by its entity_id.
      description: |
        Returns all the information required to manage an existing macro. The included entities are enriched with `name`,
        `icon`, `entity_type`, available commands and if the entity is still available or has been removed since the
        macro was defined.
      operationId: getMacro
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - macros
      summary: Update a macro entity.
      operationId: updateMacro
      description: |
        Update one or multiple properties of a macro. The omitted properties are ignored and not deleted. To clear an
        array simply provide an empty array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing macro.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - macros
      summary: Delete a macro entity.
      description: |
        ⚠️ The given macro is irrevocably deleted.
      operationId: deleteMacro
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /ir/codes/manufacturers:
    get:
      tags:
        - infrared
      summary: Search supported infrared device manufacturers.
      description: |
        Device manufacturer search. The returned manufacturer identification will be used for the manufacturer specific IR
        code set search with `/ir/codes/manufacturers/{manufacturerId}`.
      operationId: searchIrDeviceManufacturers
      parameters:
        - name: q
          in: query
          description: Manufacturer name query
          required: true
          schema:
            type: string
            minLength: 2
          example: Lucky Goldstar
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: Manufacturer identification
                      type: string
                    name:
                      description: Manufacturer name
                      type: string
                  required:
                    - id
                    - name
              example:
                - id: lg
                  name: LG
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/manufacturers/{manufacturerId}':
    get:
      tags:
        - infrared
      summary: Search for infrared device code sets by manufacturer to create a remote entity.
      description: |
        Searching without the optional device query will return the generic manufacturer IR code sets.
      operationId: searchInfraredDevice
      parameters:
        - name: manufacturerId
          in: path
          description: Manufacturer identification from search
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: Device or category
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: Code set identifier
                      type: string
                    name:
                      description: Device name
                      type: string
                  required:
                    - id
                    - name
              example:
                - id: '1'
                  name: Generic TV 1
                - id: '2'
                  name: Generic TV 2
                - id: '3'
                  name: Generic TV 3
                - id: '4'
                  name: Generic Projector
                - id: '5'
                  name: Generic BluRay Player
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/manufacturers/{manufacturerId}/{codeSetId}':
    get:
      tags:
        - infrared
      summary: Retrieve IR codeset command information for testing IR commands.
      description: |
        Returns all command identifiers of a given manufacturer code set.
      operationId: getManufacturerCodeSet
      parameters:
        - name: manufacturerId
          in: path
          required: true
          schema:
            type: string
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - POWER_ON
                - POWER_OFF
                - POWER_TOGGLE
                - VOLUME_UP
                - VOLUME_DOWN
                - MUTE
                - CHANNEL_UP
                - CHANNEL_DOWN
                - DPAD_LEFT
                - DPAD_RIGHT
                - DPAD_UP
                - DPAD_DOWN
                - ENTER
                - OSD
                - SETUP
                - NUMPAD_0
                - NUMPAD_1
                - NUMPAD_2
                - NUMPAD_3
                - NUMPAD_4
                - NUMPAD_5
                - NUMPAD_6
                - NUMPAD_7
                - NUMPAD_8
                - NUMPAD_9
                - HDMI_1
                - HDMI_2
                - HDMI_3
                - HDMI_4
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /ir/codes/custom:
    head:
      tags:
        - infrared
      summary: "\U0001F477 Get total number of custom infrared code sets."
      operationId: getCustomIrDeviceCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - infrared
      summary: "\U0001F477 Get all custom infrared code sets."
      description: |
        TODO.
      operationId: getCustomIrDeviceCodes
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: string
                enum:
                  - TODO
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - infrared
      summary: "\U0001F477 Create a new custom infrared code set."
      description: |
        TODO.
      operationId: createCustomIrDevice
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - TODO
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                enum:
                  - TODO
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - infrared
      summary: "\U0001F477 Delete all custom infrared code sets."
      description: |
        ⚠️ All defined custom infrared device codes will be irrevocably deleted!
      operationId: deleteAllCustomIrDeviceCodes
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/custom/{codeSetId}':
    get:
      tags:
        - infrared
      summary: "\U0001F477 Get custom infrared code set."
      description: |
        TODO.
      operationId: getCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: string
                enum:
                  - TODO
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - infrared
      summary: "\U0001F477 Modify a custom infrared code set."
      description: |
        TODO.
      operationId: updateCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - TODO
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                enum:
                  - TODO
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - infrared
      summary: "\U0001F477 Delete custom infrared code set."
      description: |
        ⚠️ All defined custom infrared device codes will be irrevocably deleted!
      operationId: deleteCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /ir/emitters:
    head:
      tags:
        - infrared
      summary: Get total number of infrared emitter devices.
      operationId: getInfraredEmitterCount
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - infrared
      summary: Get all infrared emitter devices for sending IR codes.
      operationId: getInfraredEmitters
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrEmitters'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/ir/emitters/{deviceId}':
    get:
      tags:
        - infrared
      summary: Get an IR emitter device.
      operationId: getIrEmitter
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrEmitter'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/ir/emitters/{deviceId}/send':
    put:
      tags:
        - infrared
      summary: Send IR command from a command set.
      description: |
        Send an IR command from the specified command set on the given emitter and output port.
      operationId: sendCommandOnEmitter
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: IR command
        content:
          application/json:
            schema:
              type: object
              properties:
                codeset_id:
                  description: Infrared codeset identifier.
                  type: string
                cmd_id:
                  description: Command identifier in the codeset.
                  type: string
                port_id:
                  description: Optional output port identifier. The default output will be used if omitted.
                  type: string
              required:
                - codeset_id
                - cmd_id
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /remotes:
    head:
      tags:
        - remotes
      summary: Get total number of infrared remote entities.
      description: |
        The total number of available remotes are returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the remotes with the `GET` operation and paging parameters.
      operationId: getRemoteCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - remotes
      summary: Get infrared remote entities overview with paging.
      description: |
        Returns an overview of all defined remotes with the given paging parameters. Use the `HEAD` operation to retrieve
        the total number of defined remotes.

        The overview information doesn't include all details of a remote. The full remote information is retrievable
        with `/remotes/{entityId}`.
      operationId: getInfraredEntities
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remotes'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - remotes
      summary: Create a new infrared remote entity with a manufacturer IR code set or an empty custom code set.
      description: |
        Create a new entity of type `remote`. An remote entity is a special internal entity without association to an
        integration driver.

        To create a new remote at least a name must be provided. If no manufacturer infrared code set is specified in
        `options.codeset_id`, a new custom code set is automatically created for the user to manually specify or learn the
        codes.  
        The `icon` and `description` properties are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        The new remote can be cloned from another remote-entity identifier in `clone_from`. All applicable configuration
        will be copied, except a new remote name must be specified. The `icon` and `description` fields can still be
        specified and will override the copied data. The `options.codeset_id` is not allowed when cloning data.
      operationId: createRemote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteCreate'
            examples:
              create with code set:
                value:
                  name:
                    en: My new remote
                  options:
                    codeset_id: ir.manufacturer.123
              crate with custom code set:
                value:
                  name:
                    en: My custom remote
              'remote with icon, description and custom code set':
                value:
                  name:
                    en: My custom remote
                  icon: 'uc:movie'
                  description:
                    en: Testing the custom code set feature
              clone:
                value:
                  name:
                    en: My cloned remote
                  clone_from: uc.main.remote.my-other-remote
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remote'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - remotes
      summary: Delete all infrared remote entities.
      description: |
        ⚠️ All defined infrared entities will be irrevocably deleted!
      operationId: deleteAllRemotes
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/remotes/{entityId}':
    get:
      tags:
        - remotes
      summary: Get an infrared remote entity by its entity_id.
      description: |
        Returns all the information required to manage an existing remote.
      operationId: getRemote
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remote'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update an infrared remote entity.
      operationId: updateRemote
      description: |
        Update one or multiple properties of an infrared entity. The omitted properties are ignored and not deleted.
        To clear an array simply provide an empty array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing infrared entity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteInterface'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Delete an infrared remote entity.
      description: |
        The given infrared entity is irrevocably deleted.
      operationId: deleteRemote
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ir':
    get:
      tags:
        - remotes
      summary: "\U0001F477 Get the infrared dataset of the remote-entity."
      description: |
        Returns all the information required to manage the infrared dataset.
      operationId: getRemoteIrDataSet
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrDataSet'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ir/{cmdId}':
    get:
      tags:
        - remotes
      summary: "\U0001F477 Gets an infrared code in the codeset."
      description: |
        Returns the details of a given infrared command.
      operationId: getRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/cmd_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: "\U0001F477 Update an infrared command in the codeset."
      operationId: updateRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/cmd_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                format:
                  type: string
                  enum:
                    - HEX
                    - PRONTO
              required:
                - value
                - format
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: "\U0001F477 Delete a custom ir code or reset a modified manufacturer code in the codeset."
      operationId: deleteOrResetRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/cmd_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /profiles:
    post:
      tags:
        - profiles
      summary: Create a new profile.
      description: |
        The `profile_id` property is optional and auto-generated if not specified. Otherwise it needs to be a unique profile
        identifier.  
        If a `pin` is specified the profile will be protected. A protected profile can only be accessed with the profile specific pin code.
      operationId: createProfile
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
            examples:
              Simple profile:
                value:
                  name: My profile
              Profile with an icon:
                value:
                  name: My profile
                  icon: 'uc:star'
              Profile with a pin:
                value:
                  name: My secure profile
                  icon: 'uc:star'
                  pin: 1234
        required: true
      responses:
        '201':
          description: Successful operation returning the profile identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    put:
      tags:
        - profiles
      summary: Switch active profile.
      operationId: switchProfile
      parameters:
        - name: active_profile_id
          in: query
          description: Active profile identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - profiles
      summary: Get all profiles or the active profile.
      operationId: getProfiles
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profiles'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    delete:
      tags:
        - profiles
      summary: Delete all profiles.
      operationId: deleteAllProfiles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/profiles/{profileId}':
    get:
      tags:
        - profiles
      summary: Get profile.
      operationId: getProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a profile.
      description: |
        Update one or multiple properties of a profile. A missing property will not update its current value.  
        - `profile_id` is mandatory and can't be changed.
        - an empty `icon` value removes an existing icon identifier.
        - an empty `pin` value removes an existing pin code.
        - a missing `pages` property will not change the page order.
        - ⚠️ an empty `pages` array removes all pages and groups in the profile!
        - ⚠️ missing page identifiers in the `pages` array will remove the page configuration!
      operationId: updateProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Properties to update in the existing profile.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete profile.
      operationId: deleteProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/pages':
    post:
      tags:
        - profiles
      summary: Create a new page in the profile.
      operationId: createPage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageCreate'
            examples:
              Simple page:
                value:
                  name: My page
              New page at the first position:
                value:
                  name: Favorites
                  pos: 1
              New page with items:
                value:
                  name: My other page
                  items:
                    - entity_id: switch1
                    - entity_id: mediaplayer1
                    - entity_id: blind1
                    - group_id: 'def:g2'
        required: true
      responses:
        '201':
          description: Successful operation returning the page identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    get:
      tags:
        - profiles
      summary: Get all pages of the profile.
      operationId: getPagesInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete all pages of the profile.
      operationId: deleteAllPagesInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/pages/{pageId}':
    get:
      tags:
        - profiles
      summary: Get a page of the profile
      operationId: getPage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a page.
      operationId: updatePage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Properties to update in the existing page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageUpdate'
            examples:
              Rename page:
                value:
                  name: A better name
              Rearrange items:
                value:
                  items:
                    - entity_id: mediaplayer1
                    - group_id: 'def:g2'
                    - entity_id: blind1
                    - entity_id: switch1
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete a page of the profile.
      operationId: deletePage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/groups':
    post:
      tags:
        - profiles
      summary: Create a new group in the profile.
      operationId: createGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '201':
          description: Successful operation returning the page identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    get:
      tags:
        - profiles
      summary: Get all groups of the profile.
      operationId: getGroupsInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete all groups of the profile.
      operationId: deleteAllGroupsInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/groups/{groupId}':
    get:
      tags:
        - profiles
      summary: Get a group in the profile.
      operationId: getGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a group.
      operationId: updateGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Properties to update in the existing group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete a group of the profile.
      operationId: deleteGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /cfg:
    get:
      tags:
        - cfg
      summary: Get all configuration settings.
      description: |
        Retrieve all system configuration settings at once. Updating a configuration setting must be performed with the
        corresponding endpoint.
      operationId: getAllSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgAll'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    delete:
      tags:
        - cfg
      summary: Reset all settings to default values.
      description: |
        This resets all system configuration settings to factory defaults. Integration & profile settings are not affected.
      operationId: resetAllSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgAll'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/button:
    get:
      tags:
        - cfg
      summary: Get button settings.
      description: |
        Button backlight configuration.
      operationId: getButtonSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgButtons'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify button settings.
      description: |
        Change one or multiple button backlight settings.
      operationId: updateButtonSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgButtons'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgButtons'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device:
    get:
      tags:
        - cfg
      summary: Get remote device settings.
      description: |
        The remote device settings contain the custom name of the remote.
      operationId: getRemoteDeviceSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgRemoteDevice'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify remote device settings.
      description: |
        Change one or multiple remote device settings.
      operationId: updateRemoteDeviceSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgRemoteDevice'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgRemoteDevice'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device/button_layout:
    get:
      tags:
        - cfg
      summary: Get the button layouts of the device.
      description: |
        Meta-information about the button groups and button layouts.
      operationId: getRemoteDeviceButtonLayoutSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceButtonLayout'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device/icon_mapping:
    get:
      tags:
        - cfg
      summary: Get the native icon mapping of the device.
      description: |
        Meta-information about the native icon mappings. These are the icon identifiers prefixed with `uc:`, e.g. `uc:cool`.
        The remaining label is mapped to a unicode number in the icon font. For `uc:cool` the mapping will be: (`cool`, `\uE91E`)

        Note: the example response omits the leading backslash to avoid character substitution in the browser!
      operationId: getRemoteDeviceIconMapping
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Label -> Unicode map
                type: object
                additionalProperties:
                  type: string
              example:
                cool: uE91E
                heat: uE91F
                home: uE900
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/display:
    get:
      tags:
        - cfg
      summary: Get display settings.
      description: |
        Display brightness and auto brightness configuration.
      operationId: getDisplaySettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgDisplay'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify display settings.
      description: |
        Change one or multiple display settings.
      operationId: updateDisplaySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgDisplay'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgDisplay'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/entity/commands:
    get:
      tags:
        - cfg
      summary: Get entity command definitions.
      description: |
        Meta-information about the entity commands.
      operationId: getEntityCommandMetadata
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityCommandMetadata'
              example:
                - id: button.press
                  cmd_id: press
                  name:
                    en: Press
                    de: Betätigen
                - id: switch.on
                  cmd_id: 'on'
                  name:
                    en: 'On'
                    de: Ein
                - id: switch.off
                  cmd_id: 'off'
                  name:
                    en: 'Off'
                    de: Aus
                - id: switch.toggle
                  cmd_id: toggle
                  name:
                    en: Toggle
                    de: Umschalten
                - id: light.on
                  cmd_id: 'on'
                  name:
                    en: Turn on
                    de: Einschalten
                - id: light.off
                  cmd_id: 'off'
                  name:
                    en: Turn off
                    de: Ausschalten
                - id: light.toggle
                  cmd_id: toggle
                  name:
                    en: Toggle state
                    de: Umschalten
                - id: light.dim
                  cmd_id: 'on'
                  name:
                    en: Set brightness
                    de: Setze Helligkeit
                  params:
                    - name:
                        en: brightness
                        de: Helligkeit
                      param: brightness
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
                - id: light.color_temperature
                  cmd_id: 'on'
                  name:
                    en: Set color temperature
                    de: Setze Farbtemperatur
                  params:
                    - name:
                        en: Color temperature
                        de: Farbtemperatur
                      param: color_temperature
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
                - id: light.color
                  cmd_id: 'on'
                  name:
                    en: Set color
                    de: Setze Farbe
                  params:
                    - name:
                        en: Hue
                        de: Farbton
                      param: hue
                      type: int
                      min: 0
                      max: 360
                      step: 1
                      unit: °
                    - name:
                        en: saturation
                        de: Farbsättigung
                      param: saturation
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/haptic:
    get:
      tags:
        - cfg
      summary: Get haptic settings.
      description: |
        Haptic configuration.
      operationId: getHapticSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgHaptic'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify haptic settings.
      description: |
        Change one or multiple haptic settings.
      operationId: updateHapticSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgHaptic'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgHaptic'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization:
    get:
      tags:
        - cfg
      summary: Get localization settings.
      description: |
        Retrieve the language and region configuration.
      operationId: getLocalizationSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgLocalization'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify localization settings.
      description: |
        Change one or multiple localization settings.
      operationId: updateLocalizationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgLocalization'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgLocalization'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/tz_names:
    get:
      tags:
        - cfg
      summary: Get all available time zone names.
      operationId: getTimezoneNames
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/countries:
    get:
      tags:
        - cfg
      summary: Get all available countries.
      operationId: getLocalizationCountries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      $ref: '#/components/schemas/CountryCode'
                    name_en:
                      description: |
                        Country name in english. Native country names will be provided in additional `name_<language_code>`
                        properties.
                      type: string
                  additionalProperties: true
                  required:
                    - code
                    - name_en
              example:
                - code: CH
                  name_de: Schweiz
                  name_en: Switzerland
                  name_fr: Suisse
                  name_it: Svizzera
                - code: DE
                  name_de: Deutschland
                  name_en: Germany
                - code: DK
                  name_dk: Danmark
                  name_en: Denmark
                - code: HU
                  name_en: Hungary
                  name_hu: Magyarország
                - code: NL
                  name_en: Netherlands
                  name_nl: Nederland
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/translations:
    get:
      tags:
        - cfg
      summary: Get all available translations.
      description: |
        The available translations are provided from the UI application.  
        Future UI versions might provide new or updated translations.
      operationId: getTranslations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  translations:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          $ref: '#/components/schemas/LanguageCode'
                        name:
                          type: string
                      required:
                        - code
                        - name
                required:
                  - version
                  - translations
              example:
                version: default
                translations:
                  - code: da_DK
                    name: Dansk
                  - code: de_DE
                    name: Deutsch
                  - code: de_CH
                    name: Schwiizertüütsch
                  - code: fr_CH
                    name: Français (Suisse)
                  - code: it_CH
                    name: Italiano (Svizzera)
                  - code: hu_HU
                    name: Magyar
                  - code: nl_NL
                    name: Nederlands
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/network:
    get:
      tags:
        - cfg
      summary: Get network settings.
      description: |
        Language and region configuration.
      operationId: getNetworkSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgNetwork'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify network settings.
      description: |
        Change one or multiple network settings.
      operationId: updateNetworkSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgNetwork'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgNetwork'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/power_saving:
    get:
      tags:
        - cfg
      summary: Get power settings.
      description: |
        Sleep timeout and wakeup sensitivity configuration.
      operationId: getPowerSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgPowerSaving'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify power settings.
      description: |
        Change one or multiple power saving settings.
      operationId: updatePowerSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgPowerSaving'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgPowerSaving'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/software_update:
    get:
      tags:
        - cfg
      summary: Get software update settings.
      description: |
        Software update configuration.
      operationId: getSoftwareUpdateSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSoftwareUpdate'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify software update settings.
      description: |
        Change one or multiple software update settings.
      operationId: updateSoftwareUpdateSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgSoftwareUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSoftwareUpdate'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/sound:
    get:
      tags:
        - cfg
      summary: Get sound settings.
      description: |
        Sound configuration.
      operationId: getSoundSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSound'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify sound settings.
      description: |
        Change one or multiple sound settings.
      operationId: updateSoundSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgSound'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSound'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/voice_control:
    get:
      tags:
        - cfg
      summary: Get voice control settings.
      description: |
        Voice control configuration.
      operationId: getVoiceControlSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgVoiceControl'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify voice control settings.
      description: |
        Change one or multiple voice control settings.
      operationId: updateVoiceControlSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgVoiceControl'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgVoiceControl'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/voice_control/voice_assistants:
    get:
      tags:
        - cfg
      summary: Get available voice assistants.
      operationId: getVoiceAssistants
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /docks:
    get:
      tags:
        - dock
      summary: List configured docks and their connection state.
      description: |
        Returns all dock configuration enriched with current connection information.
      operationId: getDocks
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfigurations'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: Create a new dock configuration.
      description: |
        Create and persist a new dock configuration. To establish a session to the dock, a connect operation must be called
        afterwards.  
        - Error `422` is returned if the given `service_name` already exists.
        - If `custom_ws_url` is not specified, the dock address is resolved with a mDNS lookup based on `service_name`.   
        - The `active` flag specifies if the dock will participate to connection requests.
        - Non-active docks will not auto-connect and must be enabled first to be used.
      operationId: createDock
      requestBody:
        description: Client information requesting access
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockConfigurationRequest'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - dock
      summary: Delete all dock configurations.
      description: |
        This clears all dock configuration: active dock sessions are disconnected and the persisted dock configuration will
        be removed. If `/docks/connect` is called afterwards, there are no more dock connections to be established.
      operationId: deleteAllDocks
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /docks/connect:
    post:
      tags:
        - dock
      summary: Start all active dock connections
      description: |
        Requests all active docks to establish a session to the dock.  
        Use `GET /docks` or `GET /docks/{dockId}` to check on the connection status.
      operationId: connectAllDocks
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /docks/disconnect:
    post:
      tags:
        - dock
      summary: Stop all dock connections
      description: |
        Disconnects all active dock sessions.
      operationId: disconnectAllDocks
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/{dockId}':
    get:
      tags:
        - dock
      summary: Get dock configuration.
      operationId: getDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - dock
      summary: Change dock configuration like auto-connect or access token.
      description: |
        Update one or more dock fields
      operationId: updateDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: 'Fields to update, omit the ones without change.'
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 64
                  description: User assignable friendly name to use instead of service_name
                custom_ws_url:
                  type: string
                  minLength: 6
                  maxLength: 256
                  description: Dock WebSocket URL to override auto-discovery from service_name
                token:
                  type: string
                  description: |
                    Access token to connect to the dock.
                    This does not change the token in the dock! Use the `command` resource to change the token.
                active:
                  type: boolean
                  description: Auto connect to dock when network is available
                description:
                  type: string
                  description: Optional description
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - dock
      summary: Delete dock configuration.
      operationId: deleteDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/{dockId}/command':
    post:
      tags:
        - dock
      summary: Send a dock command.
      operationId: dockCommand
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: Dock command
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  type: string
                  enum:
                    - LED_BRIGHTNESS_START
                    - LED_BRIGHTNESS_STOP
                    - REMOTE_LOW_BATTERY
                    - REMOTE_CHARGED
                    - SET_FRIENDLY_NAME
                    - REBOOT
                    - RESET
                value:
                  description: Required for brightness start and friendly name
                  type: string
                token:
                  description: Required for reset
                  type: string
              required:
                - command
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/{dockId}/connect':
    post:
      tags:
        - dock
      summary: Start dock connection
      description: |
        Establish a session to the dock.  
        Use `GET /docks` or `GET /docks/{dockId}` to check on the connection status.
      operationId: connectDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/{dockId}/disconnect':
    post:
      tags:
        - dock
      summary: Stop dock connection
      description: |
        Disconnects the dock session.
      operationId: disconnectDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/{dockId}/ir/send':
    get:
      tags:
        - dock
      summary: Test IR command.
      description: |
        Test function for sending IR commands. The IR code can either be in Pronto format or Hex.
        If no output is specified, the code will only be emitted from the dock.
      operationId: sendIrTest
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: int1
          in: query
          description: Main internal ir blaster
          schema:
            type: boolean
        - name: int2
          in: query
          description: 'Second internal ir blaster. V2 dock: top'
          schema:
            type: boolean
        - name: ext1
          in: query
          description: External IR blaster 1
          schema:
            type: boolean
        - name: ext2
          in: query
          description: External IR blaster 2
          schema:
            type: boolean
        - name: pronto
          in: query
          description: 'Pronto IR code, values separated by comma'
          required: false
          schema:
            type: string
            pattern: '^[a-fA-F0-9]{4}(,[a-fA-F0-9]{4}){3,}$'
        - name: hex
          in: query
          description: Hex IR code
          required: false
          schema:
            type: string
            pattern: '^[\d]{1,3};0x[a-fA-F0-9]{1,16};[\d]{1,2};[\d]{1,2}$'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: Send IR command.
      description: |
        Send an IR command, either in Pronto or [IRremoteESP8266 Hex](https://github.com/crankyoldgit/IRremoteESP8266) format.

        Hex format: `<protocol>,<hex-ir-code>,<bits>,<repeat-count>`
        - protocol: numeric value from supported and enabled protocols. See: [decode_type_t](https://github.com/crankyoldgit/IRremoteESP8266/blob/v2.8.0/src/IRremoteESP8266.h#L866)
        - hex-ir-code: HEX value prefixed with `0x`
        - bits: number of bits in hex value
      operationId: sendIr
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: IR command
        content:
          application/json:
            schema:
              type: object
              properties:
                int1:
                  description: Main internal ir blaster
                  type: boolean
                int2:
                  description: 'Second internal ir blaster. V2 dock: top'
                  type: boolean
                ext1:
                  description: External IR blaster 1
                  type: boolean
                ext2:
                  description: External IR blaster 2
                  type: boolean
                pronto:
                  description: 'Pronto IR code, values separated by space or comma'
                  type: string
                  pattern: '^[a-fA-F0-9]{4}((,| )[a-fA-F0-9]{4}){3,}$'
                hex:
                  description: Hex IR code
                  type: string
                  pattern: '^[\d]{1,3};0x[a-fA-F0-9]{1,16};[\d]{1,2};[\d]{1,2}$'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/{dockId}/ir/learn':
    get:
      tags:
        - dock
      summary: Get IR learning status and results.
      description: |
        The current status and if the dock is in IR learning mode, any learned codes will be returned.
      operationId: irLearningStatus
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: IR learning status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: Start IR learning.
      description: |
        Puts the dock into IR learning mode. Use the GET status request to check on learned codes or DELETE to stop learning.
      operationId: startIrLearning
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: timeout
          in: query
          description: 'Timeout in seconds to switch off learning mode. Default: 30'
          schema:
            type: integer
            minimum: 1
            maximum: 255
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - dock
      summary: Stop IR learning and clear results.
      description: |
        The current status and any learned codes will be returned. After this call any learned codes are no longer accessible
        through the GET status call.
      operationId: stopIrLearning
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: IR learning status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /system:
    get:
      tags:
        - system
      summary: Get system information.
      description: 'Get hardware information about the device like serial number, model number and hardware revision.'
      operationId: getSystemInfo
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - system
      summary: Perform a system command like reboot or power-off.
      description: |
        The following system commands can be executed:

        - `STANDBY`: Put the device into standby mode.
        - `REBOOT`: Reboot the device.
        - `POWER_OFF`: Switch off the device
        - `RESTART`: Restart the application.
      operationId: systemCommand
      parameters:
        - name: cmd
          in: query
          description: System command
          required: true
          schema:
            type: string
            enum:
              - STANDBY
              - REBOOT
              - POWER_OFF
              - RESTART
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/factory_reset:
    get:
      tags:
        - system
      summary: Get factory reset token.
      description: |
        Get a factory reset token to perform a complete factory reset of the remote.

        The token will be valid for 60 seconds. Afterwards, a new token must be requested.  
        Whenever a new token is requested, any old tokens will be invalidated.
      operationId: getFactoryResetToken
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - system
      summary: Perform a factory reset.
      description: |
        A factory reset removes all configuration data and puts the device into a clean state.  

        ⚠️ **Warning:** All user data will be erased and won't be recoverable!

        A reset token must be requested first and provided to perform a factory reset.
      operationId: performFactoryReset
      parameters:
        - name: token
          in: query
          description: Reset token
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /test/mdns/discover:
    get:
      tags:
        - mdns
      summary: Browse and resolve for service instances.
      operationId: discoverAllServices
      parameters:
        - name: timeout_browse
          in: query
          description: Service browse timeout in seconds
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 30
        - name: timeout_browse1
          in: query
          description: Single service browse timeout in seconds
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 15
        - name: timeout_resolve
          in: query
          description: Resolve timeout in seconds
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 10
        - name: timeout_address
          in: query
          description: Address resolve timeout in seconds
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstances'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  '/test/mdns/discover/{query}':
    get:
      tags:
        - mdns
      summary: Resolve service instances of a given type.
      operationId: discoverService
      parameters:
        - in: path
          name: query
          description: 'Service type, e.g. `_uc-remote._tcp`'
          required: true
          schema:
            type: string
        - name: timeout_browse
          in: query
          description: Service browse timeout in seconds
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 30
        - name: timeout_browse1
          in: query
          description: Single service browse timeout in seconds
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 15
        - name: timeout_resolve
          in: query
          description: Resolve timeout in seconds
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 10
        - name: timeout_address
          in: query
          description: Address resolve timeout in seconds
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstances'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  /test/mdns/publish:
    post:
      tags:
        - mdns
      summary: Publish a service.
      operationId: publishService
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  reg_type:
                    type: string
                  port:
                    type: integer
                    minimum: 1
                    maximum: 65535
                  txt:
                    type: object
                    additionalProperties:
                      type: string
                required:
                  - reg_type
                  - port
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  '/test/mdns/publish/{name}':
    delete:
      tags:
        - mdns
      summary: Unpublish a previously published service.
      operationId: unpublishService
      parameters:
        - in: path
          name: name
          description: Service name
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
components:
  parameters:
    api_key_id:
      name: apiKeyId
      in: path
      description: API key identification
      required: true
      schema:
        $ref: '#/components/schemas/ApiKeyId'
    cmd_id:
      name: cmdId
      in: path
      description: Command identification.
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    dock_id:
      name: dockId
      in: path
      description: Dock identification
      required: true
      schema:
        $ref: '#/components/schemas/DockId'
    driver_id:
      name: driverId
      in: path
      description: Integration driver identification
      required: true
      schema:
        $ref: '#/components/schemas/DriverId'
    entity_id:
      name: entityId
      in: path
      description: Entity identification.
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
    group_id:
      name: groupId
      in: path
      description: Group identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    integration_id:
      name: intgId
      in: path
      description: Integration identification
      required: true
      schema:
        $ref: '#/components/schemas/IntegrationId'
    page_id:
      name: pageId
      in: path
      description: Page identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    profile_id:
      name: profileId
      in: path
      description: Profile identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    resource_id:
      name: id
      in: path
      description: Resource identifier
      required: true
      schema:
        type: string
    resource_type:
      name: type
      in: path
      description: Resource type
      required: true
      schema:
        $ref: '#/components/schemas/ResourceType'
    system:
      name: system
      in: path
      description: Identification of the external system. E.g. _homeassistant_.
      required: true
      schema:
        $ref: '#/components/schemas/ExternalSystemId'
    token_id:
      name: tokenId
      in: path
      description: Access token identification
      required: true
      schema:
        $ref: '#/components/schemas/AccessTokenId'
    ui_id:
      name: uiId
      in: path
      description: User interface identification.
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
    active:
      name: active
      in: query
      description: Filter by active flag
      required: false
      schema:
        type: boolean
    enabled:
      name: enabled
      in: query
      description: Filter by enabled flag.
      required: false
      schema:
        type: boolean
    entity_type:
      name: entity_type
      in: query
      description: Filter by entity type.
      required: false
      schema:
        $ref: '#/components/schemas/EntityType'
    has_instances:
      name: has_instances
      in: query
      description: |
        Filter if a driver has integration instances or not:
        - true = only consider drivers which have at least one integration instance,
        - false = drivers without instances
        - NONE = any.
      required: false
      schema:
        type: boolean
    instantiable:
      name: instantiable
      in: query
      description: |
        Filter if a driver is instantiable or not:
        - true = only consider drivers which allow new integration instances to be created from. Either single-device drivers
          without an instance, or multi-device drivers.
        - false = only drivers which allow no more instances
        - NONE = any.
      required: false
      schema:
        type: boolean
    intg_id:
      name: intg_id
      in: query
      description: Filter by integration.
      required: false
      schema:
        $ref: '#/components/schemas/IntegrationId'
    resource_type_query:
      name: type
      in: query
      description: Resource type.
      required: false
      schema:
        $ref: '#/components/schemas/ResourceType'
    page:
      name: page
      in: query
      description: Current page number. 1-based.
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    limit:
      name: limit
      in: query
      description: Limits the number of returned items.
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 10
        maximum: 100
        multipleOf: 10
    profile_pin:
      name: pin
      in: query
      description: Optional profile pin to access a protected profile with a non-admin account.
      required: false
      schema:
        $ref: '#/components/schemas/ProfilePin'
    single_device:
      name: single_device
      in: query
      description: |
        true = only consider single-device drivers, false = only multi-device drivers, NONE = all.
      required: false
      schema:
        type: boolean
  schemas:
    AccessTokenId:
      type: string
      format: '^[a-zA-Z0-9-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique token identifier. Usually a UUID.
    Activities:
      type: array
      items:
        $ref: '#/components/schemas/ActivityOverview'
    Activity:
      description: |
        The activity entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - activity
            features:
              description: |
                Supported features of the activity. If the activity has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: activity was created by Remote Two and can be edited.
                    - `false`: activity was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                included_entities:
                  $ref: '#/components/schemas/IncludedEntities'
                sequences:
                  $ref: '#/components/schemas/ActivitySequences'
                button_mapping:
                  $ref: '#/components/schemas/DeviceButtonMappings'
                user_interface:
                  $ref: '#/components/schemas/ActivityUserInterface'
          required:
            - options
    ActivityId:
      type: string
      format: '^[a-zA-Z0-9-_]+$'
      minLength: 1
      maxLength: 36
      description: Activity identifier
    ActivityOverview:
      description: |
        The activity entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - activity
            features:
              description: |
                Supported features of the activity. If the activity has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: activity was created by Remote Two and can be edited.
                    - `false`: activity was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                sequences:
                  $ref: '#/components/schemas/ActivitySequences'
                button_mapping:
                  $ref: '#/components/schemas/DeviceButtonMappings'
                user_interface:
                  $ref: '#/components/schemas/ActivityUserInterface'
    ActivityRequest:
      description: |
        Dedicated request object to create a new activity.  
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                options:
                  type: object
                  properties:
                    entity_ids:
                      type: array
                      items:
                        $ref: '#/components/schemas/EntityId'
                  required:
                    - entity_ids
      required:
        - name
    ActivitySequences:
      type: object
      properties:
        'on':
          $ref: '#/components/schemas/CommandSequence'
        'off':
          $ref: '#/components/schemas/CommandSequence'
    ActivityUpdate:
      description: |
        Dedicated request object to update an existing activity.  
        All root properties are optional and only the provided objects are updated in the activity. Omitted objects are
        ignored and not deleted from the activity.

        The `entity_ids` object must be managed by the client and is persisted when updating an activity.

        Notes:
        - Entities can be included in `entity_ids` without being used in `sequences`.  
          This allows to edit the activity in multiple sessions without having to reselect the desired entities.
        - Every referenced entity in `sequences` must be included in `entity_ids`, otherwise the activity cannot be saved.
        - If the client removes a configured entity from the system which is included in an activity, it must make sure to
          also remove all references in the activity. See `available` property in the included entities object when retrieving
          a macro.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            entity_ids:
              type: array
              items:
                $ref: '#/components/schemas/EntityId'
            sequences:
              $ref: '#/components/schemas/ActivitySequences'
            button_mapping:
              $ref: '#/components/schemas/DeviceButtonMappings'
            user_interface:
              $ref: '#/components/schemas/ActivityUserInterface'
    ActivityUserInterface:
      type: object
      properties:
        pages:
          type: array
          items:
            type: object
            properties:
              name:
                description: Optional page name
                type: string
              items:
                type: array
                items:
                  $ref: '#/components/schemas/UserInterfaceItem'
            required:
              - items
    ApiKey:
      type: object
      properties:
        key_id:
          $ref: '#/components/schemas/ApiKeyId'
        name:
          $ref: '#/components/schemas/ApiKeyName'
        prefix:
          description: Prefix of the API key for identification purposes.
          type: string
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeName'
        description:
          $ref: '#/components/schemas/Description'
        creation_date:
          type: string
          format: date-time
    ApiKeyId:
      type: string
      format: '^[a-zA-Z0-9-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique key identifier. Usually a UUID.
    ApiKeyName:
      type: string
      minLength: 1
      maxLength: 50
      description: Friendly API key name to show in the app
    ApiKeyRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        scopes:
          type: array
          items:
            type: string
          description: Requested access scopes for the API key.
        active:
          type: boolean
          default: false
          description: |
            Only activated keys are valid for API access.  
            This might be overridden if the requestor doesn't have sufficient rights. In this case the key will not be active
            until a user with appropriate rights will set it active. The assigned `active` state will be returned in the
            response.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - name
        - scopes
    ApiKeyResponse:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        api_key:
          type: string
          description: API key.
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeName'
      required:
        - name
        - api_key
        - active
        - scopes
    ApiKeys:
      type: array
      items:
        $ref: '#/components/schemas/ApiKey'
    ApiKeyUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        description:
          $ref: '#/components/schemas/Description'
    AvailableEntity:
      description: Provided entity from an integration which can be configured to be used in the remote.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/AvailableEntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        device_id:
          $ref: '#/components/schemas/DeviceId'
        device_class:
          description: |
            Optional device type. This can be used by the UI to represent the entity with a different
            icon, behaviour etc. See entity documentation for available device classes.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        features:
          description: |
            Supported features of the entity. See entity documentation for available features.
          type: array
          items:
            type: string
        options:
          description: |
            Feature options. See entity documentation for available options.
          type: object
        area:
          description: Optional area if supported by the integration. E.g. `Living room`.
          type: string
      required:
        - entity_id
        - entity_type
        - integration_id
        - name
        - features
    AvailableEntityId:
      type: string
      format: '^[a-zA-Z0-9-_\.]+$'
      minLength: 1
      maxLength: 36
      description: |
        Entity identifier used in an integration driver (= available entities).  
    CommandSequence:
      description: Sequence of commands to execute.
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/CommandSequenceEntity'
          - $ref: '#/components/schemas/CommandSequenceDelay'
        discriminator:
          propertyName: type
          mapping:
            command: '#/components/schemas/CommandSequenceEntity'
            delay: '#/components/schemas/CommandSequenceDelay'
    CommandSequenceEntity:
      description: Entity command step in a command sequence.
      type: object
      properties:
        type:
          type: string
        command:
          $ref: '#/components/schemas/EntityCommand'
      required:
        - type
        - command
      example:
        type: command
        command:
          entity_id: hass.main.light.living-room
          cmd_id: 'on'
          params:
            brightness: 75
    CommandSequenceDelay:
      description: Delay step in a command sequence.
      type: object
      properties:
        type:
          type: string
        delay:
          description: Delay in milliseconds.
          type: integer
          minimum: 1
      required:
        - type
        - delay
      example:
        type: delay
        delay: 100
    DeviceButtonGroup:
      description: Button group type.
      type: string
      enum:
        - keypad
    DeviceButtonLayout:
      description: 'Button group definitions with layout placement, size, icon and language specific names.'
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DeviceButtonGroup'
        grid:
          description: Grid layout size.
          type: object
          properties:
            width:
              type: integer
              minimum: 1
            height:
              type: integer
              minimum: 1
          required:
            - width
            - height
        buttons:
          type: array
          items:
            type: object
            properties:
              button:
                description: Unique button identifier over all button groups.
                type: string
              icon:
                $ref: '#/components/schemas/IconIdentifier'
              name:
                $ref: '#/components/schemas/LanguageText'
              location:
                $ref: '#/components/schemas/GridLocation'
              size:
                $ref: '#/components/schemas/GridItemSize'
            required:
              - button
              - icon
              - name
              - location
      required:
        - type
        - grid
        - buttons
    DeviceButtonMapping:
      type: object
      properties:
        button:
          description: Button identifier.
          type: string
        short_press:
          $ref: '#/components/schemas/EntityCommand'
        long_press:
          $ref: '#/components/schemas/EntityCommand'
      required:
        - button
    DeviceButtonMappings:
      description: |
        Physical button mapping to entity commands. The `entity_id` in the EntityCommand object is a required
        property for an activity and ignored for a remote-entity.
      type: array
      items:
        $ref: '#/components/schemas/DeviceButtonMapping'
    DeviceState:
      type: string
      enum:
        - UNKNOWN
        - CONNECTING
        - CONNECTED
        - DISCONNECTED
        - ERROR
    ResourceType:
      type: string
      format: '^[a-zA-Z]+$'
      minLength: 1
      maxLength: 32
    ResourceItems:
      type: array
      items:
        $ref: '#/components/schemas/ResourceItem'
    ResourceItem:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          type: string
          description: Resource identifier (normalized filename)
        size:
          type: integer
          format: int32
          description: Size in bytes
    ExternalSystems:
      type: array
      items:
        $ref: '#/components/schemas/ExternalSystem'
    ExternalSystem:
      type: object
      properties:
        system:
          $ref: '#/components/schemas/ExternalSystemId'
        name:
          $ref: '#/components/schemas/ExternalSystemName'
    ExternalSystemId:
      type: string
      format: '^[a-zA-Z0-9-_]+$'
      minLength: 1
      maxLength: 50
      description: Unique external system identifier registered by an R2 integration to interact with the API.
    ExternalSystemName:
      type: string
      minLength: 1
      maxLength: 50
      description: |
        Friendly name of the external system to display to the user within the app. This name must be unique for an external
        system and should be as short and concise as possible.
        Use the description field for more information.
    ExternalAccessTokens:
      type: array
      items:
        type: object
        properties:
          system:
            $ref: '#/components/schemas/ExternalSystemName'
          token_id:
            type: string
          name:
            type: string
          description:
            type: string
            maxLength: 2048
            description: Optional description of the external access token.
          url:
            type: string
            maxLength: 2048
            description: Optional URL of the external system.
          data:
            type: string
            maxLength: 2048
            description: Optional data from the external system for the R2 integration.
          creation_date:
            type: string
            format: date-time
    ExternalAccessToken:
      type: object
      properties:
        system:
          $ref: '#/components/schemas/ExternalSystemName'
        token_id:
          type: string
        name:
          type: string
        token:
          type: string
          minLength: 1
          maxLength: 2048
          description: |
            The token to access the external system with the corresponding R2 integration.
            This could be a UUID, a JWT or any other representation required for the integration to authenticate on the
            system.
        description:
          type: string
          maxLength: 2048
          description: Optional description of the external access token.
        url:
          type: string
          maxLength: 2048
          description: Optional URL of the external system.
        data:
          type: string
          maxLength: 2048
          description: Optional data from the external system for the R2 integration.
        creation_date:
          type: string
          format: date-time
    ExternalAccessTokenRequest:
      type: object
      properties:
        token_id:
          type: string
          format: '^[a-zA-Z0-9\-_]+$'
          minLength: 1
          maxLength: 36
          description: |
            Unique token identifier, used for later token management through the external system or management ui.
            This identifier can be provided by the external system. If omitted, an UUID is generated and returned in the
            ExternalAccessToken response.
        name:
          $ref: '#/components/schemas/ExternalSystemName'
        token:
          type: string
          minLength: 1
          maxLength: 2048
          description: |
            The token to access the external system with the corresponding R2 integration.
            This could be a UUID, a JWT or any other representation required for the integration to authenticate on the
            system.
        description:
          type: string
          maxLength: 2048
          description: Optional description of the external access token.
        url:
          type: string
          maxLength: 2048
          description: Optional URL of the external system.
        data:
          type: string
          maxLength: 2048
          description: Optional data from the external system for the R2 integration.
      required:
        - name
        - token
      example:
        token_id: 1-2-3
        name: My smart home
        token: secret-sauce-42!
        description: Any other informative message about the external system
        url: 'ws://smart.home'
        data: 'optional: true, foo: bar, free: text'
    Description:
      type: string
      maxLength: 255
      description: Optional description
    DeviceId:
      type: string
      format: '^[a-zA-Z0-9-_]+$'
      minLength: 1
      maxLength: 36
      description: Device identifier for multi-device integrations only.
    DriverId:
      type: string
      format: '^[a-zA-Z0-9-_]+$'
      minLength: 1
      maxLength: 36
      description: 'Unique integration driver identifier, e.g. `homeassistant`, `homey`, etc.'
    FriendlyName:
      type: string
      maxLength: 64
    IconIdentifier:
      type: string
      format: '^[a-zA-Z0-9-_\.:]+$'
      maxLength: 255
      description: |
        Optional icon identifier. If specified the icon will be set. An empty identifier, while updating the object,
        removes the existing icon.
    ImageIdentifier:
      type: string
      format: '^[a-zA-Z0-9-_\.:]+$'
      maxLength: 255
      description: |
        Optional image identifier. If specified the image will be set. An empty identifier, while updating the object,
        removes the existing image.
    IrCodeSetType:
      description: 'Type of codeset, either a manufacturer codeset or a custom codeset.'
      type: string
      enum:
        - manufacturer
        - custom
    IrEmitter:
      type: object
      properties:
        device_id:
          description: IR emitter device identifier.
          type: string
        name:
          description: Friendly name of the IR emitter device.
          type: string
        active:
          description: Emitter device is active or currently not available.
          type: boolean
        ports:
          type: array
          items:
            type: object
            properties:
              port_id:
                description: IR emitter output port identifier.
                type: string
              name:
                description: Friendly name of the output port.
                type: string
            required:
              - port_id
              - name
      required:
        - device_id
        - name
        - active
        - ports
    IrEmitters:
      type: array
      items:
        $ref: '#/components/schemas/IrEmitter'
    LanguageText:
      type: object
      description: |
        Key value pairs of language texts. Key: ISO 639-1 code with optional country suffix to represent a `culture code`.
        Examples: `en`, `en_UK`, `en_US`, `de`, `de_CH`.

        If we need to support more regional differences within a country, then the
        [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) might be a solution. This would even
        support the various Swiss German dialects!
      additionalProperties:
        type: string
    Macro:
      description: |
        The macro entity executes a sequence of commands.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - macro
            features:
              description: |
                Supported features of the macro.
              type: array
              items:
                type: string
                enum:
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: macro was created by Remote Two and can be edited.
                    - `false`: macro was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                included_entities:
                  $ref: '#/components/schemas/IncludedEntities'
                sequence:
                  $ref: '#/components/schemas/CommandSequence'
          required:
            - options
    Macros:
      type: array
      items:
        $ref: '#/components/schemas/MacroOverview'
    MacroCreate:
      description: |
        Dedicated request object to create a new macro.  
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                options:
                  type: object
                  properties:
                    entity_ids:
                      type: array
                      items:
                        $ref: '#/components/schemas/EntityId'
                  required:
                    - entity_ids
      required:
        - name
    MacroOverview:
      description: |
        The macro entity executes a sequence of commands.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - macro
            features:
              description: |
                Supported features of the macro.
              type: array
              items:
                type: string
                enum:
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: macro was created by Remote Two and can be edited.
                    - `false`: macro was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                sequence:
                  $ref: '#/components/schemas/CommandSequence'
    MacroUpdate:
      description: |
        Dedicated request object to update an existing macro.  
        All root properties are optional and only the provided objects are updated in the macro. Omitted objects are
        ignored and not deleted from the macro.

        The `entity_ids` object must be managed by the client and is persisted when updating a macro.

        Notes:
        - Entities can be included in `entity_ids` without being used in `sequence`.  
          This allows to edit the macro in multiple sessions without having to reselect the desired entities.
        - Every referenced entity in `sequence` must be included in `entity_ids`, otherwise the macro cannot be saved.
        - If the client removes a configured entity from the system which is included in a macro, it must make sure to also
          remove all references in the macro. See `available` property in the included entities object when retrieving a macro.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            entity_ids:
              type: array
              items:
                $ref: '#/components/schemas/EntityId'
            sequence:
              $ref: '#/components/schemas/CommandSequence'
    Name:
      type: string
      minLength: 1
      maxLength: 50
    Remote:
      description: |
        The remote entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - remote
            features:
              description: |
                Supported features of the remote. If the remote has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - send
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: remote was created by Remote Two and can be edited.
                    - `false`: remote was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                ir:
                  description: |
                    Infrared settings: codeset name und used infrared emitter to send commands.
                  type: object
                  properties:
                    codeset:
                      description: "Read-only information about the infrared codeset. \U0001F477 **TODO** Use `/remotes/entities/:entityId/ir`\nendpoints to manage infrared codes.\n"
                      type: object
                      properties:
                        id:
                          description: |
                            Codeset identifier, either a custom codeset id or a manufacturer codeset id depending on `type`.
                          type: string
                        name:
                          description: |
                            User friendly name of the used codeset (custom or manufacturer) to show in a user interface.
                          type: string
                        type:
                          $ref: '#/components/schemas/IrCodeSetType'
                    output:
                      description: |
                        Infrared output device settings. Use `/ir/emitter` endpoints to retrieve further information.
                      type: object
                      properties:
                        device_id:
                          description: |
                            IR emitter device identifier.
                          type: string
                        port_id:
                          description: |
                            IR emitter output port identifier.
                          type: string
                simple_commands:
                  description: |
                    All available commands of the infrared codeset for the button mapping and user interface.  
                    These simple commands relate directly to the `cmd_id` attribute when defining or calling an entity command.

                    The commands are read-only and updated automatically based on the infrared codeset.
                  type: array
                  items:
                    type: string
                button_mapping:
                  $ref: '#/components/schemas/DeviceButtonMappings'
                user_interface:
                  $ref: '#/components/schemas/ActivityUserInterface'
          required:
            - options
    Remotes:
      type: array
      items:
        $ref: '#/components/schemas/RemoteOverview'
    RemoteCreate:
      description: |
        Dedicated request object to create a new remote.
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                options:
                  type: object
                  properties:
                    codeset_id:
                      $ref: '#/components/schemas/SimpleId'
                  required:
                    - codeset_id
      required:
        - name
    RemoteOverview:
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - remote
            features:
              description: |
                Supported features of the remote.
              type: array
              items:
                type: string
                enum:
                  - send
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: remote was created by Remote Two and can be edited.
                    - `false`: remote was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
    RemoteUpdate:
      description: |
        Dedicated request object to update an existing remote.  
        All root properties are optional and only the provided objects are updated in the remote entity. Omitted objects are
        ignored and not deleted from the remote entity.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            ir:
              type: object
              properties:
                codeset:
                  type: object
                  properties:
                    id:
                      type: string
                  required:
                    - id
                output:
                  type: object
                  properties:
                    device_id:
                      type: string
                    port_id:
                      type: string
                  required:
                    - device_id
                    - port_id
            button_mapping:
              $ref: '#/components/schemas/DeviceButtonMappings'
            user_interface:
              $ref: '#/components/schemas/ActivityUserInterface'
    RemoteInterface:
      description: |
        The remote user interface represent a remote that can be operated by buttons and UI soft buttons.
      type: object
      properties:
        ui_id:
          $ref: '#/components/schemas/UiId'
        type:
          description: TODO design it generic or specific for the remote interface?
          type: string
          enum:
            - remote
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        entity_id:
          $ref: '#/components/schemas/EntityId'
        simple_commands:
          type: array
          items:
            type: string
        button_mapping:
          $ref: '#/components/schemas/DeviceButtonMappings'
        user_interface:
          $ref: '#/components/schemas/ActivityUserInterface'
        description:
          $ref: '#/components/schemas/LanguageText'
      required:
        - ui_id
        - name
        - entity_id
        - simple_commands
        - button_mapping
        - user_interface
    RemoteInterfaces:
      type: array
      items:
        $ref: '#/components/schemas/RemoteInterfaces'
    RemoteInterfaceCreate:
      description: |
        Dedicated request object to create a new remote interface.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        entity_id:
          $ref: '#/components/schemas/EntityId'
        description:
          $ref: '#/components/schemas/LanguageText'
      required:
        - name
        - entity_id
    RemoteIrDataSet:
      type: object
      properties:
        id:
          description: |
            Codeset identifier, either a custom codeset id or a manufacturer codeset id depending on `type`.
          type: string
        name:
          description: User friendly name of the codeset (custom or manufacturer).
          type: string
        type:
          $ref: '#/components/schemas/IrCodeSetType'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/RemoteIrCode'
    RemoteIrCode:
      type: object
      properties:
        cmd_id:
          $ref: '#/components/schemas/SimpleId'
        code:
          description: |
            Custom infrared code. Only set for custom codeset or if a manufacturer codeset has been modified or enhanced.
          type: object
          properties:
            value:
              type: string
            format:
              type: string
              enum:
                - HEX
                - PRONTO
        custom:
          description: |
            Flag indicating if this code is a custom code in a manufacturer codeset. This is a manually added code which
            was not present in the codeset. Custom codes can be deleted or edited by the user. The modified code is
            stored in the `code` object.
          type: boolean
        modified:
          description: |
            Flag indicating if a manufacturer code has been replaced with a user code. The modified code is stored in
            the `code` object. Modified codes can be edited by the user.
          type: boolean
      required:
        - cmd_id
    Scopes:
      type: array
      items:
        $ref: '#/components/schemas/Scope'
    Scope:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ScopeName'
        description:
          type: string
          description: Permission scope description
      required:
        - name
    ScopeName:
      type: string
      format: '^[a-zA-Z\-:]+$'
      minLength: 1
      maxLength: 36
      description: Permission scope name
    ApiResponse:
      type: object
      properties:
        code:
          type: string
          description: Status code
        message:
          type: string
          description: Status message describing the result or error. This message is intended for error analysis and should not directly shown to the end user.
    ServiceInstances:
      type: array
      items:
        $ref: '#/components/schemas/ServiceInstance'
    ServiceInstance:
      type: object
      properties:
        service_type:
          type: string
        name:
          type: string
          description: Instance name
        hostname:
          type: string
        port:
          type: integer
          minimum: 1
          maximum: 65535
        addr_v4:
          type: array
          items:
            type: string
        addr_v6:
          type: array
          items:
            type: string
        txt:
          type: object
          additionalProperties:
            type: string
      required:
        - service_type
        - name
        - hostname
        - port
    DriverState:
      type: string
      enum:
        - IDLE
        - CONNECTING
        - ACTIVE
        - RECONNECTING
        - ERROR
    DockId:
      type: string
      format: '^[a-zA-Z0-9-_\.]+$'
      minLength: 1
      maxLength: 64
      description: Dock identifier
    DockConfiguration:
      type: object
      properties:
        service_name:
          $ref: '#/components/schemas/DockId'
        name:
          $ref: '#/components/schemas/FriendlyName'
          description: User assignable friendly name to use instead of service_name
        custom_ws_url:
          type: string
          minLength: 6
          maxLength: 256
          description: Dock WebSocket URL to override auto-discovery from service_name
        resolved_ws_url:
          type: string
          maxLength: 256
          description: Resolved WebSocket URL from service_name if no custom_ws_url is used
        active:
          type: boolean
          description: Auto connect to dock when network is available
        state:
          $ref: '#/components/schemas/DockState'
        learning:
          type: boolean
          description: Dock is in IR learning mode
        description:
          $ref: '#/components/schemas/Description'
    DockConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/DockConfiguration'
    DockConfigurationRequest:
      type: object
      properties:
        service_name:
          $ref: '#/components/schemas/DockId'
        name:
          $ref: '#/components/schemas/FriendlyName'
          description: Optional friendly name to use instead of service_name
        custom_ws_url:
          type: string
          minLength: 6
          maxLength: 256
          description: Custom WebSocket URL to override service_name lookup
        token:
          type: string
          description: Access token
        active:
          type: boolean
          description: Auto connect to dock when network is available
        description:
          $ref: '#/components/schemas/Description'
      required:
        - service_name
        - token
        - active
    DockState:
      type: string
      description: Connection state
      enum:
        - Idle
        - Connecting
        - Connected
        - Authenticated
        - Disconnected
        - Closing
    DriverDeveloper:
      type: object
      description: Optional information about the integration developer.
      properties:
        name:
          description: Optional developer information to display in UI / web-configurator.
          type: string
          maxLength: 100
        url:
          description: Optional developer home page.
          type: string
          format: uri
          maxLength: 255
        email:
          description: Optional developer contact email.
          type: string
          format: email
          maxLength: 100
    Entities:
      type: array
      items:
        $ref: '#/components/schemas/Entity'
    Entity:
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        device_class:
          description: |
            Optional device type. This can be used by the UI to represent the entity with a different
            icon, behaviour etc. See entity documentation for available device classes.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        features:
          description: |
            Supported features of the entity. See entity documentation for available features.
          type: array
          items:
            type: string
        options:
          description: |
            Feature options. See entity documentation for available options.
          type: object
        description:
          $ref: '#/components/schemas/LanguageText'
      required:
        - entity_id
        - entity_type
        - integration_id
        - name
    EntityId:
      type: string
      format: '^[a-zA-Z0-9-_\.]+$'
      minLength: 5
      maxLength: 110
      description: Unique UC Remote Two identifier over all entities and integrations.
    EntityCommand:
      description: |
        Entity command object. The `entity_id` only has to be specified if it's not already included as a parameter in the URL.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        cmd_id:
          description: Entity specific command.
          type: string
        params:
          description: |
            Optional command parameters as key / value pairs. See entity documentation for available parameters.
          type: object
      required:
        - cmd_id
      example:
        entity_id: hass.main.light.living-room
        cmd_id: 'on'
        params:
          hue: 180
          saturation: 90
    EntityCmdParamBool:
      type: object
      description: Boolean value parameter.
    EntityCmdParamNumber:
      type: object
      description: |
        Number value parameter with optional limits.   
      properties:
        min:
          description: Minimal allowed value (inclusive).
          type: number
          default: 0
        max:
          description: Maximal allowed value (inclusive).
          type: number
        step:
          description: Step size between values.
          type: number
          default: 1
        unit:
          description: Optional unit label of the value.
          type: string
      example:
        min: 0
        max: 100
        step: 1
        unit: '%'
    EntityCmdParamRegex:
      type: object
      description: Text value parameter with optional regex validation.
      properties:
        regex:
          description: Validation regex.
          type: string
    EntityCmdParamEnum:
      type: object
      description: Enumeration parameter. Only the defined values are allowed as parameter value.
      properties:
        values:
          type: array
          items:
            type: string
      required:
        - values
      example:
        values:
          - Option 1
          - Option 2
          - Option 3
    EntityCommandMetadata:
      type: object
      properties:
        id:
          description: Entity command identifier
          type: string
        cmd_id:
          description: Entity command.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        params:
          description: |
            Metadata describing the optional parameters of the command. Simple "button like" commands
            don't have any parameters, whereas e.g. a light entity can also dim the light, change color or color
            temperature.
          type: array
          items:
            type: object
            allOf:
              - properties:
                  name:
                    $ref: '#/components/schemas/LanguageText'
                  param:
                    description: Parameter name.
                    type: string
                  type:
                    description: Parameter type.
                    type: string
                    enum:
                      - number
                      - bool
                      - regex
                      - enum
                required:
                  - name
                  - param
                  - type
              - oneOf:
                  - $ref: '#/components/schemas/EntityCmdParamNumber'
                  - $ref: '#/components/schemas/EntityCmdParamBool'
                  - $ref: '#/components/schemas/EntityCmdParamRegex'
                  - $ref: '#/components/schemas/EntityCmdParamEnum'
                discriminator:
                  propertyName: type
                  mapping:
                    number: '#/components/schemas/EntityCmdParamNumber'
                    bool: '#/components/schemas/EntityCmdParamBool'
                    regex: '#/components/schemas/EntityCmdParamRegex'
                    enum: '#/components/schemas/EntityCmdParamEnum'
      required:
        - id
        - cmd_id
        - name
    EntityRequest:
      type: object
      description: |
        Update model for an entity.

        - Specified properties will update the current values.
        - An empty value will delete the currently set property.
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
    EntityType:
      type: string
      description: Entity type
      enum:
        - button
        - climate
        - cover
        - light
        - media_player
        - sensor
        - switch
        - activity
        - macro
        - remote
    GridItemSize:
      description: 'Item size in the button grid. Default size if not specified: 1 x 1'
      type: object
      properties:
        width:
          type: integer
          minimum: 1
          default: 1
        height:
          type: integer
          minimum: 1
          default: 1
    GridLocation:
      description: Button placement in the grid with 0-based coordinates.
      type: object
      properties:
        x:
          type: integer
          minimum: 0
        'y':
          type: integer
          minimum: 0
      required:
        - x
        - 'y'
    IncludedEntities:
      description: |
        Included entities in an activity or macro. This object is writable from the client and persisted when saving.

        Notes:
        - Entities can be included without being used in a sequence.  
          This allows to edit the activity or macro in multiple sessions without having to reselect the desired entities.
        - Every used entity in a sequence must be included, otherwise the activity or macro  cannot be saved.
        - If the client removes an entity which is included in an activity or macro, it must make sure to also remove all
          entity references the sequence(s), button mapping and user interface.
      type: array
      items:
        $ref: '#/components/schemas/IncludedEntity'
    IncludedEntity:
      description: |
        When saving an activity only the `entity_id` is persisted. When retrieving an activity all other fields
        will be retrieved from the real entities to make sure they are up to date. I.e. the entity name or icon
        might change between saving an activity and retrieving it again!
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        integration:
          description: |
            Optional integration information. Regular entities will have at least the integration name. Special
            entities like activities and macros might omit the integration object.
          type: object
          properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
        entity_commands:
          description: |
            Supported entity command identifiers. A command identifier refers to the common entity command
            definitions, which describe all required parameters to set for calling the entity command. This
            includes the mandatory `cmd_id` attribute and optional parameters.
          type: array
          items:
            type: string
        simple_commands:
          description: |
            Simple commands are additional commands supported by the entity, which are not included in the
            common entity command definitions. A typical example are remote-entity commands like `VOLUME_UP` etc
            which don't have additional parameters. A simple command relates directly to the `cmd_id` attribute
            when calling a command.
          type: array
          items:
            type: string
        available:
          description: |
            State of the entity: True / missing = entity is available as configured entity and can be used.  
            False = entity has been removed and must be corrected by the user.

            If an entity is no longer available then all usages in the sequences are still present in case the
            entity is re-configured. The execution of the on- or off-sequence will then simply skip the actions
            of the no longer available entity.
          type: boolean
      required:
        - entity_id
    IntgAuthMethod:
      type: string
      description: |
        Integration driver authentication method if a token is required.

        The JSON `auth` message is used if a token is configured but no authentication method is set.
      enum:
        - HEADER
        - MESSAGE
    IntegrationDriver:
      type: object
      description: |
        Integration driver model.

        A driver represents the communication aspect of an integration. E.g. how one can connect to it
        and which API version it supports.

        One driver can provide multiple `Integration` instances. In the integration API they are
        referred to as `multi-device integrations` and use the optional `device_id` property where
        required. If a driver only provides a single instance, which is usually the default use case,
        then the `device_id` is not used (or set to the default value `main`).
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_url:
          description: WebSocket URL of the driver.
          type: string
          format: uri
          maxLength: 2048
        token:
          description: |
            Optional driver authentication token.

            Note: the token will not be returned to external clients!
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/IntgAuthMethod'
        version:
          description: 'Driver version, [SemVer](https://semver.org/) preferred.'
          type: string
          maxLength: 20
        min_core_api:
          description: |
            Optional version check: minimum required core API version in the remote.
          type: string
          maxLength: 20
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication.  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
        description:
          description: Optional description of the integration.
          $ref: '#/components/schemas/LanguageText'
        developer:
          $ref: '#/components/schemas/DriverDeveloper'
        home_page:
          description: Optional home page url for more information.
          type: string
          format: uri
          maxLength: 255
        device_discovery:
          description: Driver supports multi-device discovery. **Not yet supported**.
          type: boolean
        setup_data_schema:
          description: |
            Driver configuration metadata describing configuration parameters for the web-configurator.

            **Not yet finalized**.
          type: object
        release_date:
          description: Release date of the driver.
          type: string
          format: date
      required:
        - driver_id
        - name
        - driver_url
        - version
    IntegrationDriverInfo:
      type: object
      description: |
        Summary data of an integration driver intended for overview screens.
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_url:
          description: WebSocket URL of the driver
          type: string
          format: uri
          maxLength: 255
        version:
          type: string
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          type: boolean
      required:
        - driver_id
        - name
        - driver_url
        - version
        - enabled
    IntegrationDrivers:
      type: array
      items:
        $ref: '#/components/schemas/IntegrationDriverInfo'
    IntegrationDriverRequest:
      type: object
      description: |
        Integration driver update model. This model corresponds to the `IntegrationDriver` model except there are no required
        properties to allow patch updates. 

        - Specified properties will update the current values.
        - An empty value will delete the currently set property.
        - For the create operation, the `driver_id` identifier can be specified by the client, but it needs to be unique among
          all drivers. If omitted, a UUID will be assigned.  
          A manually assigned, short, human-readable identifier is recommended for better recognizability.
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_url:
          description: WebSocket URL of the driver
          type: string
          format: uri
          maxLength: 2048
        token:
          description: Optional driver authentication token.
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/IntgAuthMethod'
        version:
          type: string
          maxLength: 20
        min_core_api:
          description: |
            Optional version check: minimum required core API version in the remote.
          type: string
          maxLength: 20
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication.  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
        description:
          $ref: '#/components/schemas/LanguageText'
          description: Optional description of the integration
        developer:
          $ref: '#/components/schemas/DriverDeveloper'
        home_page:
          description: Optional home page url for more information
          type: string
          format: uri
          maxLength: 255
        device_discovery:
          description: Driver supports multi device discovery
          type: boolean
        setup_data_schema:
          description: |
            Driver configuration metadata describing configuration parameters for the web-configurator.

            **Not yet finalized**.
          type: object
        release_date:
          description: Release date of the driver
          type: string
          format: date
    Integration:
      type: object
      description: |
        Integration instance model.
      properties:
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        driver_id:
          $ref: '#/components/schemas/DriverId'
        device_id:
          $ref: '#/components/schemas/DeviceId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: Enable / disable flag
          type: boolean
        setup_data:
          description: Instance configuration object
          type: object
      required:
        - integration_id
        - driver_id
        - name
        - enabled
    IntegrationId:
      type: string
      format: '^[a-zA-Z0-9-_\.]+$'
      minLength: 1
      maxLength: 73
      description: |
        Unique integration instance identifier. Automatically created by the system when creating a new instance from a driver.
    Integrations:
      type: array
      items:
        $ref: '#/components/schemas/Integration'
    IntegrationRequest:
      type: object
      description: |
        Integration instance update model. This model corresponds to the `Integration` model except there are no required
        properties to allow patch updates. 

        - Specified properties will update the current values.
        - An empty value will delete a set property.
        - `device_id` is only required for multi-device integrations.
      properties:
        device_id:
          $ref: '#/components/schemas/DeviceId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: Enable / disable flag.
          type: boolean
        setup_data:
          description: Instance configuration object.
          type: object
    IntegrationStatus:
      type: object
      description: |
        Integration instance status information. Intended to be used in a general overview of the integration drivers.
      properties:
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        device_state:
          $ref: '#/components/schemas/DeviceState'
        driver_state:
          $ref: '#/components/schemas/DriverState'
        enabled:
          type: boolean
    IrStatus:
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/DockId'
        learning_active:
          description: Dock is in IR learning mode
          type: boolean
        state:
          $ref: '#/components/schemas/DockState'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/LearnedIrCode'
    LearnedIrCode:
      type: object
      properties:
        code:
          type: string
        format:
          type: string
          enum:
            - HEX
            - PRONTO
        timestamp:
          type: integer
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      example:
        username: admin
        password: '1234'
    Profile:
      type: object
      properties:
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
          description: Profile name
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        protected:
          type: boolean
          description: A protected profile can only be accessed with the profile specific pin code
        description:
          $ref: '#/components/schemas/Description'
      required:
        - profile_id
        - name
        - protected
    ProfilePin:
      type: string
      maxLength: 20
      description: Optional profile pin
    ProfileRequest:
      type: object
      properties:
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
          description: Profile name
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        pin:
          $ref: '#/components/schemas/ProfilePin'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - name
    ProfileUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
          description: Profile name
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        update_pin:
          type: boolean
          description: |
            true: Update or remove the pin if the `pin` property is set
            false: Don't change existing pin
        pin:
          type: string
          description: |
            Optional pin code for a protected profile. Only relevant if `update_pin: true`.
        description:
          $ref: '#/components/schemas/Description'
        pages:
          description: |
            Used for update only: modify page order or delete pages in profile.
            - An empty `pages` array will delete all pages and containing groups!
            - If the property is missing, the existing page configuration will not be changed.
          type: array
          items:
            $ref: '#/components/schemas/SimpleId'
      required:
        - update_pin
    Profiles:
      type: array
      items:
        $ref: '#/components/schemas/Profile'
    Group:
      type: object
      description: |
        The shown group switch in the UI is automatically determined by the capabilities of the group's entities.
      properties:
        group_id:
          $ref: '#/components/schemas/SimpleId'
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
          description: Group name. Must be unique within the profile.
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        entities:
          type: array
          description: Entity identifiers belonging to the group
          items:
            $ref: '#/components/schemas/EntityId'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - group_id
        - profile_id
        - name
        - entities
    GroupUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
          description: Group name
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        entities:
          type: array
          description: |
            Changed or re-ordered group entities.
            An empty array remove all entities.
            If the property is not specified the defined entities will not be changed.
          items:
            $ref: '#/components/schemas/EntityId'
        description:
          $ref: '#/components/schemas/Description'
    Groups:
      type: array
      items:
        $ref: '#/components/schemas/Group'
    Page:
      type: object
      properties:
        page_id:
          $ref: '#/components/schemas/SimpleId'
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
          description: Page name. Must be unique within the profile.
        image:
          type: string
          description: Optional image identifier
        items:
          type: array
          description: Page items
          items:
            $ref: '#/components/schemas/PageItem'
        pos:
          type: integer
          format: int32
          minimum: 0
          description: Position of the page within the profile
      required:
        - page_id
        - profile_id
        - name
        - items
        - pos
    PageCreate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
          description: Page name
        image:
          $ref: '#/components/schemas/ImageIdentifier'
        items:
          type: array
          description: |
            Optional page items.
          items:
            $ref: '#/components/schemas/PageItem'
        pos:
          type: integer
          format: int32
          minimum: 1
          description: |
            Optional 1-based position of the page within the profile. Default: last position
      required:
        - name
    PageItem:
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        group_id:
          $ref: '#/components/schemas/SimpleId'
        pos:
          type: integer
          format: int32
          minimum: 0
          description: |
            Position of the item within the page. Returned on retrieval, ignored for page updates where the position is taken
            from the page array position.
      oneOf:
        - required:
            - entity_id
        - required:
            - group_id
    PageUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
          description: Page name.
        image:
          $ref: '#/components/schemas/ImageIdentifier'
        items:
          type: array
          description: |
            Changed or re-ordered page items.
            An empty array removes all items.
            If the property is not specified the defined items will not be changed.
          items:
            $ref: '#/components/schemas/PageItem'
    Pages:
      type: array
      items:
        $ref: '#/components/schemas/Page'
    SimpleId:
      type: string
      format: '^[a-zA-Z0-9-_\.]+$'
      minLength: 1
      maxLength: 36
      description: 'Simple string identifier, also usable as URL parameter or file identifier'
    CfgAll:
      type: object
      properties:
        button:
          $ref: '#/components/schemas/CfgButtons'
        device:
          $ref: '#/components/schemas/CfgRemoteDevice'
        display:
          $ref: '#/components/schemas/CfgDisplay'
        haptic:
          $ref: '#/components/schemas/CfgHaptic'
        localization:
          $ref: '#/components/schemas/CfgLocalization'
        network:
          $ref: '#/components/schemas/CfgNetwork'
        power_saving:
          $ref: '#/components/schemas/CfgPowerSaving'
        software_update:
          $ref: '#/components/schemas/CfgSoftwareUpdate'
        sound:
          $ref: '#/components/schemas/CfgSound'
        voice_control:
          $ref: '#/components/schemas/CfgVoiceControl'
    CfgButtons:
      type: object
      properties:
        brightness:
          description: 'Button backlight brightness. 0 = off, 100 = max.'
          type: integer
          minimum: 0
          maximum: 100
        auto_brightness:
          description: 'When enabled, button backlight will automatically turn on in a dark room.'
          type: boolean
      required:
        - brightness
        - auto_brightness
    CfgDisplay:
      type: object
      properties:
        brightness:
          description: Display brightness.
          type: integer
          minimum: 0
          maximum: 100
        auto_brightness:
          description: Automatically adjust the display brightness based on ambient lighting conditions.
          type: boolean
      required:
        - brightness
        - auto_brightness
    CfgHaptic:
      type: object
      properties:
        enabled:
          description: Haptic feedback enabled.
          type: boolean
      required:
        - enabled
    CfgLocalization:
      type: object
      properties:
        language_code:
          $ref: '#/components/schemas/LanguageCode'
        country_code:
          $ref: '#/components/schemas/CountryCode'
        time_zone:
          description: 'Time zone name according to IANA <https://www.iana.org/time-zones>, e.g. `Europe/Copenhagen`.'
          type: string
        time_format_24h:
          type: boolean
        measurement_unit:
          $ref: '#/components/schemas/MeasurementUnit'
      required:
        - language_code
        - country_code
        - time_zone
        - time_format_24h
        - measurement_unit
    CfgNetwork:
      type: object
      properties:
        bt_enabled:
          description: Enable Bluetooth.
          type: boolean
        wifi_enabled:
          description: Enable WiFi.
          type: boolean
      required:
        - bt_enabled
        - wifi_enabled
    CfgPowerSaving:
      type: object
      properties:
        wakeup_sensitivity:
          description: Amount of movement needed to wake up the remote. 0 = disabled.
          type: integer
          minimum: 0
          maximum: 3
        display_off_sec:
          type: integer
          minimum: 0
          maximum: 60
          description: Turn off display after given seconds.
        standby_sec:
          type: integer
          minimum: 0
          maximum: 10800
          description: Activate standby after given seconds. 0 disables standby mode.
      required:
        - wakeup_sensitivity
        - display_off_sec
        - standby_sec
    CfgRemoteDevice:
      type: object
      properties:
        name:
          description: Custom name of the remote
          type: string
          minimum: 1
          maximum: 50
      required:
        - name
    CfgSoftwareUpdate:
      type: object
      properties:
        check_for_updates:
          description: |
            Automatically check for updates. If `auto_update` is enabled, the updates are automatically installed,
            otherwise the user is only notified about the updates.
          type: boolean
        auto_update:
          description: |
            Automatically update the remote when new software is available. Requires `check_for_updates` to be enabled.
          type: boolean
      required:
        - check_for_updates
        - auto_update
    CfgSound:
      type: object
      properties:
        enabled:
          description: Sound effects enabled.
          type: boolean
        volume:
          description: Sound effects volume.
          type: integer
          minimum: 0
          maximum: 100
      required:
        - enabled
        - volume
    CfgVoiceControl:
      type: object
      properties:
        microphone:
          description: |
            Enable microphone. Disabling the microphone will completely turn it off. Voice control and dictation won't work
            with the remote or integrations.
          type: boolean
        enabled:
          description: |
            Enable voice control. Disabling voice control will still let you use voice dictation with integrations. 
            Disable the microphone to completely switch off any microphone related functionality.
          type: boolean
        voice_assistant:
          description: |
            TODO
          type: string
          default: None
      required:
        - microphone
        - enabled
        - voice_assistant
    CountryCode:
      description: 'Two letter country code according to [ISO-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).'
      type: string
      format: iso-3166
    LanguageCode:
      description: |
        Language culture code: starting with the two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
        code, followed by an optional [ISO-3166 country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes),
        separated by an underscore.
        Examples: `en`, `en_UK`, `en_US`, `de`, `de_DE`, `de_CH` etc.
      type: string
      pattern: '^[a-z]{2}(_\w+)?$'
    MeasurementUnit:
      type: string
      enum:
        - METRIC
        - US
        - UK
    SystemInfo:
      type: object
      properties:
        model_name:
          type: string
        model_number:
          type: string
        serial_number:
          type: string
        hw_revision:
          type: string
    UiId:
      type: string
      format: '^[a-zA-Z0-9-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique user interface identifier.
    UserInterfaceItem:
      type: object
      properties:
        type:
          type: string
          enum:
            - icon
            - text
            - numpad
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        text:
          type: string
        command:
          $ref: '#/components/schemas/EntityCommand'
        location:
          $ref: '#/components/schemas/GridLocation'
        size:
          $ref: '#/components/schemas/GridItemSize'
      required:
        - type
        - location
    VersionInfo:
      type: object
      properties:
        api:
          type: string
        core:
          type: string
        app:
          type: string
        os:
          type: string
        integrations:
          type: object
          additionalProperties:
            type: string
  responses:
    SuccessMessage:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err400BadRequest:
      description: The server could not understand the request due to invalid syntax or missing data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err401Unauthorized:
      description: Authentication credentials were missing or incorrect. The client must authenticate itself to get the requested response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err403Forbidden:
      description: 'The request is understood, but the client does not have access rights to the content.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err404NotFound:
      description: The resource does not exist or the URI is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err413PayloadTooLarge:
      description: Request entity is too large and not supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err415UnsupportedMediaType:
      description: The media format of the requested data is not supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err422UnprocessableEntity:
      description: The request was well-formed but cannot be processed. Used for already existing data which cannot be re-created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err429TooManyRequests:
      description: The client has sent too many requests in a given amount of time.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err500InternalServerError:
      description: The server has encountered a situation it does not know how to handle. Retrying the same request will most likely result in the same error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err503ServiceUnavailable:
      description: The server is not ready to handle the request. Try again later.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
  securitySchemes:
    basicAuth:
      type: http
      description: Basic authentication. Please only use for single requests and testing with Swagger / OpenAPI.
      scheme: basic
    cookieAuth:
      type: apiKey
      description: Cookie based session authentication. Does not work with Swagger / OpenAPI testing.
      in: cookie
      name: id
