openapi: 3.0.3
info:
  title: Remote Two REST API
  version: 0.19.1
  contact:
    name: API Support
    url: 'https://github.com/unfoldedcircle/core-api/issues'
  license:
    name: Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
    url: 'https://creativecommons.org/licenses/by-sa/4.0/'
  description: "The Unfolded Circle Remote Two REST API allows to configure the remote and manage custom resource files.\nFurthermore, API-keys for the WebSocket & REST APIs can be created.\n\n## Overview\n\nThe Remote Two WebSockets Core-API allows you to interact with the Unfolded Circle remote-core application and take\nfull control of its features.\n\nThe focus of the Core-API is to provide all functionality for the UI application and the web-configurator.  \nIt may also be used by other external systems and integration drivers, if specific configuration or interaction\nfeatures are required, which are not present in the Integration API.\n\n## Authentication\n\nAll API endpoints besides `/api/pub` are secured. Available authentication methods are Basic Auth for every request\nand cookie based session login with the `/api/pub/login` endpoint.\n\n## \U0001F6A7 Missing Features\n\n**This API is a preview version and does not yet contain all functionality.**\n\nThe following features will be continuously added:\n\n- Configuration import & export\n- Bulk import of custom IR datasets\n\n## API Versioning\n\nThe API is versioned according to [SemVer](https://semver.org/).  \nThe initial public release will be `1.0.0` once it is considered stable enough with some initial integration\nimplementations and developer examples.\n\n**Any major version zero (`0.y.z`) is for initial development and may change at any time!**  \nI.e. backward compatibility for minor releases is not yet established, anything MAY change at any time!\n"
externalDocs:
  description: Find out more about the Remote Two
  url: 'https://www.unfoldedcircle.com/'
servers:
  - url: /api
  - url: 'http://localhost:8080/api'
  - url: 'https://localhost:8443/api'
  - url: 'http://unfolded-simulator.local:8080/api'
  - url: 'https://unfolded-simulator.local:8443/api'
security:
  - basicAuth: []
  - cookieAuth: []
tags:
  - name: info
    description: "\U0001F481 Public status information and health checks"
  - name: auth
    description: "\U0001F510 Session authentication"
  - name: api-keys
    description: "\U0001F511 API keys for authentication."
  - name: external-token
    description: "\U0001F48E Access token handling for external systems."
  - name: resources
    description: "\U0001F508 Media files handling, e.g. manage background images, icons or sound effects."
  - name: integrations
    description: "\U0001F9E9 Integration handling"
  - name: entities
    description: "\U0001F4FA Common handling of configured entities like sending commands and modifying editable properties.  \nEntities are usually provided by integrations, except the special activity, macro and infrared-remote entities.\n"
  - name: activities
    description: "\U0001F39BÔ∏è Combine multiple entities into an activity with optional on- & off-sequences, physical button mappings and a\ncustom user interface.\n"
  - name: macros
    description: "\U0001F522 Macros execute a sequence of commands which is exposed as an entity command. Macros don't have a custom user\ninterface.\n"
  - name: infrared
    description: "\U0001F308 Infrared code set lookup, custom IR code management and IR emitter devices.\n"
  - name: remotes
    description: "\U0001F3AE Customizable user interface and button mappings for remote-entities\ncontrolling single IR- and the like devices.\n"
  - name: profiles
    description: "\U0001F464 User profile configuration with profiles, groups, pages"
  - name: cfg
    description: "\U0001F4DD Configuration settings"
  - name: dock
    description: "\U0001F6F0 Docking station management, discovery and infrared testing functions"
  - name: system
    description: "\U0001F477 System information and commands - **work in progress**"
paths:
  /pub/version:
    get:
      tags:
        - info
      summary: Get version information about installed components.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
      security: []
  /pub/status:
    get:
      tags:
        - info
      summary: Get status information about the system.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  memory:
                    type: object
                    description: Memory status
                    properties:
                      total_memory:
                        type: integer
                        description: Amount of available RAM in KB
                      available_memory:
                        type: integer
                        description: Amount of available RAM in KB for (re)use
                      used_memory:
                        type: integer
                        description: Amount of used RAM in KB
                      total_swap:
                        type: integer
                        description: SWAP size in KB
                      used_swap:
                        type: integer
                        description: Free SWAP in KB
                  load_avg:
                    type: object
                    description: System load average
                    properties:
                      one:
                        type: number
                        description: Average load within one minute
                      five:
                        type: number
                        description: Average load within five minutes
                      fifteen:
                        type: number
                        description: Average load within fifteen minutes
                  filesystem:
                    type: object
                    description: Filesystem status
                    properties:
                      user_data:
                        type: object
                        properties:
                          available:
                            type: integer
                            description: Amount of available disk space in KB
                          used:
                            type: integer
                            description: Amount of used disk space in KB
      security: []
  /pub/health_check:
    get:
      tags:
        - info
      summary: Retrieve health check information about the system and running services.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  db:
                    type: string
                    enum:
                      - Healthy
                      - Degraded
                      - Unhealthy
                  ui:
                    $ref: '#/paths/~1pub~1health_check/get/responses/200/content/application~1json/schema/properties/db'
                  storage:
                    $ref: '#/paths/~1pub~1health_check/get/responses/200/content/application~1json/schema/properties/db'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
      security: []
  /pub/login:
    post:
      tags:
        - auth
      summary: Log in and create session.
      description: |
        A successful login returns a session authentication cookie which need to be submitted in subsequent requests.  
        The session ID is returned in a cookie named `id`.
      operationId: login
      requestBody:
        required: true
        description: A JSON object containing the username and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: []
      responses:
        '200':
          description: Successfully authenticated.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: id=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  /pub/logout:
    post:
      tags:
        - auth
      summary: Log out from session.
      description: |
        The session is removed and the session cookie named `id` is cleared.
      operationId: logout
      parameters:
        - name: id
          in: cookie
          description: Session cookie
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Successfully logged out.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'id=; HttpOnly; Path=/; Max-Age=0; Expires=Sat, 26 Jun 2021 12:05:09 GMT'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  /auth/api_keys:
    head:
      tags:
        - api-keys
      summary: Get total number of available API keys.
      operationId: getApiKeyCount
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - api-keys
      summary: List available API keys.
      description: |
        This endpoint is only intended for a management UI and not for client access. The response contains a key
        identifier in `key_id` which is required for further operations on the API key, like disabling or revoking it or
        adding a description.
      operationId: getApiKeys
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeys'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - api-keys
      summary: Create an API key for the Remote Two APIs.
      description: |
        The returned API key in `api_key` is only visible in this response. Afterwards it cannot be retrieved anymore!

        The newly created API key is usually not yet enabled for use and must first be approved by the user on the remote.

        The required scopes must be provided. They let you specify what exactly a client needs to access.
        When the access token request is displayed to the remote user for approval, the requested scopes will be
        displayed to them.

        An error is returned if an API key already exists for the provided `name`. To issue a new API key for the same
        name, the old token needs to be revoked first.
      operationId: createApiKey
      requestBody:
        description: Client information requesting access
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyRequest'
            example:
              name: My integration
              scopes:
                - admin
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - api-keys
      summary: Delete all API keys.
      description: |
        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: deleteAllApiKeys
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/auth/api_keys/{apiKeyId}':
    get:
      tags:
        - api-keys
      summary: Get information about an API key.
      description: |
        The API key itself is non-retrievable. This function provides the access rights and validity of a defined API key.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: getApiKey
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - api-keys
      summary: Update properties of an API key.
      operationId: updateApiKey
      description: |
        Activate, deactivate, rename or set validity periods of an existing API key.

        Note: access scopes cannot be changed. This requires to revoke the API key and request a new one.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      requestBody:
        description: Properties to update in the existing token.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - api-keys
      summary: Revoke an API key.
      description: |
        The API key will be deleted, no further access is possible.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: deleteApiKey
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /auth/scopes:
    get:
      tags:
        - api-keys
      summary: Get available access scopes.
      description: |
        Access scopes are used to create tokens for the WebSocket API.
      operationId: getAccessScopes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scopes'
  /auth/external:
    get:
      tags:
        - external-token
      summary: Get registered external systems.
      description: |
        External systems are handled with the R2 integrations. Before an access token for such a system can be provided,
        the corresponding system needs to be registered.

        _TODO: reference to WebSocket API for integration registration._

        If the expected system name is not returned by this call, any operations on that system name will fail:
        `/auth/external/{system}`.
        Therefore, it's advisable to either call this method first or react on the 404 error while providing or updating an
        external system token, to inform the client user, that the integration is not available on the remote.
      operationId: getExternalSystems
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSystems'
    delete:
      tags:
        - external-token
      summary: Remove all external access tokens.
      description: |
        Management operation to delete all external access tokens. Attention: this cannot be reverted!
      operationId: deleteAllExternalAccessTokens
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  '/auth/external/{system}':
    post:
      tags:
        - external-token
      summary: Provide an access token of an external system.
      description: |
        An access token is usually required to connect to external systems like Home Assistant.
        This method allows the external system to automatically provide the access token for the corresponding R2
        integration instead of forcing the user to type it in. If the token name already exists for the given system,
        error `422` is returned.
        Use the put method to update an existing token.

        The format of the access token depends on the external system and the involved R2 integration.
        It could be a UUID, a JWT or any other representation required for the integration to communicate with the
        external system.

        The `system` parameter is determined by the registered R2 integration. Only registered system name identifiers are
        valid, otherwise error `404` will be returned.
        E.g. a "FooBar" integration might register the system identifier name "foobar".
        Use the `GET /auth/external` method the retrieve the registered systems.
      operationId: addExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
      requestBody:
        description: Access token that needs to be added to the remote
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccessTokenRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the token identifier in the response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token_id:
                    type: string
                    format: '^[a-zA-Z0-9\-_]+$'
                    minLength: 1
                    maxLength: 36
                    description: |
                      Unique token identifier, used for later token management through the external system or management ui.
                      If the token identifier has been provided in the request, then then same identifier is returned, otherwise a
                      UUID is generated.
                required:
                  - token_it
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
      x-codegen-request-body-name: body
    head:
      tags:
        - external-token
      summary: Get total number of available tokens for an external system.
      operationId: getExternalAccessTokenCount
      parameters:
        - $ref: '#/components/parameters/system'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - external-token
      summary: List available tokens for an external system.
      operationId: getExternalAccessTokens
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccessTokens'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - external-token
      summary: Remove all access tokens of an external system.
      operationId: deleteExternalAccessTokensBySystem
      parameters:
        - $ref: '#/components/parameters/system'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/auth/external/{system}/{tokenId}':
    get:
      tags:
        - external-token
      summary: Get external access token.
      operationId: getExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccessToken'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - external-token
      summary: Replace an existing access token of an external system.
      description: |
        This methods allows an already provided token of an external system to be updated. The token is identified by
        the system name and the token identification.
      operationId: replaceExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      requestBody:
        description: Access token to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccessTokenRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - external-token
      summary: Remove an external access token.
      description: |
        No error is returned if the `tokenId` doesn't exist. `404` is only returned it the `system` is not found.
      operationId: deleteExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /resources:
    get:
      tags:
        - resources
      summary: Get supported media resource types.
      operationId: getResourceTypes
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedResources'
              example:
                - type: Icon
                  name:
                    en: Icon
                    de: Icon
                  description:
                    en: User interface icons for entities and integrations. Icons must be of size 90x90 pixels and either in PNG or JPG format. Maximum size is 32 KB.
                    de: Icons f√ºr die Benutzeroberfl√§che von Objekten und Integrationen. Die Icons m√ºssen 90x90 Pixel gross und im PNG oder JPG Format sein. Maximale Gr√∂sse ist 32 KB.
                  file_formats:
                    - png
                    - jpg
                  max_file_size: 32768
                  max_count: 100
                  image:
                    sizes:
                      - width: 90
                        height: 90
                - type: TvChannelIcon
                  name:
                    en: TV channel icon
                    de: TV Sender Icon
                  description:
                    en: User interface icons for TV channels. Icons must be of size 90x90 pixels and either in PNG or JPG format. Maximum size is 32 KB.
                    de: TV Sender Icons f√ºr die Benutzeroberfl√§che. Die Icons m√ºssen 90x90 Pixel gross und im PNG oder JPG Format sein. Maximale Gr√∂sse ist 32 KB.
                  file_formats:
                    - png
                    - jpg
                  max_file_size: 32768
                  max_count: 256
                  image:
                    sizes:
                      - width: 90
                        height: 90
                - type: BackgroundImage
                  name:
                    en: Background image
                    de: Hintergrund Bild
                  description:
                    en: Background image for user interface profile pages. Images must be of size 275x480 pixels and either in PNG or JPG format. Maximum size is 1 MB.
                    de: Hintergrund Bild f√ºr Profil Seiten. Die Bilder m√ºssen 275x480 Pixel gross und im PNG oder JPG Format sein. Maximale Gr√∂sse ist 1 MB.
                  file_formats:
                    - png
                    - jpg
                  max_file_size: 1048576
                  max_count: 30
                  image:
                    sizes:
                      - width: 275
                        height: 480
                - type: Sound
                  name:
                    en: Sound effect
                    de: Klangeffekt
                  description:
                    en: User interface sound effects. Maximum size is 1 MB.
                    de: Klangeffekte f√ºr die Benutzeroberfl√§che. Maximale Gr√∂sse ist 1 MB.
                  file_formats:
                    - wav
                  max_file_size: 1048576
                  max_count: 50
                  sound:
                    bits:
                      - 8
                      - 16
                    channels:
                      - 1
                      - 2
                    sampling_rates:
                      - 11025
                      - 22050
                      - 44100
    delete:
      tags:
        - resources
      summary: Delete all resources.
      operationId: deleteAllResources
      parameters:
        - $ref: '#/components/parameters/resource_type_query'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  '/resources/{type}':
    head:
      tags:
        - resources
      summary: Get total number of available resources of a given type.
      operationId: getResourceTypeItemsCount
      parameters:
        - $ref: '#/components/parameters/resource_type'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - resources
      summary: List available media resources of a given type.
      operationId: getResourceTypeItems
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceItems'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - resources
      summary: Upload media resource files.
      description: |
        Upload one or more binary resource files as form-data. Files must conform to the given type according to the metadata
        returned in `GET /api/resources`. E.g. an icon resource has other image size restrictions than a background image.

        The file names are normalized (e.g. spaces replaced with underscores) and returned as resource identifiers.

        Uploaded resources are verified, if they match expected formats. Status codes: 
        - `400`: resource doesn't confirm to the expected parameters.
        - `422`: resource already exists with the same name. Already existing resource files are NOT overwritten.
        - `507`: insufficient storage to save a new resource.
      operationId: uploadFile
      parameters:
        - $ref: '#/components/parameters/resource_type'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceItems'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
        '507':
          $ref: '#/components/responses/Err507InsufficientStorage'
    delete:
      tags:
        - resources
      summary: Delete all resources of a given type.
      operationId: deleteResources
      parameters:
        - $ref: '#/components/parameters/resource_type'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/resources/{type}/{id}':
    get:
      tags:
        - resources
      summary: Download a media resource.
      operationId: getResource
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/resource_id'
      responses:
        '200':
          description: A resource file
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpg:
              schema:
                type: string
                format: binary
            audio/wav:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - resources
      summary: Delete a media resource.
      operationId: deleteResource
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/resource_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg:
    head:
      tags:
        - integrations
      summary: Get total number of configured and external integrations.
      operationId: getIntegrationStatusCount
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - integrations
      summary: Get overview of configured and external integrations.
      description: |
        Retrieve an overview of the configured integrations and their current connection state and all external
        integrations which are ready to be configured. This overview is meant for an integration management frontend like
        the web-configurator to avoid calling multiple API endpoints to gather integration driver and instance data.
      operationId: getIntegrationStatus
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntegrationStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /intg/discover:
    get:
      tags:
        - integrations
      summary: Get external integration driver discovery status.
      description: |
        Returns the current discovery status and the discovered integration drivers.

        Use the DELETE operation to clear the discovered devices and PUT to start a new discovery.
      operationId: getIntegrationDiscoveryStatus
      responses:
        '200':
          description: Integration discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDiscoveryStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    put:
      tags:
        - integrations
      summary: Start discovery of external integration drivers.
      description: |
        Start integration driver discovery on the network with mDNS. By default the discovery automatically stops after
        30 seconds. Use the GET status request to check on discovered devices or DELETE to stop discovery.

        By default only new integration drivers are returned. If a driver is already configured it will be omitted from the
        results, unless the query parameter `new=false` is set.

        - Previously discovered integrations are removed, only newly discovered integrations will be returned.
        - Emits the WebSocket event `integration_discovery` with `event_type: START` when discovery starts.
        - For each discovered driver the WebSocket event `integration_discovery` with `event_type: DISCOVER` is emitted.
      operationId: startIntegrationDiscovery
      parameters:
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 30
            minimum: 1
            maximum: 300
        - name: new
          in: query
          description: 'Only return new devices, filter out already configured integrations.'
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - integrations
      summary: Stop discovery of external integration drivers.
      description: |
        Stops the driver discovery and returns the current discovery status in the response.

        Emits the WebSocket event `integration_discovery` with `event_type: STOP`.
      operationId: stopIntegrationDiscovery
      responses:
        '200':
          description: Integration discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDiscoveryStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/intg/discover/{driverId}':
    get:
      tags:
        - integrations
      summary: Get integration driver discovery status.
      description: |
        Returns the discovered integration driver.
      operationId: getDiscoveredIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Integration discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDiscovery'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Execute connection test command on discovered integration driver.
      description: |
        Perform a driver connection test with a discovered driver. If the driver requires a token, it must be specified in
        the request body.

        Response status codes:
        - `200`: successful operation: the connection test was successful and driver metadata could be retrieved.
        - `404`: discovered driver with `driver_id` not found. Check if the discovery result is still available and has not
                 been deleted. This can happen after a timeout since the discovery, or if the discovery result has been
                 cleared with `DELETE /intg/discover`.
        - `503`: integration driver connection could not be established.
      operationId: executeCommandOnDiscoveredIntgDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECTION_TEST
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 5
            minimum: 3
            maximum: 60
      requestBody:
        required: false
        description: Command payload
        content:
          application/json:
            schema:
              description: Driver connection parameters.
              type: object
              properties:
                connection:
                  type: object
                  properties:
                    driver_url:
                      type: string
                    token:
                      description: |
                        Optional driver authentication token.
                      type: string
                      maxLength: 2048
            examples:
              Connection test without token and discovered driver url:
                value: {}
              Connection test with token:
                value:
                  connection:
                    token: '0000'
              Connection test with custom driver url:
                value:
                  connection:
                    driver_url: 'ws://my-integration.local:8080'
      responses:
        '200':
          description: Command response
          content:
            application/json:
              schema:
                type: object
                properties:
                  driver:
                    $ref: '#/components/schemas/IntegrationDriver'
                required:
                  - driver
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    post:
      tags:
        - integrations
      summary: Register a discovered integration driver.
      description: |
        Register a discovered integration driver:
        - establish communication with the driver.
          - if the driver requires a password, it must be provided in the request.
          - the discovered driver name and url can be overridden.
        - fetch metadata from the driver.
        - check compatability.
        - register the driver and connection parameters in the remote.

        After a successful registration the setup process of the driver can be started to configure the integration.
        The required setup data is described in the returned `setup_data_schema` and the provided values by the user must
        be passed to the `POST /intg/setup` operation.

        Response status codes:
        - `400`: invalid data in request body.
        - `404`: no discovered driver found for given `driver_id`.
        - `409`: integration driver is already registered.
        - `503`: integration driver communication error. Either driver is not reachable or communication failed.
      operationId: configureDiscoveredIntgDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        description: Command payload
        content:
          application/json:
            schema:
              description: Driver connection parameters.
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/LanguageText'
                driver_url:
                  description: 'Custom WebSocket URL of the driver, otherwise the discovered driver address is used.'
                  type: string
                  format: uri
                  maxLength: 2048
                token:
                  description: |
                    Optional driver authentication token.
                  type: string
                  maxLength: 2048
            examples:
              Default:
                value: {}
              Configure driver with custom url:
                value:
                  driver_url: 'ws://my-integration.local:8080'
              Configure driver with default name & url and custom token:
                value:
                  token: '0000'
              Configure driver with custom name:
                value:
                  name:
                    en: My integration
                    de: Meine Integration
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /intg/setup:
    get:
      tags:
        - integrations
      summary: Get current integration setup processes.
      description: |
        Return a list of all active setup process identifiers. The returned ids can be used with the
        `/intg/setup/:id` endpoints to continue or abort a setup process.
      operationId: getIntegrationSetupProcesses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - integrations
      summary: Start setting up a new integration driver.
      description: |
        Start a new setup process for the given integration driver and provided setup data.

        - This operation immediately starts the driver communication and setup process.
        - There may only be one active setup process per driver, otherwise status code `409` is returned.

        The returned `id` in the `IntegrationSetupInfo` response will be the identifier for the further setup operations
        with the `/intg/setup/:driver_id` endpoints. Once the setup process is successfully finished, an integration instance is
        created. A setup process can be simple and fully automatic, but may also require user interaction and further
        communication with the returned `/intg/setup/:driver_id` endpoint.

        Emits the WebSocket event `integration_setup_change` with `event_type: START`.

        Request body:
        - `name`: optional integration name. If not specified the name of the integration driver is used.
        - `setup_data`: optional driver setting values corresponding to the driver's `setup_data_schema` object.

        Response status codes:
        - `400`: invalid data in request body.
        - `404`: specified `driver_id` in request body does not exist.
        - `409`: a setup process for the given `driver_id` already exists. Either continue or abort existing process.
        - `422`: the setup process cannot be used: either the integration is already configured or doesn't allow to be
                 set up again.  
                 ‚ö†Ô∏è At the moment the setup process is only implemented for new integration setups. This will be extended
                    to re-run the setup process of an already configured integration.
        - `503`: integration driver communication error. Either driver is not reachable or communication failed.
      operationId: setupIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntegrationSetup'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSetupInfo'
              example:
                id: sim-test
                state: SETUP
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - integrations
      summary: Abort and remove all setup processes.
      description: |
        Stop all setup processes at the next possible operation and remove all setup process information.  
        Depending on the integration driver, a started setup process cannot be aborted.

        ‚ö†Ô∏è This stops all setup processes, not just for the current session!
      operationId: stopAllIntegrationSetups
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/intg/setup/{driverId}':
    get:
      tags:
        - integrations
      summary: Get integration driver setup status.
      description: |
        Poll operation to retrieve the current integration driver setup state. See the `state` and `error` fields in the
        response message. There are also WebSocket `integration_setup_change` event messages for state changes to avoid
        polling.

        Defined setup states:
        - `SETUP`: setup is running and configuring the integration. 
        - `WAIT_USER_ACTION`: user input is required to continue the setup process. See `require_user_action` in response
           for the required user input. Provide the requested data with the `PUT` operation.
        - `OK`: setup process has been completed successfully, the integration driver can now be used.
        - `ERROR`: the setup process failed. Check the `error` field for more information.
      operationId: getIntegrationSetupStatus
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSetupInfo'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Provide requested integration setup data.
      description: |
        Set required data to configure the integration driver or continue the setup process.

        Defined user actions to set in the request body `action` field:
        - `input_values`: if the user was requested to enter settings, e.g. connection or credential parameters to a device
          or service.
        - `confirm`: response to the user action `confirmation`. Set to `true` if the user had to perform an action like
          pressing a button on a device and then confirms the action with continuing the setup process.  
          The `false` value is prepared for yes / no choices.

        The `state` field in the response message indicate the current state of the setup process. Use the `GET` operation
        to poll for state updates or listen to the corresponding WebSocket `integration_setup_change` event messages with
        `event_type: SETUP`.
      operationId: setIntegrationUserData
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    input_values:
                      $ref: '#/components/schemas/SettingsValues'
                  required:
                    - input_values
                - type: object
                  properties:
                    confirm:
                      type: boolean
                  required:
                    - confirm
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSetupInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - integrations
      summary: Abort the integration driver setup process.
      description: |
        Stop the setup process at the next possible operation and remove the setup process information.  
        To start a new setup process, use the `POST /intg/setup` operation again.

        Depending on the integration driver, a started setup process cannot be aborted.

        Emits the WebSocket event `integration_setup_change` with `event_type: STOP`.
      operationId: stopIntegrationSetup
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg/drivers:
    head:
      tags:
        - integrations
      summary: Get total number of registered integration drivers.
      operationId: getIntegrationDriversCount
      parameters:
        - name: driver_type
          in: query
          description: Filter by driver type.
          schema:
            type: string
            enum:
              - LOCAL
              - EXTERNAL
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/instantiable'
        - $ref: '#/components/parameters/single_device'
        - $ref: '#/components/parameters/has_instances'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - integrations
      summary: Get all registered integration drivers.
      description: |
        Returns an overview of all registered drivers. To retrieve all driver data use `/intg/drivers/{driverId}`.
      operationId: getIntegrationDrivers
      parameters:
        - name: driver_type
          in: query
          description: Filter by driver type.
          schema:
            type: string
            enum:
              - LOCAL
              - EXTERNAL
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/instantiable'
        - $ref: '#/components/parameters/single_device'
        - $ref: '#/components/parameters/has_instances'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDrivers'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - integrations
      summary: "\U0001F477 Manually register a new integration driver."
      description: |
        A driver provides the connection parameters and optional setup configuration for an integration driver.

        Registering a driver requires that the driver is running and responding to requests on the given URL. The driver
        details will be fetched and stored in the Remote.

        Depending on the driver capabilities it either provides a single access point to the provided entities, or exposes
        multiple devices, each with its own unique set of entities. The former could for example be used to provide GPIO
        access of a Raspberry Pi or gather all supported devices it is able to interact with (e.g. network sensors, light
        switches etc.). The more capable multi-device mode is suited to bridge home automation hubs where multiple
        instances should be supported.

        Once a driver is registered, one or more integration instances must be configured to interact with the driver.  
        For simple integration drivers there's a 1:1 relationship between an instance and driver. For multi-device drivers, 
        each device corresponds to an integration instance.

        It is recommended to manually set a unique and human-readable driver identifier in `driver_id`. Otherwise a UUID
        will be assigned. The `driver_id` is required for all further interactions with the driver, like creating a runtime
        instance to connect to the driver and fetch available entities.
      operationId: registerIntegrationDriver
      requestBody:
        description: Integration driver data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationDriverRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the created integration driver in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/drivers/{driverId}':
    get:
      tags:
        - integrations
      summary: Get integration driver metadata.
      description: |
        Returns the full data of an integration driver, except the authentication token for external clients.
      operationId: getIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - integrations
      summary: Modify connection parameters of an external integration driver.
      description: |
        Update connection settings of an external integration driver if the URL or access token has changed. The new
        settings are immediately applied and the driver communication verified. This might take a few seconds.  
        The driver's own optional configuration settings cannot be applied with this operation and are configured during
        the setup process, or through the integration instance.

        - Only external integration drivers can be modified. Otherwise `400` (Bad Request) is returned.
        - Connection settings are tested and applied against the driver.
          - `503` (Service Unavailable) is returned if the driver communication fails.
          - If the driver is not active, the settings are only applied and not tested! This is for development use only.
        - See request description on how to update or remove an existing setting.

        **TODO:** allow driver name change?
      operationId: updateIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        description: Entity data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationDriverUpdate'
        required: true
      responses:
        '200':
          description: Successful operation returning the updated integration driver in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - integrations
      summary: Execute a command on an integration driver.
      description: |
        Available driver commands:
        - `CONNECTION_TEST`: perform a driver connection test with the connection parameters in the payload.
        - `START`: Manually start an integration driver.
        - `STOP`: Manually stop a driver to disable all integration instances processing.

        Response status codes:
        - `200`: successful operation, e.g. the connection test was successful.
        - `400`: bad request, e.g. connection parameters missing for connection test command.
        - `503`: integration driver connection could not be established.

        If a driver is enabled it will start automatically. Manually starting and stopping a driver is for testing purposes
        and setting up new drivers in the web-configurator.
      operationId: integrationDriverCommand
      parameters:
        - $ref: '#/components/parameters/driver_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECTION_TEST
              - START
              - STOP
      requestBody:
        required: false
        description: Command payload
        content:
          application/json:
            schema:
              description: Driver connection parameters for `CONNECTION_TEST` command only.
              type: object
              properties:
                driver_url:
                  description: WebSocket URL of the driver.
                  type: string
                  format: uri
                  maxLength: 2048
                token:
                  description: |
                    Optional driver authentication token.
                  type: string
                  maxLength: 2048
              required:
                - driver_url
            examples:
              Connection test:
                value:
                  driver_url: 'ws://192.168.1.200:8000/ws'
                  token: '0000'
              Other:
                value: null
      responses:
        '200':
          description: |
            Successful operation, returns the `IntegrationDriver` object for the `CONNECTION_TEST` command, otherwise the
            common `ApiResponse` object.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IntegrationDriver'
                  - $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    post:
      tags:
        - integrations
      summary: Create a new integration instance from driver.
      description: |
        Create an integration driver instance and associate it with the driver.  
        For simple integration drivers there's a 1:1 relationship only between an instance and driver.
        For multi-device drivers, each device corresponds to an integration instance.

        - the `integration_id` is automatically created by the system to make it unique over all integrations.
        - for multi-device drivers the `device_id` must be specified and may not already exist in another instance of the
          same driver.
        - the driver's name is used by default if `name` isn't specified.
        - the instance is active by default if `enabled` isn't specified.
      operationId: createIntegration
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        description: Integration instance data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the created integration instance in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - integrations
      summary: Remove an integration driver.
      description: |
        Unloads and deletes an integration driver with all instances and provided entities.

        ‚ö†Ô∏è **Attention: all references to the integration driver will be removed! This includes all driver instances,
        provided entities and their references in profile pages and groups.**
      operationId: deleteIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg/instances:
    head:
      tags:
        - integrations
      summary: Get total number of integration instances.
      operationId: getIntegrationsCount
      parameters:
        - $ref: '#/components/parameters/enabled'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - integrations
      summary: Get all integration instances.
      operationId: getIntegrations
      parameters:
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integrations'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Connect or disconnect all integration instances.
      description: |
        Execute a command on all active integration instances:

        - `connect`: requests all enabled integrations to establish a session to the integration driver and start processing
          events.  
          Use `GET /intg/instances` or `GET /intg/instances/{intgId}` to check on the connection status.
        - `disconnect`: disconnects all active integration driver sessions.
      operationId: executeCommandOnAllIntegrations
      parameters:
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}':
    get:
      tags:
        - integrations
      summary: Get an integration instance.
      operationId: getIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - integrations
      summary: Modify a configured integration instance.
      description: |
        Modify one or several properties of an integration instance.  
        See update model description on how to update or delete an existing property.

        The integration driver of an instance cannot be changed and will be ignored if provided in the request.
      operationId: updateIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      requestBody:
        description: Integration instance data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the updated integration instance in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - integrations
      summary: Remove an integration instance.
      description: |
        Unloads and deletes an integration instance.

        **Attention: all references to the integration instance will be removed! This includes configured entities and 
        their references in profile pages and groups.**
      operationId: deleteIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Connect or disconnect an integration instance.
      description: |
        Exectue a command on the integration instance:

        - `connect`: establish a session to the integration driver and start processing events.  
          Use `GET /intg` or `GET /intg/instances/{intgId}` to check on the connection status.
        - `disconnect`: disconnect from the driver and stop processing events.
      operationId: executeIntegrationCommand
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}/entities':
    get:
      tags:
        - integrations
      summary: Get available entities from integration instance.
      description: |
        Retrieve the available entities provided by the integration instance.

        By default only the entities are returned which are not yet configured. Use the `filter` query to include all or
        only the already configured entities.
      operationId: getAvailableEntitiesFromInstance
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - name: reload
          in: query
          description: Force reload available entities from driver.
          required: false
          schema:
            type: boolean
            default: false
        - name: filter
          in: query
          description: Filter available entities.
          required: false
          schema:
            type: string
            default: NEW
            enum:
              - NEW
              - CONFIGURED
              - ALL
        - $ref: '#/components/parameters/entity_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableEntity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}/entities/{entityId}':
    post:
      tags:
        - integrations
      summary: Configure an available entity.
      description: |
        Configure a new Remote Two entity from an available integration entity. Once configured, the entity will no longer
        show up as available entity (unless the `all` filter is set).

        The entity `name`, `icon` and `description` fields may be changed. If not specified in the request the values from
        the available entity are used.
      operationId: configureEntityFromIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Entity data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the configured entity in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
  /entities:
    head:
      tags:
        - entities
      summary: Get total number of configured entities.
      operationId: getEntityCount
      parameters:
        - $ref: '#/components/parameters/entity_type'
        - $ref: '#/components/parameters/intg_id'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - entities
      summary: Get configured entities.
      description: |
        Returns all configured and loaded entities.  
        Entities can be filtered by type and integration.
      operationId: getEntities
      parameters:
        - $ref: '#/components/parameters/entity_type'
        - $ref: '#/components/parameters/intg_id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/entities/{entityId}':
    get:
      tags:
        - entities
      summary: Get a configured entity.
      operationId: getEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - entities
      summary: Modify a configured entity.
      operationId: updateEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Entity data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the configured entity in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - entities
      summary: Remove a configured entity.
      description: |
        Unloads and deletes a configured entity. If the entity is still provided from an integration it can be reused and
        will show up again in the available entity group.

        All references to the configured entity will be removed from profile pages and groups.
      operationId: deleteEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/entities/{entityId}/command':
    put:
      tags:
        - entities
      summary: Execute an entity command.
      operationId: executeEntityCommand
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Command data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCommand'
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
  /activities:
    head:
      tags:
        - activities
      summary: Get total number of activity entities.
      description: |
        The total number of available activities are returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the activities with the `GET` operation and paging parameters.
      operationId: getActivityCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - activities
      summary: Get activity entities overview with paging.
      description: |
        Returns an overview of all defined activities with the given paging parameters. Use the `HEAD` operation to retrieve
        the total number of defined activities.

        The overview information doesn't include all details of an activity. The full activity information is retrievable
        with `/activities/{entityId}`.
      operationId: getActivities
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activities'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - activities
      summary: Create a new activity entity.
      description: |
        Create a new entity of type `activity`. An activity entity is a special internal entity without association to an
        integration driver.

        To create a new activity at least a name must be provided. The `icon`, `description` and `options.entity_ids`
        are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        An activity can be cloned from another activity-, macro- or remote-entity identifier in `clone_from`. 
        All applicable configuration will be copied, except a new activity name must be specified. The `icon` and
        `description` fields can still be specified and will override the copied data. The `options.entity_ids` is
        not allowed when cloning data, additional entities can be added later with the `PUT` update operation.

        The `entity_ids` may be omitted when creating a new activity and specified later when updating the activity.
      operationId: createActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityRequest'
            examples:
              simple:
                value:
                  name:
                    en: My new activity
              activity with icon and description:
                value:
                  name:
                    en: My new activity
                  icon: 'uc:bell'
                  description:
                    en: Testing the activity feature
              clone:
                value:
                  name:
                    en: My cloned activity
                  clone_from: uc.main.activity.watch-tv
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - activities
      summary: Delete all activity entities.
      description: |
        ‚ö†Ô∏è All defined activities will be irrevocably deleted!
      operationId: deleteAllActivities
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/activities/{entityId}':
    get:
      tags:
        - activities
      summary: Get an activity by its entity_id.
      description: "Returns all the information required to manage an existing activity. The included entities are enriched with `name`,\n`icon`, `entity_type`, available commands and if the entity is still available or has been removed since the\nactivity was defined.\n\nThe available entity commands are divided into:\n- `entity_commands`: regular entity commands as defined in the [entity documentation](https://github.com/unfoldedcircle/core-api/tree/main/doc/entities).\n   The identifier refers to the common entity command definitions, which describe all required parameters for \n   defining a command. This includes the mandatory `cmd_id` name and optional parameters.\n\n   \U0001F477 TODO endpoint to retrieve entity command definitions.\n- `simple_commands`: additional, simple dynamic commands of an entity. Like infrared code commands of a\n   remote-entity. A simple command relates directly to the `cmd_id` attribute when executing a command and there's\n   no further mapping as for _entity_commands_.\n"
      operationId: getActivity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update an activity entity.
      operationId: updateActivity
      description: |
        Update one or multiple properties of an activity. The omitted properties are ignored and not deleted. To clear an
        array simply provide an empty array.

        - Button mappings are configured with the dedicated `/activities/{entityId}/buttons` and
        `/activities/{entityId}/buttons/{button}` endpoints.
        - The user interface is configured with the dedicated `/activities/{entityId}/ui`, `/activities/{entityId}/ui/pages`
          and `/activities/{entityId}/ui/pages/{pageId}` endpoints.
        - Sequence-commands are composed of command definitions (see description of `entity_commands` and
          `simple_commands` in GET operation). The `entity_id` and `cmd_id` attributes are always required. The `params`
          object is only required for `entity_commands` having parameters. 
        - The special `"type": "delay"` command is not described in the entity command definitions and can only be used in
          sequences.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing activity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Delete an activity entity.
      description: |
        ‚ö†Ô∏è The given activity is irrevocably deleted.
      operationId: deleteActivity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/buttons':
    get:
      tags:
        - activities
      summary: Get the physical button mappings.
      operationId: getActivityButtonMappings
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Reset the physical button mappings to their default state.
      description: |
        An automatic mapping of common functions to the physical buttons is performed. This depends on the chosen entities,
        e.g. an audio device will map the volume up & down keys and a TV or set-top box will map the channel up & down
        commands.

        ‚ö†Ô∏è The previous customization of the physical button mapping is irrevocably deleted.
      operationId: resetActivityButtonMappings
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/buttons/{buttonId}':
    get:
      tags:
        - activities
      summary: Get a physical button mapping.
      operationId: getActivityButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMapping'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update a physical button mapping.
      description: |
        Update the button mapping for either a short- or a long-press.
      operationId: updateActivityButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    short_press:
                      $ref: '#/components/schemas/EntityCommand'
                  required:
                    - short_press
                - type: object
                  properties:
                    long_press:
                      $ref: '#/components/schemas/EntityCommand'
                  required:
                    - long_press
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMapping'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Remove a physical button mapping.
      description: |
        ‚ö†Ô∏è The previous customization of the physical button mapping is irrevocably deleted.
      operationId: deleteActivityButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/ui':
    get:
      tags:
        - activities
      summary: Get the user interface definition of an activity.
      description: |
        Returns all the information required to manage an existing activity user interface.

        At the moment a user interface only consists of pages.
      operationId: getActivityUi
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterface'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Reset an activity user interface to its default state.
      description: |
        ‚ö†Ô∏è The customization of the activity user interface is irrevocably deleted.
      operationId: deleteActivityUi
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterface'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/ui/pages':
    post:
      tags:
        - activities
      summary: Create a new user interface page
      description: |
        Append a new empty page to the user interface pages. The new page identifier is returned in the response.

        The payload fields are optional. A page name and the items of the page can be specified, or later be added with 
        `PATCH /activities/{entityId}/ui/pages/{pageId}`.
      operationId: createActivityUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUserInterfacePageUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_id:
                    $ref: '#/components/schemas/SimpleId'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - activities
      summary: Get the user interface pages of an activity.
      operationId: getActivityUiPages
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update the activity user interface page order.
      operationId: updateActivityUiPageOrder
      description: |
        Reorder the pages in the user interface according to the page identifiers in the `page_order` array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page_order:
                  type: array
                  items:
                    $ref: '#/components/schemas/SimpleId'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Reset the activity user interface pages to the default state.
      description: |
        The default page(s) is created and the page array returned.

        ‚ö†Ô∏è The customization of the activity user interface is irrevocably deleted.
      operationId: resetActivityUiPages
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/ui/pages/{pageId}':
    get:
      tags:
        - activities
      summary: Get the user interface page definition of a remote-entity.
      operationId: getActivityUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update an activity user interface page.
      operationId: updateActivityUiPage
      description: |
        Update one or multiple properties of an activity user interface page. The omitted properties are ignored and not
        deleted. To clear an array simply provide an empty array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      requestBody:
        description: Properties to update in the existing activity user interface page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUserInterfacePageUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterfacePage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Delete an activity user interface page.
      description: |
        The given page is removed and the array of remaining pages is returned.

        ‚ö†Ô∏è The customization of the activity user interface page is irrevocably deleted.
      operationId: deleteActivityUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /macros:
    head:
      tags:
        - macros
      summary: Get total number of macro entities.
      description: |
        The total number of available macros are returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the macros with the `GET` operation and paging parameters.
      operationId: getMacroCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - macros
      summary: Get macro entities overview with paging.
      description: |
        Returns an overview of all defined macros with the given paging parameters. Use the `HEAD` operation to retrieve
        the total number of defined macros.

        The overview information doesn't include all details of a macro. The full macro information is retrievable
        with `/macros/{entityId}`.
      operationId: getMacros
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macros'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - macros
      summary: Create a new macro entity.
      description: |
        Create a new entity of type `macro`. An macro entity is a special internal entity without association to an
        integration driver.

        To create a new macro at least a name must be provided. The `icon`, `description` and `options.entity_ids`
        are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        The new macro can be cloned from another macro-entity identifier in `clone_from`. All applicable configuration will
        be copied, except a new macro name must be specified. The `icon` and `description` fields can still be specified and
        will override the copied data. The `options.entity_ids` is not allowed when cloning data, additional entities
        can be added later with the `PUT` update operation.

        The `entity_ids` may be omitted when creating a new macro and specified later when updating the macro.
      operationId: createMacro
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroCreate'
            examples:
              simple:
                value:
                  name:
                    en: My new macro
              macro with icon and description:
                value:
                  name:
                    en: My new macro
                  icon: 'uc:bell'
                  description:
                    en: Testing the macro feature
              clone:
                value:
                  name:
                    en: My cloned macro
                  clone_from: uc.main.macro.vacation-mode
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - macros
      summary: Delete all macro entities.
      description: |
        ‚ö†Ô∏è All defined macros will be irrevocably deleted!
      operationId: deleteAllMacros
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/macros/{entityId}':
    get:
      tags:
        - macros
      summary: Get a macro by its entity_id.
      description: |
        Returns all the information required to manage an existing macro. The included entities are enriched with `name`,
        `icon`, `entity_type`, available commands and if the entity is still available or has been removed since the
        macro was defined.
      operationId: getMacro
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - macros
      summary: Update a macro entity.
      operationId: updateMacro
      description: |
        Update one or multiple properties of a macro. The omitted properties are ignored and not deleted. To clear an
        array simply provide an empty array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing macro.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - macros
      summary: Delete a macro entity.
      description: |
        ‚ö†Ô∏è The given macro is irrevocably deleted.
      operationId: deleteMacro
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /ir/codes/manufacturers:
    get:
      tags:
        - infrared
      summary: Search supported infrared device manufacturers.
      description: |
        Device manufacturer search. The returned manufacturer identification will be used for the manufacturer specific IR
        code set search with `/ir/codes/manufacturers/{manufacturerId}`.
      operationId: searchIrDeviceManufacturers
      parameters:
        - name: q
          in: query
          description: Manufacturer name query
          required: true
          schema:
            type: string
            minLength: 2
          example: Lucky Goldstar
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: Manufacturer identification
                      type: string
                    name:
                      description: Manufacturer name
                      type: string
                  required:
                    - id
                    - name
              example:
                - id: lg
                  name: LG
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/manufacturers/{manufacturerId}':
    get:
      tags:
        - infrared
      summary: Search for infrared device code sets by manufacturer to create a remote entity.
      description: |
        Searching without the optional device query will return the generic manufacturer IR code sets.
      operationId: searchInfraredDevice
      parameters:
        - name: manufacturerId
          in: path
          description: Manufacturer identification from search
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: Device or category
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: Code set identifier
                      type: string
                    name:
                      description: Device name
                      type: string
                  required:
                    - id
                    - name
              example:
                - id: '1'
                  name: Generic TV 1
                - id: '2'
                  name: Generic TV 2
                - id: '3'
                  name: Generic TV 3
                - id: '4'
                  name: Generic Projector
                - id: '5'
                  name: Generic BluRay Player
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/manufacturers/{manufacturerId}/{codeSetId}':
    get:
      tags:
        - infrared
      summary: Retrieve IR codeset command information for testing IR commands.
      description: |
        Returns all command identifiers of a given manufacturer code set.
      operationId: getManufacturerCodeSet
      parameters:
        - name: manufacturerId
          in: path
          required: true
          schema:
            type: string
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - POWER_ON
                - POWER_OFF
                - POWER_TOGGLE
                - VOLUME_UP
                - VOLUME_DOWN
                - MUTE
                - CHANNEL_UP
                - CHANNEL_DOWN
                - DPAD_LEFT
                - DPAD_RIGHT
                - DPAD_UP
                - DPAD_DOWN
                - ENTER
                - OSD
                - SETUP
                - NUMPAD_0
                - NUMPAD_1
                - NUMPAD_2
                - NUMPAD_3
                - NUMPAD_4
                - NUMPAD_5
                - NUMPAD_6
                - NUMPAD_7
                - NUMPAD_8
                - NUMPAD_9
                - HDMI_1
                - HDMI_2
                - HDMI_3
                - HDMI_4
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /ir/codes/custom:
    head:
      tags:
        - infrared
      summary: Get total number of custom infrared code sets.
      operationId: getCustomIrDeviceCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - infrared
      summary: Get all custom infrared code sets.
      description: |
        Retrieve all custom infrared code set with paging. Use `GET /ir/codes/custom/{codeSetId}` to access the IR code
        definitions.
      operationId: getCustomIrDeviceCodes
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CodeSetInfo'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - infrared
      summary: Create a new custom infrared code set.
      description: |
        Create a new custom codeset for an IR device. The IR codes can already be provided or added later with
        `GET /ir/codes/custom/{codeSetId}/{key}`.

        If the manufacturer isn't provided, the codeset will be linked to the custom manufacturer entry for self learned
        codes.
      operationId: createCustomIrDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeSetCreate'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSetInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - infrared
      summary: Delete all custom infrared code sets.
      description: |
        ‚ö†Ô∏è All defined custom infrared device codes will be irrevocably deleted!
      operationId: deleteAllCustomIrDeviceCodes
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/custom/{codeSetId}':
    get:
      tags:
        - infrared
      summary: Get custom infrared code set.
      description: |
        Retrieve the full definition of an infrared code set including the IR codes.
      operationId: getCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSet'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - infrared
      summary: Modify a custom infrared code set.
      description: |
        Rename the device or change the device type of an infrared code set.

        A device name must be unique and only custom infrared code sets can be modified.
      operationId: updateCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeSetUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSetInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - infrared
      summary: Delete custom infrared code set.
      description: |
        ‚ö†Ô∏è All defined custom infrared device codes will be irrevocably deleted!
      operationId: deleteCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/custom/{codeSetId}/{key}':
    get:
      tags:
        - infrared
      summary: Get a code definition from a custom infrared code set.
      description: |
        Retrieve the code definition for the given key in the infrared code set.
      operationId: getCodeInCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ir_key'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrCode'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - infrared
      summary: Add a new key to a custom infrared code set.
      description: |
        Enhance the infrared code set with a new key. The key must be unique in a given code set. Only custom code sets can
        be modified.
      operationId: addKeyInCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ir_key'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IrCodeUpdate'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    put:
      tags:
        - infrared
      summary: Modify a code in a custom infrared code set.
      description: |
        Update the code definition of a key in an infrared code set. Only custom code sets can be modified.
      operationId: updateCodeInCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ir_key'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IrCodeUpdate'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - infrared
      summary: Delete and entry in a custom infrared code set.
      description: |
        ‚ö†Ô∏è The key in the custom infrared device code set will be irrevocably deleted!
      operationId: deleteKeyInCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ir_key'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /ir/emitters:
    head:
      tags:
        - infrared
      summary: Get total number of infrared emitter devices.
      operationId: getInfraredEmitterCount
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - infrared
      summary: Get all infrared emitter devices for sending IR codes.
      operationId: getInfraredEmitters
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrEmitters'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/ir/emitters/{emitterId}':
    get:
      tags:
        - infrared
      summary: Get an IR emitter device.
      operationId: getIrEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrEmitter'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/ir/emitters/{emitterId}/send':
    put:
      tags:
        - infrared
      summary: Send IR command.
      description: |
        Send an IR command from the specified command set or a learned code on the given emitter and output port.
      operationId: sendCommandOnEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      requestBody:
        description: IR command
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: Command from a codeset.
                  properties:
                    codeset_id:
                      description: Infrared codeset identifier.
                      type: string
                    cmd_id:
                      description: Command identifier in the codeset.
                      type: string
                    port_id:
                      description: Optional output port identifier. The default output will be used if omitted.
                      type: string
                  required:
                    - codeset_id
                    - cmd_id
                - type: object
                  description: Learned IR code.
                  properties:
                    code:
                      description: IR code. PRONTO codes can use a space or comma as separator.
                      type: string
                    format:
                      $ref: '#/components/schemas/IrCodeFormat'
                    port_id:
                      description: Optional output port identifier. The default output will be used if omitted.
                      type: string
                  required:
                    - code
                    - format
            examples:
              Command from a codeset on default output:
                value:
                  codeset_id: ir.manufacturer.123
                  cmd_id: CHANNEL_DOWN
              Command from a codeset on specific output:
                value:
                  codeset_id: ir.manufacturer.123
                  cmd_id: CHANNEL_DOWN
                  port_id: '4'
              Learned PRONTO code on default output:
                value:
                  code: '0000,0068,0000,0010,0060,0018,0030,0018,0018,0018,0030,0018,0018,0018,0018,0018,0030,0018,0018,0018,0030,0018,0030,0018,0030,0018,0018,0018,0030,0018,0018,0018,0018,0018,0030,0318'
                  format: PRONTO
              Learned HEX code on specific output:
                value:
                  code: 3;0x20F0A956;32;0
                  format: HEX
                  port_id: '4'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/ir/emitters/{emitterId}/learn':
    get:
      tags:
        - infrared
      summary: Get IR learning status and results.
      description: |
        Returns the current status and if the dock is in IR learning mode. All learned codes will be returned since the
        start of the learning session.
      operationId: irLearningStatusEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      responses:
        '200':
          description: IR learning status
          content:
            application/json:
              schema:
                type: object
                properties:
                  device_id:
                    description: IR emitter device identifier.
                    type: string
                  learning_active:
                    description: |
                      Device is in IR learning mode. Usually an emitter can't send IR commands while it is in learning mode.
                    type: boolean
                  codes:
                    type: array
                    items:
                      $ref: '#/components/schemas/LearnedIrCode'
                required:
                  - device_id
                  - learning_active
                  - codes
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - infrared
      summary: Start IR learning.
      description: |
        Learn IR commands from the given emitter with learning capability. The learning session will be stopped
        automatically after the timeout, unless it hasn't been stopped with the `DELETE` operation, or a new learning
        session has been initiated.

        Any learned code will immediately be sent as a WebSocket `ir_learning`event message in the `emitters` channel.
        Furthermore, the codes are stored for retrieval with the `GET` status call. There's a maximum of 16 learned
        codes per session. Any additional codes will be ignored and only sent as a WebSocket event.

        Calling this function, while learning is still active, will extend the timeout. Any previously learned codes
        will not be deleted.
      operationId: startIrLearningEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 60
            minimum: 1
            maximum: 300
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - infrared
      summary: Stop IR learning and clear results.
      description: |
        The current status and any learned codes will be returned. After this call the learned codes are no longer
        accessible through the `GET` status call.
      operationId: stopIrLearningEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      responses:
        '200':
          description: IR learning status
          content:
            application/json:
              schema:
                $ref: '#/paths/~1ir~1emitters~1%7BemitterId%7D~1learn/get/responses/200/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /remotes:
    head:
      tags:
        - remotes
      summary: Get total number of remote-entities.
      description: |
        The total number of available remotes are returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the remotes with the `GET` operation and paging parameters.
      operationId: getRemoteCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - remotes
      summary: Get remote-entities overview with paging.
      description: |
        Returns an overview of all defined remotes with the given paging parameters. Use the `HEAD` operation to retrieve
        the total number of defined remotes.

        The overview information doesn't include all details of a remote. The full remote information is retrievable
        with `/remotes/{entityId}`.
      operationId: getInfraredEntities
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remotes'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - remotes
      summary: Create a new remote-entity with a manufacturer IR code set or an empty custom code set.
      description: |
        Create a new entity of type `remote`. An remote-entity is a special internal entity without association to an
        integration driver.

        To create a new remote at least a name must be provided. If no manufacturer infrared code set is specified in
        `options.codeset_id`, a new custom code set is automatically created for the user to manually specify or learn the
        codes.  
        The `icon` and `description` properties are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        The new remote can be cloned from another remote-entity identifier in `clone_from`. All applicable configuration
        will be copied, except a new remote name must be specified. The `icon` and `description` fields can still be
        specified and will override the copied data. The `options.codeset_id` is not allowed when cloning data.
      operationId: createRemote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteCreate'
            examples:
              create with existing code set:
                value:
                  name:
                    en: My new remote
                  codeset_id: ir.manufacturer.123
              crate with custom code set (default device type & manufacturer):
                value:
                  name:
                    en: My custom remote
                  custom_codeset:
                    device_name: My device
              'remote with icon, description and custom code set':
                value:
                  name:
                    en: My custom remote
                  icon: 'uc:movie'
                  description:
                    en: Testing the custom code set feature
                  custom_codeset:
                    manufacturer_id: custom
                    device_name: My device
                    device_type: various
              clone:
                value:
                  name:
                    en: My cloned remote
                  clone_from: uc.main.remote.my-other-remote
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remote'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - remotes
      summary: Delete all remote-entities.
      description: |
        ‚ö†Ô∏è All defined entities will be irrevocably deleted!
      operationId: deleteAllRemotes
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/remotes/{entityId}':
    get:
      tags:
        - remotes
      summary: Get a remote-entity by its entity_id.
      description: |
        Returns all the information required to manage an existing remote.
      operationId: getRemote
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remote'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update a remote-entity.
      operationId: updateRemote
      description: |
        Update one or multiple properties of a remote-entity. The omitted properties are ignored and not deleted.
        To clear an array simply provide an empty array.

        - Button mappings are configured with the dedicated `/remotes/{entityId}/buttons` and
          `/remote/{entityId}/buttons/{button}` endpoints.
        - The user interface is configured with the dedicated `/remotes/{entityId}/ui`, `/remotes/{entityId}/ui/pages`
          and `/remotes/{entityId}/ui/pages/{pageId}` endpoints.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing remote-entity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteUpdate'
            examples:
              'Name, icon and description':
                value:
                  name:
                    en: New remote name
                  icon: 'uc:tv'
                  description:
                    en: Updated description
              Output emitter:
                value:
                  options:
                    ir:
                      output:
                        device_id: sim.1
                        port_id: '4'
              Infrared code set (NOT YET IMPLEMENTED):
                value:
                  options:
                    ir:
                      codeset:
                        id: lg3
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remote'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Delete a remote-entity.
      description: |
        ‚ö†Ô∏è The given entity is irrevocably deleted.
      operationId: deleteRemote
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ir':
    get:
      tags:
        - remotes
      summary: Get the infrared dataset of the remote-entity.
      description: |
        Returns all the information required to manage the infrared dataset.
      operationId: getRemoteIrDataSet
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrDataSet'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ir/{cmdId}':
    post:
      tags:
        - remotes
      summary: Add a custom infrared command to the codeset.
      operationId: addRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/cmd_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: '#/components/schemas/IrCodeValue'
                format:
                  $ref: '#/components/schemas/IrCodeFormat'
              required:
                - value
                - format
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - remotes
      summary: Gets an infrared code in the codeset.
      description: |
        Returns the details of a given infrared command.
      operationId: getRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - name: cmdId
          in: path
          description: IR command identification.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update an infrared command in the codeset.
      operationId: updateRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - name: cmdId
          in: path
          description: IR command identification.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: '#/components/schemas/IrCodeValue'
                format:
                  $ref: '#/components/schemas/IrCodeFormat'
              required:
                - value
                - format
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Delete a custom ir code or reset a modified manufacturer code in the codeset.
      operationId: deleteOrResetRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - name: cmdId
          in: path
          description: IR command identification.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/buttons':
    get:
      tags:
        - remotes
      summary: Get the physical button mappings.
      operationId: getRemoteButtonMappings
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
              example:
                - button: DPAD_DOWN
                  short_press:
                    cmd_id: CURSOR_DOWN
                  long_press:
                    cmd_id: BACK
                - button: DPAD_MIDDLE
                  short_press:
                    cmd_id: CURSOR_ENTER
                - button: DPAD_LEFT
                  short_press:
                    cmd_id: CURSOR_LEFT
                - button: DPAD_RIGHT
                  short_press:
                    cmd_id: CURSOR_RIGHT
                - button: DPAD_UP
                  short_press:
                    cmd_id: CURSOR_UP
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Reset the physical button mappings to their default state.
      description: |
        An automatic mapping of common functions to the physical buttons is performed. This depends on the chosen IR codeset
        if e.g. the volume up & down keys are automatically mapped.

        ‚ö†Ô∏è The previous customization of the physical button mapping is irrevocably deleted.
      operationId: resetRemoteButtonMappings
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
              example:
                - button: BACK
                  short_press:
                    cmd_id: BACK
                - button: DPAD_DOWN
                  short_press:
                    cmd_id: CURSOR_DOWN
                - button: DPAD_MIDDLE
                  short_press:
                    cmd_id: CURSOR_ENTER
                - button: DPAD_LEFT
                  short_press:
                    cmd_id: CURSOR_LEFT
                - button: DPAD_RIGHT
                  short_press:
                    cmd_id: CURSOR_RIGHT
                - button: DPAD_UP
                  short_press:
                    cmd_id: CURSOR_UP
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/buttons/{buttonId}':
    get:
      tags:
        - remotes
      summary: Get a physical button mapping.
      operationId: getRemoteButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMapping'
              example:
                button: DPAD_DOWN
                short_press:
                  cmd_id: HOME
                long_press:
                  cmd_id: MENU
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update a physical button mapping.
      description: |
        Update the button mapping for either a short- or a long-press.

        ‚ö†Ô∏è In the EntityCommand object the `entity_id` may not be specified. A remote-entity always operates on its own
        commands. If you want to control other entities, an activity must be used.
      operationId: updateRemoteButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    short_press:
                      $ref: '#/components/schemas/EntityCommand'
                  required:
                    - short_press
                - type: object
                  properties:
                    long_press:
                      $ref: '#/components/schemas/EntityCommand'
                  required:
                    - long_press
            examples:
              short button press:
                value:
                  short_press:
                    cmd_id: HOME
              long button press:
                value:
                  long_press:
                    cmd_id: MENU
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMapping'
              example:
                button: DPAD_DOWN
                short_press:
                  cmd_id: HOME
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Remove a physical button mapping.
      description: |
        ‚ö†Ô∏è The previous customization of the physical button mapping is irrevocably deleted.
      operationId: deleteRemoteButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
              example:
                - button: DPAD_MIDDLE
                  short_press:
                    cmd_id: CURSOR_ENTER
                - button: DPAD_LEFT
                  short_press:
                    cmd_id: CURSOR_LEFT
                - button: DPAD_RIGHT
                  short_press:
                    cmd_id: CURSOR_RIGHT
                - button: DPAD_UP
                  short_press:
                    cmd_id: CURSOR_UP
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ui':
    get:
      tags:
        - remotes
      summary: Get the user interface definition of a remote-entity.
      description: |
        Returns all the information required to manage an existing remote user interface.

        At the moment a user interface only consists of pages.
      operationId: getRemoteUi
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterface'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Reset a remote user interface to its default state.
      description: |
        ‚ö†Ô∏è The customization of the remote user interface is irrevocably deleted.
      operationId: deleteRemoteUi
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterface'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ui/pages':
    post:
      tags:
        - remotes
      summary: Create a new user interface page
      description: |
        Append a new empty page to the user interface pages. The new page identifier is returned in the response.

        The payload fields are optional. A page name and the items of the page can be specified, or later be added with 
        `PATCH /remotes/{entityId}/ui/pages/{pageId}`.

        ‚ö†Ô∏è If the user interface items with `command` objects are specified, then the `EntityCommand` structure may not
        contain an `entity_id` field. A remote-entity always operates on itself.
      operationId: createRemoteUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUserInterfacePageUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_id:
                    $ref: '#/components/schemas/SimpleId'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - remotes
      summary: Get the user interface pages of a remote-entity.
      operationId: getRemoteUiPages
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update the remote user interface page order.
      operationId: updateRemoteUiPageOrder
      description: |
        Reorder the pages in the user interface according to the page identifiers in the `page_order` array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page_order:
                  type: array
                  items:
                    $ref: '#/components/schemas/SimpleId'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Reset the remote user interface pages to the default state.
      description: |
        The default page(s) is created and the page array returned.

        ‚ö†Ô∏è The customization of the remote user interface is irrevocably deleted.
      operationId: resetRemoteUiPages
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ui/pages/{pageId}':
    get:
      tags:
        - remotes
      summary: Get the user interface page definition of a remote-entity.
      operationId: getRemoteUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update a remote user interface page.
      operationId: updateRemoteUiPage
      description: |
        Update one or multiple properties of a remote user interface page. The omitted properties are ignored and not deleted.
        To clear an array simply provide an empty array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      requestBody:
        description: Properties to update in the existing remote user interface page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUserInterfacePageUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterfacePage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Delete a remote user interface page.
      description: |
        The given page is removed and the array of remaining pages is returned.

        ‚ö†Ô∏è The customization of the remote user interface page is irrevocably deleted.
      operationId: deleteRemoteUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /profiles:
    post:
      tags:
        - profiles
      summary: Create a new profile.
      description: |
        The `profile_id` property is optional and auto-generated if not specified. Otherwise it needs to be a unique profile
        identifier.  
        If a `pin` is specified the profile will be protected. A protected profile can only be accessed with the profile specific pin code.
      operationId: createProfile
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
            examples:
              Simple profile:
                value:
                  name: My profile
              Profile with an icon:
                value:
                  name: My profile
                  icon: 'uc:star'
              Profile with a pin:
                value:
                  name: My secure profile
                  icon: 'uc:star'
                  pin: 1234
        required: true
      responses:
        '201':
          description: Successful operation returning the profile identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    put:
      tags:
        - profiles
      summary: Switch active profile.
      operationId: switchProfile
      parameters:
        - name: active_profile_id
          in: query
          description: Active profile identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - profiles
      summary: Get all profiles or the active profile.
      operationId: getProfiles
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profiles'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    delete:
      tags:
        - profiles
      summary: Delete all profiles.
      operationId: deleteAllProfiles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/profiles/{profileId}':
    get:
      tags:
        - profiles
      summary: Get profile.
      operationId: getProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a profile.
      description: |
        Update one or multiple properties of a profile. A missing property will not update its current value.  
        - `profile_id` is mandatory and can't be changed.
        - an empty `icon` value removes an existing icon identifier.
        - an empty `pin` value removes an existing pin code.
        - a missing `pages` property will not change the page order.
        - ‚ö†Ô∏è an empty `pages` array removes all pages and groups in the profile!
        - ‚ö†Ô∏è missing page identifiers in the `pages` array will remove the page configuration!
      operationId: updateProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Properties to update in the existing profile.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete profile.
      operationId: deleteProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/pages':
    post:
      tags:
        - profiles
      summary: Create a new page in the profile.
      operationId: createPage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageCreate'
            examples:
              Simple page:
                value:
                  name: My page
              New page at the first position:
                value:
                  name: Favorites
                  pos: 1
              New page with items:
                value:
                  name: My other page
                  items:
                    - entity_id: switch1
                    - entity_id: mediaplayer1
                    - entity_id: blind1
                    - group_id: 'def:g2'
        required: true
      responses:
        '201':
          description: Successful operation returning the page identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    get:
      tags:
        - profiles
      summary: Get all pages of the profile.
      operationId: getPagesInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete all pages of the profile.
      operationId: deleteAllPagesInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/pages/{pageId}':
    get:
      tags:
        - profiles
      summary: Get a page of the profile
      operationId: getPage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a page.
      operationId: updatePage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Properties to update in the existing page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageUpdate'
            examples:
              Rename page:
                value:
                  name: A better name
              Rearrange items:
                value:
                  items:
                    - entity_id: mediaplayer1
                    - group_id: 'def:g2'
                    - entity_id: blind1
                    - entity_id: switch1
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete a page of the profile.
      operationId: deletePage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/groups':
    post:
      tags:
        - profiles
      summary: Create a new group in the profile.
      operationId: createGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '201':
          description: Successful operation returning the page identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    get:
      tags:
        - profiles
      summary: Get all groups of the profile.
      operationId: getGroupsInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete all groups of the profile.
      operationId: deleteAllGroupsInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/groups/{groupId}':
    get:
      tags:
        - profiles
      summary: Get a group in the profile.
      operationId: getGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a group.
      operationId: updateGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/profile_pin'
      requestBody:
        description: Properties to update in the existing group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete a group of the profile.
      operationId: deleteGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/profile_pin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /cfg:
    get:
      tags:
        - cfg
      summary: Get all configuration settings.
      description: |
        Retrieve all system configuration settings at once. Updating a configuration setting must be performed with the
        corresponding endpoint.
      operationId: getAllSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgAll'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    delete:
      tags:
        - cfg
      summary: Reset all settings to default values.
      description: |
        This resets all system configuration settings to factory defaults. Integration & profile settings are not affected.
      operationId: resetAllSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgAll'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/button:
    get:
      tags:
        - cfg
      summary: Get button settings.
      description: |
        Button backlight configuration.
      operationId: getButtonSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgButtons'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify button settings.
      description: |
        Change one or multiple button backlight settings.
      operationId: updateButtonSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgButtons'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgButtons'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device:
    get:
      tags:
        - cfg
      summary: Get remote device settings.
      description: |
        The remote device settings contain the custom name of the remote.
      operationId: getRemoteDeviceSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgRemoteDevice'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify remote device settings.
      description: |
        Change one or multiple remote device settings.
      operationId: updateRemoteDeviceSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgRemoteDevice'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgRemoteDevice'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device/button_layout:
    get:
      tags:
        - cfg
      summary: Get the button layouts of the device.
      description: |
        Meta-information about the button groups and button layouts.
      operationId: getRemoteDeviceButtonLayoutSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceButtonLayout'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device/icon_mapping:
    get:
      tags:
        - cfg
      summary: Get the native icon mapping of the device.
      description: |
        Meta-information about the native icon mappings. These are the icon identifiers prefixed with `uc:`, e.g. `uc:cool`.
        The remaining label is mapped to a unicode number in the icon font. For `uc:cool` the mapping will be: (`cool`, `\uE91E`)

        Note: the example response omits the leading backslash to avoid character substitution in the browser!
      operationId: getRemoteDeviceIconMapping
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Label -> Unicode map
                type: object
                additionalProperties:
                  type: string
              example:
                cool: uE91E
                heat: uE91F
                home: uE900
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/display:
    get:
      tags:
        - cfg
      summary: Get display settings.
      description: |
        Display brightness and auto brightness configuration.
      operationId: getDisplaySettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgDisplay'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify display settings.
      description: |
        Change one or multiple display settings.
      operationId: updateDisplaySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgDisplay'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgDisplay'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/entity/commands:
    get:
      tags:
        - cfg
      summary: Get entity command definitions.
      description: |
        Meta-information about the entity commands.
      operationId: getEntityCommandMetadata
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityCommandMetadata'
              example:
                - id: button.press
                  cmd_id: press
                  name:
                    en: Press
                    de: Bet√§tigen
                - id: switch.on
                  cmd_id: 'on'
                  name:
                    en: 'On'
                    de: Ein
                - id: switch.off
                  cmd_id: 'off'
                  name:
                    en: 'Off'
                    de: Aus
                - id: switch.toggle
                  cmd_id: toggle
                  name:
                    en: Toggle
                    de: Umschalten
                - id: light.on
                  cmd_id: 'on'
                  name:
                    en: Turn on
                    de: Einschalten
                - id: light.off
                  cmd_id: 'off'
                  name:
                    en: Turn off
                    de: Ausschalten
                - id: light.toggle
                  cmd_id: toggle
                  name:
                    en: Toggle state
                    de: Umschalten
                - id: light.dim
                  cmd_id: 'on'
                  name:
                    en: Set brightness
                    de: Setze Helligkeit
                  params:
                    - name:
                        en: brightness
                        de: Helligkeit
                      param: brightness
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
                - id: light.color_temperature
                  cmd_id: 'on'
                  name:
                    en: Set color temperature
                    de: Setze Farbtemperatur
                  params:
                    - name:
                        en: Color temperature
                        de: Farbtemperatur
                      param: color_temperature
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
                - id: light.color
                  cmd_id: 'on'
                  name:
                    en: Set color
                    de: Setze Farbe
                  params:
                    - name:
                        en: Hue
                        de: Farbton
                      param: hue
                      type: int
                      min: 0
                      max: 360
                      step: 1
                      unit: ¬∞
                    - name:
                        en: saturation
                        de: Farbs√§ttigung
                      param: saturation
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/haptic:
    get:
      tags:
        - cfg
      summary: Get haptic settings.
      description: |
        Haptic configuration.
      operationId: getHapticSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgHaptic'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify haptic settings.
      description: |
        Change one or multiple haptic settings.
      operationId: updateHapticSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgHaptic'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgHaptic'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization:
    get:
      tags:
        - cfg
      summary: Get localization settings.
      description: |
        Retrieve the language and region configuration.
      operationId: getLocalizationSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgLocalization'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify localization settings.
      description: |
        Change one or multiple localization settings.
      operationId: updateLocalizationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgLocalization'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgLocalization'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/tz_names:
    get:
      tags:
        - cfg
      summary: Get all available time zone names.
      operationId: getTimezoneNames
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/countries:
    get:
      tags:
        - cfg
      summary: Get all available countries.
      operationId: getLocalizationCountries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      $ref: '#/components/schemas/CountryCode'
                    name_en:
                      description: |
                        Country name in english. Native country names will be provided in additional `name_<language_code>`
                        properties.
                      type: string
                  additionalProperties: true
                  required:
                    - code
                    - name_en
              example:
                - code: CH
                  name_de: Schweiz
                  name_en: Switzerland
                  name_fr: Suisse
                  name_it: Svizzera
                - code: DE
                  name_de: Deutschland
                  name_en: Germany
                - code: DK
                  name_dk: Danmark
                  name_en: Denmark
                - code: HU
                  name_en: Hungary
                  name_hu: Magyarorsz√°g
                - code: NL
                  name_en: Netherlands
                  name_nl: Nederland
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/translations:
    get:
      tags:
        - cfg
      summary: Get all available translations.
      description: |
        The available translations are provided from the UI application.  
        Future UI versions might provide new or updated translations.
      operationId: getTranslations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  translations:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          $ref: '#/components/schemas/LanguageCode'
                        name:
                          type: string
                      required:
                        - code
                        - name
                required:
                  - version
                  - translations
              example:
                version: default
                translations:
                  - code: da_DK
                    name: Dansk
                  - code: de_DE
                    name: Deutsch
                  - code: de_CH
                    name: Schwiizert√º√ºtsch
                  - code: fr_CH
                    name: Fran√ßais (Suisse)
                  - code: it_CH
                    name: Italiano (Svizzera)
                  - code: hu_HU
                    name: Magyar
                  - code: nl_NL
                    name: Nederlands
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/network:
    get:
      tags:
        - cfg
      summary: Get network settings.
      description: |
        Language and region configuration.
      operationId: getNetworkSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgNetwork'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify network settings.
      description: |
        Change one or multiple network settings.
      operationId: updateNetworkSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgNetwork'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgNetwork'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/power_saving:
    get:
      tags:
        - cfg
      summary: Get power settings.
      description: |
        Sleep timeout and wakeup sensitivity configuration.
      operationId: getPowerSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgPowerSaving'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify power settings.
      description: |
        Change one or multiple power saving settings.
      operationId: updatePowerSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgPowerSaving'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgPowerSaving'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/software_update:
    get:
      tags:
        - cfg
      summary: Get software update settings.
      description: |
        Software update configuration.
      operationId: getSoftwareUpdateSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSoftwareUpdate'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify software update settings.
      description: |
        Change one or multiple software update settings.
      operationId: updateSoftwareUpdateSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgSoftwareUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSoftwareUpdate'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/sound:
    get:
      tags:
        - cfg
      summary: Get sound settings.
      description: |
        Sound configuration.
      operationId: getSoundSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSound'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify sound settings.
      description: |
        Change one or multiple sound settings.
      operationId: updateSoundSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgSound'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSound'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/voice_control:
    get:
      tags:
        - cfg
      summary: Get voice control settings.
      description: |
        Voice control configuration.
      operationId: getVoiceControlSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgVoiceControl'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify voice control settings.
      description: |
        Change one or multiple voice control settings.
      operationId: updateVoiceControlSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgVoiceControl'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgVoiceControl'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/voice_control/voice_assistants:
    get:
      tags:
        - cfg
      summary: Get available voice assistants.
      operationId: getVoiceAssistants
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /docks:
    head:
      tags:
        - dock
      summary: Get total number of configured docks.
      description: |
        By default only active docks are counted. This can be changed with the `active` query parameter.
      operationId: getDockCount
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - dock
      summary: List configured docks and their connection state.
      description: |
        Returns all dock configuration with paging. The configuration data is enriched with current connection information.
        Use the `HEAD` operation to retrieve the total number of defined docking stations.

        By default only active docks are returned. This can be changed with the `active` query parameter.
      operationId: getDocks
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfigurations'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: Create a new dock configuration.
      description: |
        Manually create and persist a new dock configuration. This is a low-level operation without configuring and setting
        up the dock as with the `/docks/setup` endpoints! To establish a session to the dock, the connect operation must be
        called afterwards.  
        - Error `422` is returned if the given service name in `dock_id` already exists.
        - If `custom_ws_url` is not specified, the dock address is resolved through an mDNS service name lookup in `dock_id`.   
        - The `active` flag specifies if the dock will react to connection requests.
        - Non-active docks will not auto-connect and must be enabled first to be used.
        - Non-active docks won't be visible in the web-configurator.
        - If no `token` is provided the default token is used! The token is used to authenticate the WebSocket
          connection once a connection to the dock is established. To change an existing token, use the 
          `PATCH /docks/devices/:dockId` operation.
        - If `model` is provided it must be one of the known dock model identifiers: `UCD2` or `YIO1DOCK`.
      operationId: createDock
      requestBody:
        description: Client information requesting access
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockConfigurationRequest'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    put:
      tags:
        - dock
      summary: Connect or disconnect all active dock connections.
      description: |
        Requests all active docks to establish or stop a session to the dock.  
        Use `GET /docks` or `GET /docks/devices/{dockId}` to check on the connection status.
      operationId: executeCommandOnAllDocks
      parameters:
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - dock
      summary: Delete all dock configurations.
      description: |
        ‚ö†Ô∏è All defined dock configurations will be irrevocably deleted!

        Active dock sessions will be disconnected and the persisted dock configurations removed.
      operationId: deleteAllDocks
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /docks/discover:
    get:
      tags:
        - dock
      summary: Get docking station discovery status.
      description: |
        Returns the current discovery status and any discovered docks.

        Use the DELETE operation to stop an active discovery and PUT to start a new discovery.
      operationId: getDockDiscoveryStatus
      responses:
        '200':
          description: Dock discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockDiscoveryStatus'
              example:
                active: true
                docks:
                  - id: UC-Dock-E831CDD012A8
                    configured: false
                    friendly_name: Living room
                    address: '192.168.1.106:946'
                    model: UCD2
                    version: 0.1.0
                    discovery_type: NET
                    timestamp: '2022-11-07T07:46:04.370629Z'
                  - id: sim.1
                    configured: false
                    friendly_name: Simulated dock
                    address: '127.0.0.1:946'
                    version: 0.1.2
                    discovery_type: NET
                    timestamp: '2022-11-07T07:46:05.245759Z'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    put:
      tags:
        - dock
      summary: Start discovery of new docking stations.
      description: |
        Start device discovery over Bluetooth and mDNS. Bluetooth or network discovery can be disabled with a query
        parameter. By default the discovery automatically stops after 30 seconds. Use the GET status request to check on
        discovered devices or DELETE to stop discovery.

        By default only new network devices are returned. If a dock is already configured it will be omitted from the
        results, unless the query parameter `new=false` is set. Docks with Bluetooth enabled are always returned, since
        this usually means that the dock needs to be re-configured.

        - Emits the WebSocket event `dock_discovery` with `event_type: START` when discovery starts.
        - For each discovered device the WebSocket event `dock_discovery` with `event_type: DISCOVER` is emitted.
        - This operation clears any old discovered devices and won't be accessible anymore with the GET operation.
      operationId: startDockDiscovery
      parameters:
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 30
            minimum: 1
            maximum: 300
        - name: bt
          in: query
          description: Use Bluetooth to discover new docks.
          required: false
          schema:
            type: boolean
            default: true
        - name: net
          in: query
          description: Query network to discover new docks.
          required: false
          schema:
            type: boolean
            default: true
        - name: new
          in: query
          description: 'Only return new devices, filter out already configured docks.'
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Stop discovery of new docking stations.
      description: |
        Stops the device discovery. The current discovery status is returned in the response. Already discovered devices
        won't be returned and can still be retrieved with the GET operation.

        Emits the WebSocket event `dock_discovery` with `event_type: STOP`.
      operationId: stopDockDiscovery
      responses:
        '200':
          description: Dock discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockDiscoveryStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/docks/discover/{dockId}':
    get:
      tags:
        - dock
      summary: Get docking station discovery device status.
      description: |
        Returns the discovered docking station device.
      operationId: getDockDiscoveryDeviceStatus
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Dock discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockDiscoveryStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - dock
      summary: Execute command on a discovered docking station.
      description: |
        Perform a WebSocket connection test with a discovered docking station. If the dock requires an API token, it must
        be specified in the request body.  
        The `IDENTIFY` command also blinks the status LED on the dock.

        Response status codes:
        - `200`: successful operation: the connection test was successful and docking station metadata could be retrieved.
        - `404`: discovered dock with `dock_id` not found. Check if the discovery result is still available and has not
                 been deleted. This can happen after a timeout since the discovery, or if the discovery result has been
                 cleared with `DELETE /docks/discover`.
        - `503`: docking station connection could not be established.
      operationId: executeCommandOnDiscoveredDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECTION_TEST
              - IDENTIFY
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 5
            minimum: 3
            maximum: 60
      requestBody:
        required: false
        description: Command payload
        content:
          application/json:
            schema:
              description: Driver connection parameters.
              type: object
              properties:
                connection:
                  type: object
                  properties:
                    token:
                      description: |
                        Optional dock authentication token.
                      type: string
                      maxLength: 40
      responses:
        '200':
          description: Dock system information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockSystemInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /docks/setup:
    get:
      tags:
        - dock
      summary: Get current dock setup processes.
      description: |
        Return a list of all active setup process identifiers. The returned ids can be used with the
        `/docks/setup/:id` endpoints to continue or abort a setup process.
      operationId: getDockSetupProcesses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - dock
      summary: Start setting up a new docking station.
      description: |
        Create a new setup process from a discovered dock or from a manually provided dock address.

        - If there's already a setup process running for the given dock id, status code `409` is returned.
        - Emits the WebSocket event `dock_setup_change` with `event_type: START` when this operation returns `201`.

        Start setup from dock discovery:
        - The required request data can be obtained from the `/api/docks/discover` endpoints when searching for docking
          stations over Bluetooth or Ethernet. Simply provide the returned `DockDiscovery` data object (which is a super
          set of the required data to start a setup process).
        - The returned `id` in the `DockSetupInfo` response will be the identifier for the next `PUT /docks/setup/:id`
          call to provide additional data.

        Manual setup:
        - A dock identifier will automatically be created and returned in `DockSetupInfo`.
        - The dock must be reachable on the network with the provided `custom_ws_url` and optional `token`. Otherwise,
          status code `503` is returned.
        - The setup process is automatically started after a successful POST request, no call to `PUT /docks/setup/:id`
          is required.

        Response status codes:
        - `201`: setup process successfully started. Use `GET /docks/setup/:id` to poll for status updates, or listen to
           WebSocket `dock_setup_change` event messages.
        - `400`: invalid data in request body.
        - `409`: a setup process is already running. Either wait until finished, or abort it.
        - `503`: service not available to setup docking station.  
           E.g. Bluetooth is disabled and therefore the docking station cannot be setup over Bluetooth. Either enable
           Bluetooth or setup the dock over Ethernet.
      operationId: createDockSetup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDockSetup'
            examples:
              From dock discovery:
                value:
                  discovery:
                    id: UC-Dock-E831CDD012A8
                    friendly_name: Living room
                    address: '192.168.1.106:946'
                    model: UCD2
                    version: 0.1.0
                    discovery_type: NET
              Manually:
                value:
                  manually:
                    name: Living room
                    token: '0000'
                    custom_ws_url: 192.168.1.106
              Manually with WiFi:
                value:
                  manually:
                    name: Living room
                    token: '0000'
                    custom_ws_url: 192.168.1.106
                    wifi:
                      ssid: My network
                      password: don't tell anyone
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockSetupInfo'
              example:
                id: UC-Dock-E831CDD012A8
                name: Living room
                discovery_type: NET
                state: NEW
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Abort and remove all setup processes.
      description: |
        Stop all setup processes at the next possible operation and remove all setup process information.
      operationId: stopAllDockSetups
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/docks/setup/{dockId}':
    get:
      tags:
        - dock
      summary: Get docking station setup status.
      description: |
        Poll operation to retrieve the current docking station setup state. See the `state` and `error` fields in the
        response message. There are also WebSocket `dock_setup_change` event messages for state changes to avoid polling.

        Defined setup states:
        - `NEW`: setup has not yet been started. Use the `PUT` operation to provide the required data and to start setting up the dock.
        - `CONFIGURING`: setup data is currently being transferred to the dock.
        - `RESTARTING`: dock has been configured and is restarting to integrate into the network.
        - `OK`: setup process has been completed successfully, the dock can now be used.
        - `ERROR`: the setup process failed. Check the `error` field for more information.
      operationId: getDockSetupStatus
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockSetupInfo'
              example:
                id: UC-Dock-E831CDD012A8
                name: Living room
                model: UCD2_VIRTUAL
                discovery_type: NET
                state: OK
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - dock
      summary: Setup docking station.
      description: |
        Set required data to start the setup process and configure the docking station.
        When using Bluetooth the WiFi network name and credentials must be provided to connect the dock to the WiFi network.

        The `state` field in the response message indicate the current state of the setup process. Use the `GET` operation
        to poll for state updates or listen to the corresponding WebSocket `dock_setup_change` event messages with
        `event_type: SETUP`.
      operationId: startDockSetup
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockSetup'
            example:
              name: Living room
              token: '123'
              description: Setup test
              wifi:
                ssid: My Network
                password: 0123456789
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockSetupInfo'
              example:
                id: UC-Dock-E831CDD012A8
                name: Living room
                model: UCD2
                discovery_type: NET
                state: CONFIGURING
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Abort the dock setup process.
      description: |
        Stop the setup process at the next possible operation and remove the setup process information.  
        To start a new setup process, use the `POST /docks/setup` operation again.

        Emits the WebSocket event `dock_setup_change` with `event_type: STOP`.
      operationId: stopDockSetup
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/devices/{dockId}':
    get:
      tags:
        - dock
      summary: Get dock configuration.
      description: |
        Returns the dock configuration, enriched with the current session information if a dock connection is established.
      operationId: getDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
              example:
                dock_id: UC-Dock-E831CDD012A8
                name: Living room
                resolved_ws_url: 'ws://UC-Dock-E831CDD012A8:946'
                active: true
                model: UCD2
                state: CONNECTED
                learning_active: false
                description: Setup test
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - dock
      summary: Change dock configuration like auto-connect or access token.
      description: |
        Update one or more dock fields.

        - If the dock is in an `active` connection state, then the `name`, `token` and `wifi` values are persisted in the
          dock if provided in the request. The request fails with `503` service unavailable if the configuration can't be
          set in the docking station.
        - If the dock is not active, the values are only stored in the remote. A changed `token` will be used for the next
          connection attempt.
      operationId: updateDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: 'Fields to update, omit the ones without change.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockUpdateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - dock
      summary: Start or stop a dock connection.
      description: |
        Establish or stop a session to the dock.  
        Use `GET /docks` or `GET /docks/devices/{dockId}` to check on the connection status.
      operationId: dockConnectionCommand
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Delete dock configuration.
      description: |
        ‚ö†Ô∏è The dock configuration will be irrevocably deleted!

        An active dock session will be disconnected and the persisted dock configuration removed.
      operationId: deleteDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/devices/{dockId}/command':
    post:
      tags:
        - dock
      summary: Send a dock command.
      description: |
        The following `command` values are defined:
        - `SET_LED_BRIGHTNESS`: set the maximum brightness of the front indicator LED. Set the `0..100` percentage as
           string parameter in the `value` field.  
        - `IDENTIFY`: identify the dock with blinking the indicator LED.
        - `REMOTE_LOW_BATTERY`: trigger the low battery status indicator on the dock.
        - `REMOTE_CHARGED`: trigger the remote charged indicator on the dock.
        - `REMOTE_NORMAL`: trigger the normal remote operation mode on the dock.
        - `REBOOT`: reboot the dock.
        - `RESET`: ‚ö†Ô∏è factory reset the dock. Requires administrator privileges.  
           The dock configuration will be deleted from the remote.
      operationId: dockCommand
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: Dock command
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  type: string
                  enum:
                    - SET_LED_BRIGHTNESS
                    - IDENTIFY
                    - REMOTE_LOW_BATTERY
                    - REMOTE_CHARGED
                    - REMOTE_NORMAL
                    - REBOOT
                    - RESET
                value:
                  description: Command parameter value. Required for `SET_LED_BRIGHTNESS`.
                  type: string
              required:
                - command
            examples:
              Set LED brightness to 50%:
                value:
                  command: SET_LED_BRIGHTNESS
                  value: '50'
              Set LED brightness to maximum:
                value:
                  command: SET_LED_BRIGHTNESS
                  value: '100'
              Identify the dock:
                value:
                  command: IDENTIFY
              Trigger low battery indicator:
                value:
                  command: REMOTE_LOW_BATTERY
              Trigger remote charged indicator:
                value:
                  command: REMOTE_CHARGED
              Reboot the dock:
                value:
                  command: REBOOT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/devices/{dockId}/update':
    get:
      tags:
        - dock
      summary: Check for dock firmware updates.
      description: |
        Check if there is an update available for the dock.

        This operation will use the cached update information from the software update cloud service, which runs
        periodically to check for available updates and independently from this operation.  
        The returned `update_check_enabled` flag indicates if the online update check is enabled or not.

        If `update_id` is set then an update is currently in progress and can be monitored either with listening to the
        WebSocket `dock_update_change` event messages or polling the status with the
        `GET /docks/devices/{dockId}/update/{id}` operation.
      operationId: checkDockFirmwareUpdate
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockUpdateCheck'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: Update dock firmware.
      description: |
        Start a firmware update on the given dock. The returned update identifier can be used to poll for the update 
        progress with the `GET /docks/devices/{dockId}/update/{id}` operation or listen to the WebSocket
        `dock_update_change` event message.

        Response codes:
        - `409`: Conflict, an update is already running. Use the `GET` operation to retrieve the current update identifier.
        - `503`: The dock is not connected, or the update service is unavailable. Please try again later.
      operationId: updateDockFirmware
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '201':
          description: Firmware update started
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Abort the dock firmware update.
      description: |
        Stop the firmware update process at the next possible operation and remove the update process information.

        Emits the WebSocket event `dock_update_change` with `event_type: STOP`
      operationId: stopDockFirmwareUpdate
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/devices/{dockId}/update/{id}':
    get:
      tags:
        - dock
      summary: Check for dock firmware update progress.
      description: |
        Get the current progress and status information about a dock firmware upgrade.

        Instead of using polling one can also listen to the WebSocket `dock_update_change` event messages.
      operationId: dockFirmwareUpdateProgress
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: id
          in: path
          description: Update identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockUpdateProgress'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/docks/devices/{dockId}/ir/send':
    get:
      tags:
        - dock
      summary: "\U0001F477 Test IR command."
      description: |
        **Work in progress.**

        Test function for sending IR commands. The IR code can either be in Pronto format or Hex.
        If no output is specified, the code will only be emitted from the dock.
      operationId: sendIrTest
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: int1
          in: query
          description: Main internal ir blaster
          schema:
            type: boolean
        - name: int2
          in: query
          description: 'Second internal ir blaster. V2 dock: top'
          schema:
            type: boolean
        - name: ext1
          in: query
          description: External IR blaster 1
          schema:
            type: boolean
        - name: ext2
          in: query
          description: External IR blaster 2
          schema:
            type: boolean
        - name: pronto
          in: query
          description: 'Pronto IR code, values separated by comma'
          required: false
          schema:
            type: string
            pattern: '^[a-fA-F0-9]{4}(,[a-fA-F0-9]{4}){3,}$'
        - name: hex
          in: query
          description: Hex IR code
          required: false
          schema:
            type: string
            pattern: '^[\d]{1,3};0x[a-fA-F0-9]{1,16};[\d]{1,2};[\d]{1,2}$'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: "\U0001F477 Send IR command."
      description: |
        **Work in progress.**

        Send an IR command, either in Pronto or [IRremoteESP8266 Hex](https://github.com/crankyoldgit/IRremoteESP8266) format.

        Hex format: `<protocol>,<hex-ir-code>,<bits>,<repeat-count>`
        - protocol: numeric value from supported and enabled protocols. See: [decode_type_t](https://github.com/crankyoldgit/IRremoteESP8266/blob/v2.8.0/src/IRremoteESP8266.h#L866)
        - hex-ir-code: HEX value prefixed with `0x`
        - bits: number of bits in hex value
      operationId: sendIr
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: IR command
        content:
          application/json:
            schema:
              type: object
              properties:
                int1:
                  description: Main internal ir blaster
                  type: boolean
                int2:
                  description: 'Second internal ir blaster. V2 dock: top'
                  type: boolean
                ext1:
                  description: External IR blaster 1
                  type: boolean
                ext2:
                  description: External IR blaster 2
                  type: boolean
                pronto:
                  description: 'Pronto IR code, values separated by space or comma'
                  type: string
                  pattern: '^[a-fA-F0-9]{4}((,| )[a-fA-F0-9]{4}){3,}$'
                hex:
                  description: Hex IR code
                  type: string
                  pattern: '^[\d]{1,3};0x[a-fA-F0-9]{1,16};[\d]{1,2};[\d]{1,2}$'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /system:
    get:
      tags:
        - system
      summary: Get system information.
      description: 'Get hardware information about the device like serial number, model number and hardware revision.'
      operationId: getSystemInfo
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - system
      summary: Perform a system command like reboot or power-off.
      description: |
        The following system commands can be executed:

        - `STANDBY`: Put the device into standby mode.
        - `REBOOT`: Reboot the device.
        - `POWER_OFF`: Switch off the device
        - `RESTART`: Restart the application.
      operationId: systemCommand
      parameters:
        - name: cmd
          in: query
          description: System command
          required: true
          schema:
            type: string
            enum:
              - STANDBY
              - REBOOT
              - POWER_OFF
              - RESTART
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/factory_reset:
    get:
      tags:
        - system
      summary: Get factory reset token.
      description: |
        Get a factory reset token to perform a complete factory reset of the remote.

        The token will be valid for 60 seconds. Afterwards, a new token must be requested.  
        Whenever a new token is requested, any old tokens will be invalidated.
      operationId: getFactoryResetToken
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - system
      summary: Perform a factory reset.
      description: |
        A factory reset removes all configuration data and puts the device into a clean state.  

        ‚ö†Ô∏è **Warning:** All user data will be erased and won't be recoverable!

        A reset token must be requested first and provided to perform a factory reset.
      operationId: performFactoryReset
      parameters:
        - name: token
          in: query
          description: Reset token
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/update:
    get:
      tags:
        - system
      summary: Check if system update is available.
      description: |
        Returns the known available system updates.

        System update checks are run automatically (if not disabled in settings). Use the `PUT` operation to force
        an update check.
      operationId: checkSystemUpdate
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableSystemUpdateResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: Force system update check
      operationId: forceSystemUpdateCheck
      description: |
        Contacts the update server to check if a new system update is available.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableSystemUpdateResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/system/update/{updateId}':
    post:
      tags:
        - system
      summary: Perform system update.
      description: |
        Start a system update with the given `updateId` parameter. Use `latest` to use the latest available system update.
      operationId: updateSystem
      parameters:
        - name: updateId
          in: path
          description: Update image identification
          required: true
          schema:
            type: string
            default: latest
      responses:
        '201':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    get:
      tags:
        - system
      summary: Get system update progress.
      operationId: getSystemUpdateProgress
      parameters:
        - name: updateId
          in: path
          description: Update image identification
          required: true
          schema:
            type: string
            default: latest
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemUpdateProgress'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /system/wifi:
    get:
      tags:
        - system
      summary: Get WiFi status.
      operationId: getWifiStatus
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WifiStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: WiFi connection handling.
      description: |
        Perform one of the following commands on the WLAN interface:

        - `DISCONNECT`: Disconnect and wait for `REASSOCIATE` or `RECONNECT` command before connecting again.
        - `RECONNECT`: Connect if disconnected (i.e. like `REASSOCIATE`, but only connect if in disconnected state).
        - `REASSOCIATE`: Force reassociation.
        - `ENABLE_ALL_NETWORKS`: Enable all network connections and start connecting to a network if in disconnected state.
        - `DISABLE_ALL_NETWORKS`: Disable all network connections and disconnect if in connected state.

        ‚ö†Ô∏èAttention: `ENABLE_ALL_NETWORKS` and `DISABLE_ALL_NETWORKS` will persist the state! I.e. if all networks are 
        disabled and the device is restarted afterwards, no WiFi connection will be established.
      operationId: wifiCommand
      parameters:
        - name: cmd
          in: query
          description: Command
          schema:
            $ref: '#/components/schemas/WifiCmd'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /system/wifi/scan:
    get:
      tags:
        - system
      summary: Get discovered WiFi access points.
      description: |
        Returns the current discovery status and any discovered access points.

        Use the DELETE operation to stop an active discovery and PUT to start a new discovery.
      operationId: getWifiScanStatus
      responses:
        '200':
          description: WiFi AP discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApScanStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: Start discovery of WiFi access points.
      description: |
        Request a new BSS scan. A scan usually takes a few seconds and the current state is returned with the GET
        operation, together with the already found access points.
      operationId: startWifiScan
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - system
      summary: Stop discovery of WiFi access points.
      description: |
        Stops the access point discovery. The current discovery status is returned in the response.
      operationId: stopWifiScan
      responses:
        '200':
          description: Dock discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApScanStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /system/wifi/networks:
    get:
      tags:
        - system
      summary: Get configured WiFi networks.
      description: |
        Returns all configured WiFi networks.
      operationId: getAllWifiNetworks
      responses:
        '200':
          description: Configured WiFi networks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedNetworks'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    post:
      tags:
        - system
      summary: Create a new Wifi network configuration.
      operationId: addWifiNetwork
      description: |
        Add a new network configuration for the given SSID.  
        For an open network without password the `password` field must be omitted (do not send an empty password value).

        ‚ö†Ô∏è Only WPA-PSK (pre shared keys) and open networks are supported!
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWifiNetwork'
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - system
      summary: Delete all configured WiFi networks.
      description: |
        Disconnects the WiFi network and removes all network configurations.

        ‚ö†Ô∏è Attention: the network configuration is automatically persisted and the network configuration cannot
        be retrieved anymore!
      operationId: deleteAllWifiNetworks
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/system/wifi/networks/{wifiId}':
    get:
      tags:
        - system
      summary: Get WiFi network configuration.
      description: |
        Returns the configured wifi network.

        Use the DELETE operation to remove and PATCH to edit a network configuration. A new network configuration can be
        created with the POST operation on the `/system/wifi/networks/` resource.
      operationId: getWifiNetwork
      parameters:
        - $ref: '#/components/parameters/wifi_id'
      responses:
        '200':
          description: WiFi network configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedNetwork'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    patch:
      tags:
        - system
      summary: Modify a network configuration.
      description: Change the WiFi network password.
      operationId: modifyWifiNetwork
      parameters:
        - $ref: '#/components/parameters/wifi_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyWifiNetwork'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: WiFi network connection handling.
      description: |
        Perform one of the following commands on a network configuration:
        - `ENABLE`: Enable a network. If no network is connected, it will be tried to connect to this network.
        - `DISABLE`: Disable a network. If the network is currently connected it will be disconnected.
        - `SELECT`: Select the given network and disable all others.

        ‚ö†Ô∏è Attention: all network changes (enabled or disabled) are persisted!
      operationId: wifiNetworkCommand
      parameters:
        - $ref: '#/components/parameters/wifi_id'
        - name: cmd
          in: query
          description: Command
          schema:
            $ref: '#/components/schemas/WifiNetworkCmd'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - system
      summary: Delete a configured WiFi network.
      description: |
        The given network is removed from the configuration and disconnected if currently connected.

        ‚ö†Ô∏è Attention: the network configuration is automatically persisted and the removed network configuration cannot
        be retrieved anymore!
      operationId: deleteWifiNetwork
      parameters:
        - $ref: '#/components/parameters/wifi_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
components:
  parameters:
    api_key_id:
      name: apiKeyId
      in: path
      description: API key identification
      required: true
      schema:
        $ref: '#/components/schemas/ApiKeyId'
    button_id:
      name: buttonId
      in: path
      description: Button identification.
      required: true
      schema:
        $ref: '#/components/schemas/ButtonId'
    cmd_id:
      name: cmdId
      in: path
      description: IR command identification.
      required: true
      schema:
        $ref: '#/components/schemas/IrCodeKey'
    dock_id:
      name: dockId
      in: path
      description: Dock identification
      required: true
      schema:
        $ref: '#/components/schemas/DockId'
    driver_id:
      name: driverId
      in: path
      description: Integration driver identification
      required: true
      schema:
        $ref: '#/components/schemas/DriverId'
    emitter_id:
      name: emitterId
      in: path
      description: Emitter device id.
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    entity_id:
      name: entityId
      in: path
      description: Entity identification.
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
    group_id:
      name: groupId
      in: path
      description: Group identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    integration_id:
      name: intgId
      in: path
      description: Integration identification
      required: true
      schema:
        $ref: '#/components/schemas/IntegrationId'
    ir_key:
      name: key
      in: path
      description: IR command key
      required: true
      schema:
        $ref: '#/components/schemas/IrCodeKey'
    page_id:
      name: pageId
      in: path
      description: Page identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    profile_id:
      name: profileId
      in: path
      description: Profile identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    resource_id:
      name: id
      in: path
      description: Resource identifier
      required: true
      schema:
        type: string
    resource_type:
      name: type
      in: path
      description: Resource type
      required: true
      schema:
        $ref: '#/components/schemas/ResourceType'
    system:
      name: system
      in: path
      description: Identification of the external system. E.g. _homeassistant_.
      required: true
      schema:
        $ref: '#/components/schemas/ExternalSystemId'
    token_id:
      name: tokenId
      in: path
      description: Access token identification
      required: true
      schema:
        $ref: '#/components/schemas/AccessTokenId'
    ui_id:
      name: uiId
      in: path
      description: User interface identification.
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
    wifi_id:
      name: wifiId
      in: path
      description: WiFi network identification
      required: true
      schema:
        type: integer
        minimum: 0
    active:
      name: active
      in: query
      description: Filter by active flag
      required: false
      schema:
        type: boolean
    enabled:
      name: enabled
      in: query
      description: Filter by enabled flag.
      required: false
      schema:
        type: boolean
    entity_type:
      name: entity_type
      in: query
      description: Filter by entity type.
      required: false
      schema:
        $ref: '#/components/schemas/EntityType'
    has_instances:
      name: has_instances
      in: query
      description: |
        Filter if a driver has integration instances or not:
        - true = only consider drivers which have at least one integration instance,
        - false = drivers without instances
        - NONE = any.
      required: false
      schema:
        type: boolean
    instantiable:
      name: instantiable
      in: query
      description: |
        Filter if a driver is instantiable or not:
        - true = only consider drivers which allow new integration instances to be created from. Either single-device drivers
          without an instance, or multi-device drivers.
        - false = only drivers which allow no more instances
        - NONE = any.
      required: false
      schema:
        type: boolean
    intg_id:
      name: intg_id
      in: query
      description: Filter by integration.
      required: false
      schema:
        $ref: '#/components/schemas/IntegrationId'
    resource_type_query:
      name: type
      in: query
      description: Resource type.
      required: false
      schema:
        $ref: '#/components/schemas/ResourceType'
    page:
      name: page
      in: query
      description: Current page number. 1-based.
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    limit:
      name: limit
      in: query
      description: Limits the number of returned items.
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 10
        maximum: 100
        multipleOf: 10
    profile_pin:
      name: pin
      in: query
      description: Optional profile pin to access a protected profile with a non-admin account.
      required: false
      schema:
        $ref: '#/components/schemas/ProfilePin'
    single_device:
      name: single_device
      in: query
      description: |
        true = only consider single-device drivers, false = only multi-device drivers, NONE = all.
      required: false
      schema:
        type: boolean
  schemas:
    AccessTokenId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique token identifier. Usually a UUID.
    Activities:
      type: array
      items:
        $ref: '#/components/schemas/ActivityOverview'
    Activity:
      description: |
        The activity entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - activity
            features:
              description: |
                Supported features of the activity. If the activity has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: activity was created by Remote Two and can be edited.
                    - `false`: activity was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                included_entities:
                  $ref: '#/components/schemas/IncludedEntities'
                sequences:
                  $ref: '#/components/schemas/ActivitySequences'
                button_mapping:
                  $ref: '#/components/schemas/DeviceButtonMappings'
                user_interface:
                  $ref: '#/components/schemas/ActivityUserInterface'
          required:
            - options
    ActivityId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Activity identifier
    ActivityOverview:
      description: |
        The activity entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - activity
            features:
              description: |
                Supported features of the activity. If the activity has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: activity was created by Remote Two and can be edited.
                    - `false`: activity was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
    ActivityRequest:
      description: |
        Dedicated request object to create a new activity.  
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                options:
                  type: object
                  properties:
                    entity_ids:
                      type: array
                      items:
                        $ref: '#/components/schemas/EntityId'
                  required:
                    - entity_ids
      required:
        - name
    ActivitySequences:
      type: object
      properties:
        'on':
          $ref: '#/components/schemas/CommandSequence'
        'off':
          $ref: '#/components/schemas/CommandSequence'
    ActivityUpdate:
      description: |
        Dedicated request object to update an existing activity.  
        All root properties are optional and only the provided objects are updated in the activity. Omitted objects are
        ignored and not deleted from the activity.

        The `entity_ids` object must be managed by the client and is persisted when updating an activity.

        Notes:
        - Entities can be included in `entity_ids` without being used in `sequences`.  
          This allows to edit the activity in multiple sessions without having to reselect the desired entities.
        - Every referenced entity in `sequences` must be included in `entity_ids`, otherwise the activity cannot be saved.
        - If the client removes a configured entity from the system which is included in an activity, it must make sure to
          also remove all references in the activity. See `available` property in the included entities object when retrieving
          a macro.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            entity_ids:
              type: array
              items:
                $ref: '#/components/schemas/EntityId'
            sequences:
              $ref: '#/components/schemas/ActivitySequences'
    ActivityUserInterface:
      type: object
      properties:
        pages:
          type: array
          items:
            $ref: '#/components/schemas/ActivityUserInterfacePage'
    ActivityUserInterfacePage:
      type: object
      properties:
        page_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          description: Optional page name
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserInterfaceItem'
      required:
        - page_id
        - items
    ActivityUserInterfacePageUpdate:
      type: object
      properties:
        name:
          description: Optional page name
          type: string
        items:
          description: |
            Updated user interface items. An empty array will REMOVE all items, if the property is omitted the existing
            configuration is not changed.
          type: array
          items:
            $ref: '#/components/schemas/UserInterfaceItem'
    ApiKey:
      type: object
      properties:
        key_id:
          $ref: '#/components/schemas/ApiKeyId'
        name:
          $ref: '#/components/schemas/ApiKeyName'
        prefix:
          description: Prefix of the API key for identification purposes.
          type: string
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeName'
        description:
          $ref: '#/components/schemas/Description'
        creation_date:
          type: string
          format: date-time
    ApiKeyId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique key identifier. Usually a UUID.
    ApiKeyName:
      type: string
      minLength: 1
      maxLength: 50
      description: Friendly API key name to show in the app
    ApiKeyRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        scopes:
          type: array
          items:
            type: string
          description: Requested access scopes for the API key.
        active:
          type: boolean
          default: false
          description: |
            Only activated keys are valid for API access.  
            This might be overridden if the requestor doesn't have sufficient rights. In this case the key will not be active
            until a user with appropriate rights will set it active. The assigned `active` state will be returned in the
            response.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - name
        - scopes
    ApiKeyResponse:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        api_key:
          type: string
          description: API key.
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeName'
      required:
        - name
        - api_key
        - active
        - scopes
    ApiKeys:
      type: array
      items:
        $ref: '#/components/schemas/ApiKey'
    ApiKeyUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        description:
          $ref: '#/components/schemas/Description'
    ApiResponse:
      type: object
      properties:
        code:
          type: string
          description: Status code
        message:
          type: string
          description: Status message describing the result or error. This message is intended for error analysis and should not directly shown to the end user.
    AvailableEntity:
      description: Provided entity from an integration which can be configured to be used in the remote.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/AvailableEntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        device_id:
          $ref: '#/components/schemas/DeviceId'
        device_class:
          description: |
            Optional device type. This can be used by the UI to represent the entity with a different
            icon, behaviour etc. See entity documentation for available device classes.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        features:
          description: |
            Supported features of the entity. See entity documentation for available features.
          type: array
          items:
            type: string
        options:
          description: |
            Feature options. See entity documentation for available options.
          type: object
        area:
          description: Optional area if supported by the integration. E.g. `Living room`.
          type: string
      required:
        - entity_id
        - entity_type
        - integration_id
        - name
        - features
    AvailableEntityId:
      type: string
      format: '^[a-zA-Z0-9\-_\.]+$'
      minLength: 1
      maxLength: 36
      description: |
        Entity identifier used in an integration driver (= available entities).  
    ButtonId:
      type: string
      format: '^[A-Z0-9_]+$'
      minLength: 1
      maxLength: 20
      description: Physical button identification
    CfgAll:
      type: object
      properties:
        button:
          $ref: '#/components/schemas/CfgButtons'
        device:
          $ref: '#/components/schemas/CfgRemoteDevice'
        display:
          $ref: '#/components/schemas/CfgDisplay'
        haptic:
          $ref: '#/components/schemas/CfgHaptic'
        localization:
          $ref: '#/components/schemas/CfgLocalization'
        network:
          $ref: '#/components/schemas/CfgNetwork'
        power_saving:
          $ref: '#/components/schemas/CfgPowerSaving'
        software_update:
          $ref: '#/components/schemas/CfgSoftwareUpdate'
        sound:
          $ref: '#/components/schemas/CfgSound'
        voice_control:
          $ref: '#/components/schemas/CfgVoiceControl'
    CfgButtons:
      type: object
      properties:
        brightness:
          description: 'Button backlight brightness. 0 = off, 100 = max.'
          type: integer
          minimum: 0
          maximum: 100
        auto_brightness:
          description: 'When enabled, button backlight will automatically turn on in a dark room.'
          type: boolean
      required:
        - brightness
        - auto_brightness
    CfgDisplay:
      type: object
      properties:
        brightness:
          description: Display brightness.
          type: integer
          minimum: 0
          maximum: 100
        auto_brightness:
          description: Automatically adjust the display brightness based on ambient lighting conditions.
          type: boolean
      required:
        - brightness
        - auto_brightness
    CfgHaptic:
      type: object
      properties:
        enabled:
          description: Haptic feedback enabled.
          type: boolean
      required:
        - enabled
    CfgLocalization:
      type: object
      properties:
        language_code:
          $ref: '#/components/schemas/LanguageCode'
        country_code:
          $ref: '#/components/schemas/CountryCode'
        time_zone:
          description: 'Time zone name according to IANA <https://www.iana.org/time-zones>, e.g. `Europe/Copenhagen`.'
          type: string
        time_format_24h:
          type: boolean
        measurement_unit:
          $ref: '#/components/schemas/MeasurementUnit'
      required:
        - language_code
        - country_code
        - time_zone
        - time_format_24h
        - measurement_unit
    CfgNetwork:
      type: object
      properties:
        bt_enabled:
          description: Enable Bluetooth.
          type: boolean
        wifi_enabled:
          description: Enable WiFi.
          type: boolean
      required:
        - bt_enabled
        - wifi_enabled
    CfgPowerSaving:
      type: object
      properties:
        wakeup_sensitivity:
          description: Amount of movement needed to wake up the remote. 0 = disabled.
          type: integer
          minimum: 0
          maximum: 3
        display_off_sec:
          type: integer
          minimum: 0
          maximum: 60
          description: Turn off display after given seconds.
        standby_sec:
          type: integer
          minimum: 0
          maximum: 10800
          description: Activate standby after given seconds. 0 disables standby mode.
      required:
        - wakeup_sensitivity
        - display_off_sec
        - standby_sec
    CfgRemoteDevice:
      type: object
      properties:
        name:
          description: Custom name of the remote
          type: string
          minimum: 1
          maximum: 50
      required:
        - name
    CfgSoftwareUpdate:
      type: object
      properties:
        check_for_updates:
          description: |
            Automatically check for updates. If `auto_update` is enabled, the updates are automatically installed,
            otherwise the user is only notified about the updates.
          type: boolean
        auto_update:
          description: |
            Automatically update the remote when new software is available. Requires `check_for_updates` to be enabled.
          type: boolean
      required:
        - check_for_updates
        - auto_update
    CfgSound:
      type: object
      properties:
        enabled:
          description: Sound effects enabled.
          type: boolean
        volume:
          description: Sound effects volume.
          type: integer
          minimum: 0
          maximum: 100
      required:
        - enabled
        - volume
    CfgVoiceControl:
      type: object
      properties:
        microphone:
          description: |
            Enable microphone. Disabling the microphone will completely turn it off. Voice control and dictation won't work
            with the remote or integrations.
          type: boolean
        enabled:
          description: |
            Enable voice control. Disabling voice control will still let you use voice dictation with integrations. 
            Disable the microphone to completely switch off any microphone related functionality.
          type: boolean
        voice_assistant:
          description: |
            TODO
          type: string
          default: None
      required:
        - microphone
        - enabled
        - voice_assistant
    CodeSet:
      type: object
      properties:
        manufacturer_id:
          type: string
        manufacturer:
          type: string
        device_id:
          type: string
        device:
          type: string
        device_type:
          type: string
        codes:
          type: array
          items:
            $ref: '#/components/schemas/IrCode'
      required:
        - manufacturer
        - manufacturer_id
        - device_id
        - device
        - device_type
        - codes
    CodeSetCreate:
      type: object
      properties:
        manufacturer:
          description: |
            Optional manufacturer name. If not specified: the codeset will be linked to the custom manufacturer entry
            for self learned codes.
          type: string
          minLength: 1
          maxLength: 100
        device:
          type: string
          minLength: 1
          maxLength: 100
        device_type:
          $ref: '#/components/schemas/DeviceType'
        code_format:
          $ref: '#/components/schemas/IrCodeFormat'
        codes:
          type: array
          items:
            type: object
            properties:
              key:
                $ref: '#/components/schemas/IrCodeKey'
              value:
                $ref: '#/components/schemas/IrCodeValue'
            required:
              - key
              - value
      required:
        - device
        - device_type
    CodeSetInfo:
      type: object
      properties:
        manufacturer_id:
          type: string
        manufacturer:
          type: string
        device_id:
          type: string
        device:
          type: string
        device_type:
          type: string
      required:
        - manufacturer_id
        - manufacturer
        - device_id
        - device
        - device_type
    CodeSetUpdate:
      type: object
      properties:
        device:
          type: string
          minLength: 1
          maxLength: 100
        device_type:
          $ref: '#/components/schemas/DeviceType'
    CommandSequence:
      description: Sequence of commands to execute.
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/CommandSequenceEntity'
          - $ref: '#/components/schemas/CommandSequenceDelay'
        discriminator:
          propertyName: type
          mapping:
            command: '#/components/schemas/CommandSequenceEntity'
            delay: '#/components/schemas/CommandSequenceDelay'
    CommandSequenceEntity:
      description: Entity command step in a command sequence.
      type: object
      properties:
        type:
          type: string
        command:
          $ref: '#/components/schemas/EntityCommand'
      required:
        - type
        - command
      example:
        type: command
        command:
          entity_id: hass.main.light.living-room
          cmd_id: 'on'
          params:
            brightness: 75
    CommandSequenceDelay:
      description: Delay step in a command sequence.
      type: object
      properties:
        type:
          type: string
        delay:
          description: Delay in milliseconds.
          type: integer
          minimum: 1
      required:
        - type
        - delay
      example:
        type: delay
        delay: 100
    CountryCode:
      description: 'Two letter country code according to [ISO-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).'
      type: string
      format: iso-3166
    Description:
      type: string
      maxLength: 255
      description: Optional description
    DeviceButtonGroup:
      description: Button group type.
      type: string
      enum:
        - keypad
    DeviceButtonLayout:
      description: 'Button group definitions with layout placement, size, icon and language specific names.'
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DeviceButtonGroup'
        grid:
          description: Grid layout size.
          type: object
          properties:
            width:
              type: integer
              minimum: 1
            height:
              type: integer
              minimum: 1
          required:
            - width
            - height
        buttons:
          type: array
          items:
            type: object
            properties:
              button:
                description: Unique button identifier over all button groups.
                type: string
              icon:
                $ref: '#/components/schemas/IconIdentifier'
              name:
                $ref: '#/components/schemas/LanguageText'
              location:
                $ref: '#/components/schemas/GridLocation'
              size:
                $ref: '#/components/schemas/GridItemSize'
            required:
              - button
              - icon
              - name
              - location
      required:
        - type
        - grid
        - buttons
    DeviceButtonMapping:
      type: object
      properties:
        button:
          $ref: '#/components/schemas/ButtonId'
        short_press:
          $ref: '#/components/schemas/EntityCommand'
        long_press:
          $ref: '#/components/schemas/EntityCommand'
      required:
        - button
    DeviceButtonMappings:
      description: |
        Physical button mapping to entity commands. The `entity_id` in the EntityCommand object is a required
        property for an activity and ignored for a remote-entity.
      type: array
      items:
        $ref: '#/components/schemas/DeviceButtonMapping'
    DeviceId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Device identifier for multi-device integrations only.
    DeviceState:
      type: string
      enum:
        - UNKNOWN
        - CONNECTING
        - CONNECTED
        - DISCONNECTED
        - ERROR
    DeviceType:
      type: string
      enum:
        - audio
        - radio
        - cd_player
        - receiver
        - soundbar
        - hdmi_switch
        - television
        - projector
        - set_top_box
        - media_player
        - dvd_player
        - bluray_player
        - climate
        - light
        - various
    DiscoveryType:
      type: string
      description: |
        Device discovery type:
        - `BT`: Bluetooth
        - `NET`: LAN or WAN network
      enum:
        - BT
        - NET
    DockConfiguration:
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/DockId'
        name:
          $ref: '#/components/schemas/DockName'
        custom_ws_url:
          $ref: '#/components/schemas/DockUrl'
        resolved_ws_url:
          type: string
          maxLength: 64
          description: Resolved WebSocket URL from the service name in `dock_id` if no `custom_ws_url` is used.
        active:
          type: boolean
          description: |
            Enable flag: active docks are automatically connected when network is available.
        model:
          type: string
          description: Dock model number.
        connection_type:
          type: string
          description: |
            Network connection of the dock: `Ethernet` or `WiFi`.
        version:
          type: string
        state:
          $ref: '#/components/schemas/DockState'
        learning_active:
          type: boolean
          description: Dock is in IR learning mode.
        description:
          $ref: '#/components/schemas/Description'
      required:
        - dock_id
        - active
    DockConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/DockConfiguration'
    DockConfigurationRequest:
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/DockId'
        name:
          $ref: '#/components/schemas/DockName'
        custom_ws_url:
          $ref: '#/components/schemas/DockUrl'
        token:
          $ref: '#/components/schemas/DockToken'
        active:
          type: boolean
          description: |
            Enable flag: active docks are automatically connected when network is available.
        model:
          type: string
          description: Dock model number.
        description:
          $ref: '#/components/schemas/Description'
      required:
        - dock_id
        - active
    DockUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 40
          description: User assignable friendly name to use instead of dock_id (service name).
        custom_ws_url:
          $ref: '#/components/schemas/DockUrl'
        token:
          type: string
          maxLength: 40
          description: Access token to connect to the dock.
        active:
          type: boolean
          description: Auto connect to dock when network is available.
        description:
          type: string
          description: Optional description.
        wifi:
          type: object
          properties:
            ssid:
              type: string
              maxLength: 32
            password:
              type: string
              maxLength: 63
    DockDiscovery:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DockId'
        configured:
          description: |
            Dock configuration flag for this remote:
            - true: device has already been configured
            - false: device has not yet been configured
          type: boolean
        friendly_name:
          $ref: '#/components/schemas/DockName'
        address:
          description: Resolved device network address.
          type: string
        model:
          description: Detected dock model.
          type: string
        version:
          description: Detected firmware version.
          type: string
        discovery_type:
          $ref: '#/components/schemas/DiscoveryType'
        timestamp:
          description: Timestamp of dock discovery.
          type: string
          format: date-time
        bt:
          type: object
          description: Optional Bluetooth discovery information. Not present for network device.
          properties:
            signal:
              description: 'Bluetooth signal strength. 0 = min, 5 = max.'
              type: integer
              minimum: 0
              maximum: 5
            last_seen_sec:
              description: |
                Last time the device was seen on a Bluetooth scan. Values over 15 sec indicate that the device is no longer
                reachable.
              type: integer
              format: int32
      required:
        - id
        - configured
        - discovery_type
    DockDiscoveryStatus:
      type: object
      properties:
        active:
          description: |
            Dock discovery still active or not.
          type: boolean
        docks:
          type: array
          items:
            $ref: '#/components/schemas/DockDiscovery'
      required:
        - discovery_active
        - docks
    DockFirmwareUpdate:
      type: object
      description: Dock firmware information
      properties:
        model:
          description: Dock model
          type: string
        version:
          description: Firmware version
          type: string
        release_notes_url:
          type: string
          format: uri
      required:
        - model
        - version
    DockId:
      type: string
      format: '^[a-zA-Z0-9\-\.]+$'
      minLength: 1
      maxLength: 64
      description: Dock identifier
    DockName:
      type: string
      minLength: 1
      maxLength: 40
      description: User assignable friendly name to use instead of dock_id (service name).
    DockSystemInfo:
      type: object
      properties:
        name:
          type: string
        hostname:
          type: string
        model:
          type: string
        revision:
          type: string
        version:
          type: string
        serial:
          type: string
        ir_learning:
          type: boolean
        ethernet:
          type: boolean
        wifi:
          type: boolean
        ssid:
          type: string
    CreateDockSetup:
      type: object
      oneOf:
        - type: object
          properties:
            discovery:
              $ref: '#/components/schemas/DockSetupFromDiscovery'
          required:
            - discovery
        - type: object
          properties:
            manually:
              $ref: '#/components/schemas/DockSetup'
          required:
            - manual
    DockSetup:
      type: object
      description: Dock setup data
      properties:
        name:
          $ref: '#/components/schemas/DockName'
        token:
          $ref: '#/components/schemas/DockToken'
        custom_ws_url:
          $ref: '#/components/schemas/DockUrl'
        description:
          $ref: '#/components/schemas/Description'
        wifi:
          description: |
            Optional WiFi information if the dock should connect to (or be prepared for) WiFi instead of Ethernet.
          type: object
          properties:
            ssid:
              type: string
            password:
              type: string
              format: password
          required:
            - ssid
            - password
      required:
        - name
    DockSetupFromDiscovery:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DockId'
        friendly_name:
          $ref: '#/components/schemas/DockName'
        address:
          description: Resolved device network address.
          type: string
        model:
          description: Detected dock model.
          type: string
        version:
          description: Detected firmware version.
          type: string
        discovery_type:
          $ref: '#/components/schemas/DiscoveryType'
      required:
        - id
        - discovery_type
    DockSetupError:
      type: string
      enum:
        - NONE
        - NOT_FOUND
        - CONNECTION_ERROR
        - CONNECTION_REFUSED
        - AUTHORIZATION_ERROR
        - TIMEOUT
        - ABORT
        - PERSISTENCE_ERROR
        - OTHER
    DockSetupInfo:
      type: object
      description: Dock setup state
      properties:
        id:
          type: string
        name:
          $ref: '#/components/schemas/DockName'
        discovery_type:
          $ref: '#/components/schemas/DiscoveryType'
        state:
          $ref: '#/components/schemas/DockSetupState'
        error:
          $ref: '#/components/schemas/DockSetupError'
      required:
        - id
        - state
    DockSetupState:
      type: string
      enum:
        - NEW
        - CONFIGURING
        - UPLOADING
        - RESTARTING
        - OK
        - ERROR
    DockState:
      type: string
      description: Dock connection state
      enum:
        - IDLE
        - CONNECTING
        - ACTIVE
        - RECONNECTING
        - ERROR
    DockToken:
      type: string
      format: password
      minLength: 1
      maxLength: 40
      description: Access token
    DockUpdateCheck:
      type: object
      description: Dock firmware update check information.
      properties:
        dock_id:
          type: string
        version:
          description: Installed firmware version.
          type: string
        update_available:
          description: Whether or not an update is available. An available update is set in the `firmware_update` object.
          type: boolean
        update_check_enabled:
          description: |
            Whether or not the online update check is enabled or not. If disabled, `update_available` will always be false. 
          type: boolean
        firmware_update:
          $ref: '#/components/schemas/DockFirmwareUpdate'
        update_id:
          description: Update identifier if an update is currently in progress.
          type: string
      required:
        - dock_id
        - version
        - update_available
        - update_check_enabled
    DockUpdateProgress:
      type: object
      description: Dock firmware update progress
      properties:
        dock_id:
          type: string
        update_id:
          description: Update identifier
          type: string
        version:
          description: Firmware version being installed
          type: string
        progress:
          description: Update progress in percent
          type: integer
          format: int32
          minimum: 0
          maximum: 100
        state:
          $ref: '#/components/schemas/DockSetupState'
        error:
          $ref: '#/components/schemas/DockSetupError'
      required:
        - dock_id
        - update_id
        - version
        - state
    DockUrl:
      type: string
      minLength: 6
      maxLength: 64
      description: Dock WebSocket URL to override auto-discovery from the service name in `dock_id`.
    DriverDeveloper:
      type: object
      description: Optional information about the integration developer.
      properties:
        name:
          description: Optional developer information to display in UI / web-configurator.
          type: string
          maxLength: 100
        url:
          description: Optional developer home page.
          type: string
          format: uri
          maxLength: 255
        email:
          description: Optional developer contact email.
          type: string
          format: email
          maxLength: 100
    DriverId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: 'Unique integration driver identifier, e.g. `homeassistant`, `homey`, etc.'
    DriverState:
      type: string
      enum:
        - NOT_CONFIGURED
        - IDLE
        - CONNECTING
        - ACTIVE
        - RECONNECTING
        - ERROR
    Entities:
      type: array
      items:
        $ref: '#/components/schemas/Entity'
    Entity:
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        device_class:
          description: |
            Optional device type. This can be used by the UI to represent the entity with a different
            icon, behaviour etc. See entity documentation for available device classes.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        features:
          description: |
            Supported features of the entity. See entity documentation for available features.
          type: array
          items:
            type: string
        options:
          description: |
            Feature options. See entity documentation for available options.
          type: object
        description:
          $ref: '#/components/schemas/LanguageText'
      required:
        - entity_id
        - entity_type
        - integration_id
        - name
    EntityId:
      type: string
      format: '^[a-zA-Z0-9\-_\.]+$'
      minLength: 5
      maxLength: 110
      description: Unique UC Remote Two identifier over all entities and integrations.
    EntityCommand:
      description: |
        Entity command object. The `entity_id` only has to be specified if it's not already included as a parameter in the URL.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        cmd_id:
          description: Entity specific command.
          type: string
        params:
          description: |
            Optional command parameters as key / value pairs. See entity documentation for available parameters.
          type: object
      required:
        - cmd_id
      example:
        entity_id: hass.main.light.living-room
        cmd_id: 'on'
        params:
          hue: 180
          saturation: 90
    EntityCmdParamBool:
      type: object
      description: Boolean value parameter.
    EntityCmdParamNumber:
      type: object
      description: |
        Number value parameter with optional limits.   
      properties:
        min:
          description: Minimal allowed value (inclusive).
          type: number
          default: 0
        max:
          description: Maximal allowed value (inclusive).
          type: number
        step:
          description: Step size between values.
          type: number
          default: 1
        unit:
          description: Optional unit label of the value.
          type: string
      example:
        min: 0
        max: 100
        step: 1
        unit: '%'
    EntityCmdParamRegex:
      type: object
      description: Text value parameter with optional regex validation.
      properties:
        regex:
          description: Validation regex.
          type: string
    EntityCmdParamEnum:
      type: object
      description: Enumeration parameter. Only the defined values are allowed as parameter value.
      properties:
        values:
          type: array
          items:
            type: string
      required:
        - values
      example:
        values:
          - Option 1
          - Option 2
          - Option 3
    EntityCommandMetadata:
      type: object
      properties:
        id:
          description: Entity command identifier
          type: string
        cmd_id:
          description: Entity command.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        params:
          description: |
            Metadata describing the optional parameters of the command. Simple "button like" commands
            don't have any parameters, whereas e.g. a light entity can also dim the light, change color or color
            temperature.
          type: array
          items:
            type: object
            allOf:
              - properties:
                  name:
                    $ref: '#/components/schemas/LanguageText'
                  param:
                    description: Parameter name.
                    type: string
                  type:
                    description: Parameter type.
                    type: string
                    enum:
                      - number
                      - bool
                      - regex
                      - enum
                required:
                  - name
                  - param
                  - type
              - oneOf:
                  - $ref: '#/components/schemas/EntityCmdParamNumber'
                  - $ref: '#/components/schemas/EntityCmdParamBool'
                  - $ref: '#/components/schemas/EntityCmdParamRegex'
                  - $ref: '#/components/schemas/EntityCmdParamEnum'
                discriminator:
                  propertyName: type
                  mapping:
                    number: '#/components/schemas/EntityCmdParamNumber'
                    bool: '#/components/schemas/EntityCmdParamBool'
                    regex: '#/components/schemas/EntityCmdParamRegex'
                    enum: '#/components/schemas/EntityCmdParamEnum'
      required:
        - id
        - cmd_id
        - name
    EntityRequest:
      type: object
      description: |
        Update model for an entity.

        - Specified properties will update the current values.
        - An empty value will delete the currently set property.
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
    EntityType:
      type: string
      description: Entity type
      enum:
        - button
        - climate
        - cover
        - light
        - media_player
        - sensor
        - switch
        - activity
        - macro
        - remote
    ExternalSystems:
      type: array
      items:
        $ref: '#/components/schemas/ExternalSystem'
    ExternalSystem:
      type: object
      properties:
        system:
          $ref: '#/components/schemas/ExternalSystemId'
        name:
          $ref: '#/components/schemas/ExternalSystemName'
    ExternalSystemId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 50
      description: Unique external system identifier registered by an R2 integration to interact with the API.
    ExternalSystemName:
      type: string
      minLength: 1
      maxLength: 50
      description: |
        Friendly name of the external system to display to the user within the app. This name must be unique for an external
        system and should be as short and concise as possible.
        Use the description field for more information.
    ExternalAccessTokens:
      type: array
      items:
        type: object
        properties:
          system:
            $ref: '#/components/schemas/ExternalSystemName'
          token_id:
            type: string
          name:
            type: string
          description:
            type: string
            maxLength: 2048
            description: Optional description of the external access token.
          url:
            type: string
            maxLength: 2048
            description: Optional URL of the external system.
          data:
            type: string
            maxLength: 2048
            description: Optional data from the external system for the R2 integration.
          creation_date:
            type: string
            format: date-time
    ExternalAccessToken:
      type: object
      properties:
        system:
          $ref: '#/components/schemas/ExternalSystemName'
        token_id:
          type: string
        name:
          type: string
        token:
          type: string
          minLength: 1
          maxLength: 2048
          description: |
            The token to access the external system with the corresponding R2 integration.
            This could be a UUID, a JWT or any other representation required for the integration to authenticate on the
            system.
        description:
          type: string
          maxLength: 2048
          description: Optional description of the external access token.
        url:
          type: string
          maxLength: 2048
          description: Optional URL of the external system.
        data:
          type: string
          maxLength: 2048
          description: Optional data from the external system for the R2 integration.
        creation_date:
          type: string
          format: date-time
    ExternalAccessTokenRequest:
      type: object
      properties:
        token_id:
          type: string
          format: '^[a-zA-Z0-9\-_]+$'
          minLength: 1
          maxLength: 36
          description: |
            Unique token identifier, used for later token management through the external system or management ui.
            This identifier can be provided by the external system. If omitted, an UUID is generated and returned in the
            ExternalAccessToken response.
        name:
          $ref: '#/components/schemas/ExternalSystemName'
        token:
          type: string
          minLength: 1
          maxLength: 2048
          description: |
            The token to access the external system with the corresponding R2 integration.
            This could be a UUID, a JWT or any other representation required for the integration to authenticate on the
            system.
        description:
          type: string
          maxLength: 2048
          description: Optional description of the external access token.
        url:
          type: string
          maxLength: 2048
          description: Optional URL of the external system.
        data:
          type: string
          maxLength: 2048
          description: Optional data from the external system for the R2 integration.
      required:
        - name
        - token
      example:
        token_id: 1-2-3
        name: My smart home
        token: secret-sauce-42!
        description: Any other informative message about the external system
        url: 'ws://smart.home'
        data: 'optional: true, foo: bar, free: text'
    FriendlyName:
      type: string
      maxLength: 64
    GridItemSize:
      description: 'Item size in the button grid. Default size if not specified: 1 x 1'
      type: object
      properties:
        width:
          type: integer
          minimum: 1
          default: 1
        height:
          type: integer
          minimum: 1
          default: 1
    GridLocation:
      description: Button placement in the grid with 0-based coordinates.
      type: object
      properties:
        x:
          type: integer
          minimum: 0
        'y':
          type: integer
          minimum: 0
      required:
        - x
        - 'y'
    Group:
      type: object
      description: |
        The shown group switch in the UI is automatically determined by the capabilities of the group's entities.
      properties:
        group_id:
          $ref: '#/components/schemas/SimpleId'
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        entities:
          type: array
          description: Entity identifiers belonging to the group
          items:
            $ref: '#/components/schemas/EntityId'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - group_id
        - profile_id
        - name
        - entities
    GroupUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        entities:
          type: array
          description: |
            Changed or re-ordered group entities.
            An empty array remove all entities.
            If the property is not specified the defined entities will not be changed.
          items:
            $ref: '#/components/schemas/EntityId'
        description:
          $ref: '#/components/schemas/Description'
    Groups:
      type: array
      items:
        $ref: '#/components/schemas/Group'
    IconIdentifier:
      type: string
      format: '^[a-z0-9]+:[a-zA-Z0-9\-_\.]+$'
      maxLength: 255
      description: |
        Optional icon identifier. The identifier consists of a prefix and a resource identifier, separated by `:`.  
        Available prefixes:
        - `uc:` - integrated icon font 
        - `custom:` - custom resource

        An empty identifier, while updating the object, removes the existing icon.
    ImageIdentifier:
      type: string
      format: '^[a-z0-9]+:[a-zA-Z0-9\-_\.]+$'
      maxLength: 255
      description: |
        Optional image identifier. The identifier consists of a prefix and a resource identifier, separated by `:`.  
        Available prefixes:
        - `custom:` - custom resource

        An empty identifier, while updating the object, removes the existing image.
    IncludedEntities:
      description: |
        Included entities in an activity or macro. This object is writable from the client and persisted when saving.

        Notes:
        - Entities can be included without being used in a sequence.  
          This allows to edit the activity or macro in multiple sessions without having to reselect the desired entities.
        - Every used entity in a sequence must be included, otherwise the activity or macro  cannot be saved.
        - If the client removes an entity which is included in an activity or macro, it must make sure to also remove all
          entity references the sequence(s), button mapping and user interface.
      type: array
      items:
        $ref: '#/components/schemas/IncludedEntity'
    IncludedEntity:
      description: |
        When saving an activity only the `entity_id` is persisted. When retrieving an activity all other fields
        will be retrieved from the real entities to make sure they are up to date. I.e. the entity name or icon
        might change between saving an activity and retrieving it again!
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        integration:
          description: |
            Optional integration information. Regular entities will have at least the integration name. Special
            entities like activities and macros might omit the integration object.
          type: object
          properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
        entity_commands:
          description: |
            Supported entity command identifiers. A command identifier refers to the common entity command
            definitions, which describe all required parameters to set for calling the entity command. This
            includes the mandatory `cmd_id` attribute and optional parameters.
          type: array
          items:
            type: string
        simple_commands:
          description: |
            Simple commands are additional commands supported by the entity, which are not included in the
            common entity command definitions. A typical example are remote-entity commands like `VOLUME_UP` etc
            which don't have additional parameters. A simple command relates directly to the `cmd_id` attribute
            when calling a command.
          type: array
          items:
            type: string
        available:
          description: |
            State of the entity: True / missing = entity is available as configured entity and can be used.  
            False = entity has been removed and must be corrected by the user.

            If an entity is no longer available then all usages in the sequences are still present in case the
            entity is re-configured. The execution of the on- or off-sequence will then simply skip the actions
            of the no longer available entity.
          type: boolean
      required:
        - entity_id
    IntgAuthMethod:
      type: string
      description: |
        Integration driver authentication method if a token is required.

        The JSON `auth` message is used if a token is configured but no authentication method is set.
      enum:
        - HEADER
        - MESSAGE
    CreateIntegrationSetup:
      type: object
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        setup_data:
          $ref: '#/components/schemas/SettingsValues'
      required:
        - driver_id
    IntegrationSetupError:
      type: string
      enum:
        - NONE
        - NOT_FOUND
        - CONNECTION_REFUSED
        - AUTHORIZATION_ERROR
        - TIMEOUT
        - OTHER
    IntegrationSetupInfo:
      type: object
      description: Integration setup state
      properties:
        id:
          type: string
        state:
          $ref: '#/components/schemas/IntegrationSetupState'
        error:
          $ref: '#/components/schemas/IntegrationSetupError'
        require_user_action:
          description: 'If set, the setup process waits for the specified user action.'
          oneOf:
            - type: object
              properties:
                input:
                  type: object
                  $ref: '#/components/schemas/SettingsPage'
              required:
                - input
            - type: object
              properties:
                confirmation:
                  type: object
                  $ref: '#/components/schemas/ConfirmationPage'
              required:
                - confirmation
      required:
        - id
        - state
    IntegrationSetupState:
      type: string
      enum:
        - SETUP
        - WAIT_USER_ACTION
        - OK
        - ERROR
    IntegrationDiscovery:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DriverId'
        configured:
          description: |
            Integration configuration flag for this remote:
            - true: driver has already been configured
            - false: driver has not yet been configured
          type: boolean
        name:
          type: string
        developer_name:
          type: string
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        driver_url:
          description: Resolved driver url.
          type: string
        pwd_protected:
          description: Driver requires a connection password.
          type: boolean
        version:
          description: Detected driver version.
          type: string
        timestamp:
          description: Timestamp of integration discovery.
          type: string
          format: date-time
      required:
        - id
        - configured
        - name
        - driver_url
    IntegrationDiscoveryStatus:
      type: object
      properties:
        active:
          description: |
            Integration discovery still active or not.
          type: boolean
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationDiscovery'
      required:
        - discovery_active
        - integrations
    IntegrationDriver:
      type: object
      description: |
        Integration driver model.

        A driver represents the communication aspect of an integration. E.g. how one can connect to it
        and which API version it supports.

        One driver can provide multiple `Integration` instances. In the integration API they are
        referred to as `multi-device integrations` and use the optional `device_id` property where
        required. If a driver only provides a single instance, which is usually the default use case,
        then the `device_id` is not used (or set to the default value `main`).
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_type:
          $ref: '#/components/schemas/IntegrationDriverType'
        driver_url:
          description: WebSocket URL of the driver.
          type: string
          format: uri
          maxLength: 2048
        token:
          description: |
            Optional driver authentication token.

            Note: the token will not be returned to external clients!
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/IntgAuthMethod'
        pwd_protected:
          description: Driver requires a connection password.
          type: boolean
        version:
          description: 'Driver version, [SemVer](https://semver.org/) preferred.'
          type: string
          maxLength: 20
        min_core_api:
          description: |
            Optional version check: minimum required core API version in the remote.
          type: string
          maxLength: 20
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication. For development use only!  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
        description:
          $ref: '#/components/schemas/LanguageText'
        developer:
          $ref: '#/components/schemas/DriverDeveloper'
        home_page:
          description: Optional home page url for more information.
          type: string
          format: uri
          maxLength: 255
        device_discovery:
          description: Driver supports multi-device discovery. **Not yet supported**.
          type: boolean
        setup_data_schema:
          $ref: '#/components/schemas/SettingsPage'
        release_date:
          description: Release date of the driver.
          type: string
          format: date
        driver_state:
          $ref: '#/components/schemas/DriverState'
      required:
        - driver_id
        - name
        - driver_url
        - version
    IntegrationDriverInfo:
      type: object
      description: |
        Summary data of an integration driver intended for overview screens.
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        developer_name:
          type: string
        driver_type:
          $ref: '#/components/schemas/IntegrationDriverType'
        driver_url:
          description: WebSocket URL of external driver
          type: string
          format: uri
          maxLength: 255
        version:
          type: string
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          type: boolean
        driver_state:
          $ref: '#/components/schemas/DriverState'
      required:
        - driver_id
        - name
        - driver_type
        - version
        - enabled
    IntegrationDrivers:
      type: array
      items:
        $ref: '#/components/schemas/IntegrationDriverInfo'
    IntegrationDriverRequest:
      type: object
      description: |
        Integration driver creation model. 

        - The only required property is `driver_url` to contact the driver and fetch all driver data.
        - If the driver requires an access token, the `token` needs to be specified and optionally the authentication method
          in `auth_method`.
        - The `driver_id` identifier can be specified by the client, but it needs to be unique among
          all drivers. If omitted, the driver identifier returned by the driver will be used.  
          A manually assigned, short, human-readable identifier is recommended for better recognizability.
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_url:
          description: WebSocket URL of the driver
          type: string
          format: uri
          maxLength: 2048
        token:
          description: Optional driver authentication token.
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/IntgAuthMethod'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication. For development use only!  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
      required:
        - driver_url
    IntegrationDriverType:
      type: string
      enum:
        - LOCAL
        - EXTERNAL
    IntegrationDriverUpdate:
      type: object
      description: |
        Integration driver update model. This model corresponds to the `IntegrationDriverRequest` model except there are
        no required properties to allow patch updates. 

        - Specified properties will update the current values.
        - An empty value will delete the currently set property.
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_url:
          description: WebSocket URL of the driver
          type: string
          format: uri
          maxLength: 2048
        token:
          description: Optional driver authentication token.
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/IntgAuthMethod'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication.  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
    Integration:
      type: object
      description: |
        Integration instance model.
      properties:
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        driver_id:
          $ref: '#/components/schemas/DriverId'
        device_id:
          $ref: '#/components/schemas/DeviceId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: Enable / disable flag. For development use only!
          type: boolean
        setup_data:
          description: Instance configuration object
          type: object
        device_state:
          $ref: '#/components/schemas/DeviceState'
      required:
        - integration_id
        - driver_id
        - name
        - enabled
    IntegrationId:
      type: string
      format: '^[a-zA-Z0-9\-_\.]+$'
      minLength: 1
      maxLength: 73
      description: |
        Unique integration instance identifier. Automatically created by the system when creating a new instance from a driver.
    Integrations:
      type: array
      items:
        $ref: '#/components/schemas/Integration'
    IntegrationRequest:
      type: object
      description: |
        Integration instance update model. This model corresponds to the `Integration` model except there are no required
        properties to allow patch updates. 

        - Specified properties will update the current values.
        - An empty value will delete a set property.
        - `device_id` is only required for multi-device integrations.
      properties:
        device_id:
          $ref: '#/components/schemas/DeviceId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: Enable / disable flag. For development use only!
          type: boolean
        setup_data:
          description: Instance configuration object.
          type: object
    IntegrationState:
      type: string
      enum:
        - NOT_CONFIGURED
        - UNKNOWN
        - IDLE
        - CONNECTING
        - CONNECTED
        - DISCONNECTED
        - RECONNECTING
        - ACTIVE
        - ERROR
    IntegrationStatus:
      type: object
      description: |
        Integration status information. Intended to be used in a general overview of the integration drivers and instances.
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        driver_type:
          $ref: '#/components/schemas/IntegrationDriverType'
        state:
          $ref: '#/components/schemas/IntegrationState'
      required:
        - name
        - driver_type
    IrCode:
      type: object
      properties:
        key:
          type: string
        format:
          $ref: '#/components/schemas/IrCodeFormat'
        value:
          type: string
      required:
        - key
        - format
        - value
    IrCodeCreate:
      $ref: '#/components/schemas/IrCode'
    IrCodeFormat:
      description: Supported IR code formats
      type: string
      enum:
        - HEX
        - PRONTO
    IrCodeKey:
      description: IR command key identifier
      type: string
      format: '^[A-Z0-9\-_\.]{1,50}$'
    IrCodeSetType:
      description: 'Type of codeset, either a manufacturer codeset or a custom codeset.'
      type: string
      enum:
        - manufacturer
        - custom
    IrCodeUpdate:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/IrCodeFormat'
        value:
          $ref: '#/components/schemas/IrCodeValue'
      required:
        - format
        - value
    IrCodeValue:
      description: 'IR code value, either in HEX or PRONTO format as defined in the format field.'
      type: string
      format: '^(?:[\d]{1,3};0x[a-fA-F0-9]{1,16};[\d]{1,2};[\d]{1,2}|[a-fA-F0-9]{4}((,| )[a-fA-F0-9]{4}){3,})$'
    IrEmitter:
      type: object
      properties:
        device_id:
          description: IR emitter device identifier.
          type: string
        type:
          $ref: '#/components/schemas/IrEmitterType'
        name:
          description: Friendly name of the IR emitter device.
          type: string
        active:
          description: Emitter device is active or currently not available.
          type: boolean
        capabilities:
          description: Optional capabilities of the emitter.
          type: object
          properties:
            learning:
              $ref: '#/components/schemas/IrEmitterLearningCapability'
        ports:
          description: |
            Available output ports of the emitter. A simple emitter might only have one IR output, whereas the Remote Two dock
            has 4 individual outputs.
          type: array
          items:
            type: object
            properties:
              port_id:
                description: IR emitter output port identifier.
                type: string
              name:
                description: Friendly name of the output port.
                type: string
            required:
              - port_id
              - name
      required:
        - device_id
        - type
        - name
        - active
        - ports
    IrEmitterLearningCapability:
      type: object
      description: Emitter can also be used for learning IR codes.
      properties:
        description:
          type: string
        instruction:
          type: string
        formats:
          type: array
          items:
            type: string
        send_while_learn:
          description: Emitter is able to send IR codes while in learn mode.
          type: boolean
          default: false
      required:
        - formats
    IrEmitters:
      type: array
      items:
        $ref: '#/components/schemas/IrEmitter'
    IrEmitterType:
      type: string
      description: 'The type of the device, e.g. a Remote Two docking station, a network based IR blaster or something else.'
      enum:
        - DOCK
        - IR_BLASTER
        - OTHER
    IrStatus:
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/DockId'
        learning_active:
          description: Dock is in IR learning mode
          type: boolean
        state:
          $ref: '#/components/schemas/DockState'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/LearnedIrCode'
    LanguageCode:
      description: |
        Language culture code: starting with the two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
        code, followed by an optional [ISO-3166 country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes),
        separated by an underscore.
        Examples: `en`, `en_UK`, `en_US`, `de`, `de_DE`, `de_CH` etc.
      type: string
      pattern: '^[a-z]{2}(_\w+)?$'
    LanguageText:
      type: object
      description: |
        Key value pairs of language texts. Key: ISO 639-1 code with optional country suffix to represent a `culture code`.
        Examples: `en`, `en_UK`, `en_US`, `de`, `de_CH`.

        If we need to support more regional differences within a country, then the
        [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) might be a solution. This would even
        support the various Swiss German dialects!
      additionalProperties:
        type: string
    LearnedIrCode:
      type: object
      properties:
        code:
          type: string
        format:
          $ref: '#/components/schemas/IrCodeFormat'
        timestamp:
          type: string
          format: date-time
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      example:
        username: admin
        password: '1234'
    Macro:
      description: |
        The macro entity executes a sequence of commands.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - macro
            features:
              description: |
                Supported features of the macro.
              type: array
              items:
                type: string
                enum:
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: macro was created by Remote Two and can be edited.
                    - `false`: macro was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                included_entities:
                  $ref: '#/components/schemas/IncludedEntities'
                sequence:
                  $ref: '#/components/schemas/CommandSequence'
          required:
            - options
    Macros:
      type: array
      items:
        $ref: '#/components/schemas/MacroOverview'
    MacroCreate:
      description: |
        Dedicated request object to create a new macro.  
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                options:
                  type: object
                  properties:
                    entity_ids:
                      type: array
                      items:
                        $ref: '#/components/schemas/EntityId'
                  required:
                    - entity_ids
      required:
        - name
    MacroOverview:
      description: |
        The macro entity executes a sequence of commands.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - macro
            features:
              description: |
                Supported features of the macro.
              type: array
              items:
                type: string
                enum:
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: macro was created by Remote Two and can be edited.
                    - `false`: macro was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
    MacroUpdate:
      description: |
        Dedicated request object to update an existing macro.  
        All root properties are optional and only the provided objects are updated in the macro. Omitted objects are
        ignored and not deleted from the macro.

        The `entity_ids` object must be managed by the client and is persisted when updating a macro.

        Notes:
        - Entities can be included in `entity_ids` without being used in `sequence`.  
          This allows to edit the macro in multiple sessions without having to reselect the desired entities.
        - Every referenced entity in `sequence` must be included in `entity_ids`, otherwise the macro cannot be saved.
        - If the client removes a configured entity from the system which is included in a macro, it must make sure to also
          remove all references in the macro. See `available` property in the included entities object when retrieving a macro.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            entity_ids:
              type: array
              items:
                $ref: '#/components/schemas/EntityId'
            sequence:
              $ref: '#/components/schemas/CommandSequence'
    MeasurementUnit:
      type: string
      enum:
        - METRIC
        - US
        - UK
    Name:
      type: string
      minLength: 1
      maxLength: 50
    Page:
      type: object
      properties:
        page_id:
          $ref: '#/components/schemas/SimpleId'
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
        image:
          type: string
          description: Optional image identifier
        items:
          type: array
          description: Page items
          items:
            $ref: '#/components/schemas/PageItem'
        pos:
          type: integer
          format: int32
          minimum: 0
          description: Position of the page within the profile
      required:
        - page_id
        - profile_id
        - name
        - items
        - pos
    PageCreate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        image:
          $ref: '#/components/schemas/ImageIdentifier'
        items:
          type: array
          description: |
            Optional page items.
          items:
            $ref: '#/components/schemas/PageItem'
        pos:
          type: integer
          format: int32
          minimum: 1
          description: |
            Optional 1-based position of the page within the profile. Default: last position
      required:
        - name
    PageItem:
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        group_id:
          $ref: '#/components/schemas/SimpleId'
        pos:
          type: integer
          format: int32
          minimum: 0
          description: |
            Position of the item within the page. Returned on retrieval, ignored for page updates where the position is taken
            from the page array position.
      oneOf:
        - required:
            - entity_id
        - required:
            - group_id
    PageUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        image:
          $ref: '#/components/schemas/ImageIdentifier'
        items:
          type: array
          description: |
            Changed or re-ordered page items.
            An empty array removes all items.
            If the property is not specified the defined items will not be changed.
          items:
            $ref: '#/components/schemas/PageItem'
    Pages:
      type: array
      items:
        $ref: '#/components/schemas/Page'
    Profile:
      type: object
      properties:
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        protected:
          type: boolean
          description: A protected profile can only be accessed with the profile specific pin code
        description:
          $ref: '#/components/schemas/Description'
      required:
        - profile_id
        - name
        - protected
    ProfilePin:
      type: string
      maxLength: 20
      description: Optional profile pin
    ProfileRequest:
      type: object
      properties:
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        pin:
          $ref: '#/components/schemas/ProfilePin'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - name
    ProfileUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        update_pin:
          type: boolean
          description: |
            true: Update or remove the pin if the `pin` property is set
            false: Don't change existing pin
        pin:
          type: string
          description: |
            Optional pin code for a protected profile. Only relevant if `update_pin: true`.
        description:
          $ref: '#/components/schemas/Description'
        pages:
          description: |
            Used for update only: modify page order or delete pages in profile.
            - An empty `pages` array will delete all pages and containing groups!
            - If the property is missing, the existing page configuration will not be changed.
          type: array
          items:
            $ref: '#/components/schemas/SimpleId'
      required:
        - update_pin
    Profiles:
      type: array
      items:
        $ref: '#/components/schemas/Profile'
    Remote:
      description: |
        The remote entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - remote
            features:
              description: |
                Supported features of the remote. If the remote has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - send
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: remote was created by Remote Two and can be edited.
                    - `false`: remote was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                ir:
                  description: |
                    Infrared settings: codeset name und used infrared emitter to send commands.
                  type: object
                  properties:
                    codeset:
                      description: "Read-only information about the infrared codeset. \U0001F477 **TODO** Use `/remotes/entities/:entityId/ir`\nendpoints to manage infrared codes.\n"
                      type: object
                      properties:
                        id:
                          description: |
                            Codeset identifier, either a custom codeset id or a manufacturer codeset id depending on `type`.
                          type: string
                        name:
                          description: |
                            User friendly name of the used codeset (custom or manufacturer) to show in a user interface.
                          type: string
                        type:
                          $ref: '#/components/schemas/IrCodeSetType'
                    output:
                      description: |
                        Infrared output device settings. Use `/ir/emitter` endpoints to retrieve further information.
                      type: object
                      properties:
                        device_id:
                          description: |
                            IR emitter device identifier.
                          type: string
                        port_id:
                          description: |
                            IR emitter output port identifier.
                          type: string
                simple_commands:
                  description: |
                    All available commands of the infrared codeset for the button mapping and user interface.  
                    These simple commands relate directly to the `cmd_id` attribute when defining or calling an entity command.

                    The commands are read-only and updated automatically based on the infrared codeset.
                  type: array
                  items:
                    type: string
                button_mapping:
                  $ref: '#/components/schemas/DeviceButtonMappings'
                user_interface:
                  $ref: '#/components/schemas/ActivityUserInterface'
          required:
            - options
    Remotes:
      type: array
      items:
        $ref: '#/components/schemas/RemoteOverview'
    RemoteCreate:
      description: |
        Dedicated request object to create a new remote.
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                codeset_id:
                  $ref: '#/components/schemas/SimpleId'
              required:
                - codeset_id
            - type: object
              properties:
                custom_codeset:
                  type: object
                  properties:
                    manufacturer_id:
                      type: string
                      default: custom
                    device_name:
                      type: string
                    device_type:
                      $ref: '#/components/schemas/DeviceType'
                  required:
                    - device_name
              required:
                - custom_codeset
      required:
        - name
    RemoteOverview:
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - remote
            features:
              description: |
                Supported features of the remote.
              type: array
              items:
                type: string
                enum:
                  - send
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: remote was created by Remote Two and can be edited.
                    - `false`: remote was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
    RemoteUpdate:
      description: |
        Dedicated request object to update an existing remote.  
        All root properties are optional and only the provided objects are updated in the remote-entity. Omitted objects are
        ignored and not deleted from the remote-entity.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            ir:
              type: object
              properties:
                codeset:
                  type: object
                  properties:
                    id:
                      type: string
                  required:
                    - id
                output:
                  type: object
                  properties:
                    device_id:
                      type: string
                    port_id:
                      type: string
                  required:
                    - device_id
                    - port_id
    RemoteIrDataSet:
      type: object
      properties:
        id:
          description: |
            Codeset identifier, either a custom codeset id or a manufacturer codeset id depending on `type`.
          type: string
        name:
          description: User friendly name of the codeset (custom or manufacturer).
          type: string
        type:
          $ref: '#/components/schemas/IrCodeSetType'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/RemoteIrCode'
    RemoteIrCode:
      type: object
      properties:
        cmd_id:
          $ref: '#/components/schemas/SimpleId'
        code:
          description: |
            Custom infrared code. Only set for custom codeset or if a manufacturer codeset has been modified or enhanced.
          type: object
          properties:
            value:
              type: string
            format:
              $ref: '#/components/schemas/IrCodeFormat'
        custom:
          description: |
            Flag indicating if this code is a custom code in a manufacturer codeset. This is a manually added code which
            was not present in the codeset. Custom codes can be deleted or edited by the user. The modified code is
            stored in the `code` object.
          type: boolean
        modified:
          description: |
            Flag indicating if a manufacturer code has been replaced with a user code. The modified code is stored in
            the `code` object. Modified codes can be edited by the user.
          type: boolean
      required:
        - cmd_id
    ResourceType:
      type: string
      format: '^[a-zA-Z]+$'
      minLength: 1
      maxLength: 32
    ResourceItems:
      type: array
      items:
        $ref: '#/components/schemas/ResourceItem'
    ResourceItem:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          type: string
          description: Resource identifier (normalized filename)
        size:
          type: integer
          format: int32
          description: Size in bytes
    ConfirmationPage:
      description: |
        Confirmation screen.
        - `message1`: Message to display between title and image (if supplied). Supports Markdown formatting.
        - `message2`: Message to display below message1 or image (if supplied). Supports Markdown formatting.
      type: object
      properties:
        title:
          $ref: '#/components/schemas/LanguageText'
        message1:
          $ref: '#/components/schemas/LanguageText'
        image:
          description: |
            Optional base64-encoded image.

            TODO maximum encoded length to avoid WebSocket continuation frames, supported image formats
            (png & svg?), max height & width
          type: string
          format: byte
          maxLength: 32768
        message2:
          $ref: '#/components/schemas/LanguageText'
      required:
        - title
    SettingsPage:
      description: 'Settings definition page, e.g. to configure an integration driver.'
      type: object
      properties:
        title:
          $ref: '#/components/schemas/LanguageText'
        settings:
          description: 'One or multiple input field definitions, with optional pre-set values.'
          type: array
          items:
            $ref: '#/components/schemas/Setting'
      required:
        - title
        - settings
    Setting:
      description: |
        An input setting is of a specific type defined in `field.type` which defines how it is presented to the user.

        Inspired by the [Homey SDK settings](https://apps.developer.homey.app/the-basics/devices/settings) concept.
      type: object
      properties:
        id:
          description: Unique identifier of the setting to be returned with the entered value.
          type: string
          maximum: 50
        label:
          $ref: '#/components/schemas/LanguageText'
        field:
          oneOf:
            - $ref: '#/components/schemas/SettingTypeNumber'
            - $ref: '#/components/schemas/SettingTypeText'
            - $ref: '#/components/schemas/SettingTypeTextArea'
            - $ref: '#/components/schemas/SettingTypePassword'
            - $ref: '#/components/schemas/SettingTypeCheckbox'
            - $ref: '#/components/schemas/SettingTypeDropdown'
            - $ref: '#/components/schemas/SettingTypeLabel'
      required:
        - id
        - label
        - field
    SettingTypeNumber:
      description: |
        Number input with optional `min`, `max`, `steps` and `decimals` properties. The default value must be specified
        in `value`. An optional unit of the number setting can be specified in `unit`, which will be displayed next to
        the input field.
      type: object
      properties:
        number:
          type: object
          properties:
            value:
              description: Default value for input field.
              type: number
            min:
              description: 'Optional validation: minimum allowed value (inclusive).'
              type: number
            max:
              description: 'Optional validation: maximum allowed value (inclusive).'
              type: number
            steps:
              description: |
                Optional validation: allowed step increment between values. Might also be used in the UI for input helpers.
              type: number
            decimals:
              description: Number of decimal places. 0 = integer value
              type: integer
              minimum: 0
              default: 0
            unit:
              $ref: '#/components/schemas/LanguageText'
          required:
            - value
      required:
        - number
    SettingTypeText:
      description: |
        Single line of text input.

        TODO: format specifier for e.g. email, url, date, datetime etc.?
      type: object
      properties:
        text:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
            regex:
              description: Optional regex validation pattern for the input value.
              type: string
      required:
        - text
    SettingTypeTextArea:
      description: 'Multi-line text input, e.g. for providing a description.'
      type: object
      properties:
        textarea:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
      required:
        - textarea
    SettingTypePassword:
      description: |
        Password or pin entry field with the input text hidden from the user. Otherwise the same as text input.
      type: object
      properties:
        password:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
              format: password
            regex:
              description: Optional regex validation pattern for the input value.
              type: string
      required:
        - password
    SettingTypeCheckbox:
      description: Checkbox setting with `true` / `false` values.
      type: object
      properties:
        checkbox:
          type: object
          properties:
            value:
              description: Initial setting.
              type: boolean
          required:
            - value
      required:
        - checkbox
    SettingTypeDropdown:
      description: Dropdown setting to pick a single value from a list. All values must be strings.
      type: object
      properties:
        dropdown:
          type: object
          properties:
            value:
              description: Pre-selected dropdown id
              type: string
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Selection identifier.
                    type: string
                  label:
                    $ref: '#/components/schemas/LanguageText'
                required:
                  - id
                  - label
          required:
            - items
      required:
        - dropdown
    SettingTypeLabel:
      description: |
        Additional read-only text for information purpose between other settings. Supports Markdown formatting.
      type: object
      properties:
        label:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/LanguageText'
          required:
            - value
      required:
        - label
    SettingsValues:
      description: |
        User input result of a SettingsPage as key values.
        - key: id of the field
        - value: entered user value as string. This is either the entered text or number, selected checkbox state or the
          selected dropdown item id.  
          ‚ö†Ô∏è Non native string values as numbers or booleans are represented as string values!
      type: object
      additionalProperties:
        type: string
    Scopes:
      type: array
      items:
        $ref: '#/components/schemas/Scope'
    Scope:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ScopeName'
        description:
          type: string
          description: Permission scope description
      required:
        - name
    ScopeName:
      type: string
      format: '^[a-zA-Z\-:]+$'
      minLength: 1
      maxLength: 36
      description: Permission scope name
    ServiceInstances:
      type: array
      items:
        $ref: '#/components/schemas/ServiceInstance'
    ServiceInstance:
      type: object
      properties:
        service_type:
          type: string
        name:
          type: string
          description: Instance name
        hostname:
          type: string
        port:
          type: integer
          minimum: 1
          maximum: 65535
        addr_v4:
          type: array
          items:
            type: string
        addr_v6:
          type: array
          items:
            type: string
        txt:
          type: object
          additionalProperties:
            type: string
      required:
        - service_type
        - name
        - hostname
        - port
    SimpleId:
      type: string
      format: '^[a-zA-Z0-9\-_\.]+$'
      minLength: 1
      maxLength: 36
      description: 'Simple string identifier, also usable as URL parameter or file identifier'
    SupportedResource:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        name:
          $ref: '#/components/schemas/LanguageText'
        description:
          $ref: '#/components/schemas/LanguageText'
        file_formats:
          description: 'Allowed file format extensions, e.g. `png`.'
          type: array
          items:
            type: string
        max_file_size:
          description: Maximum file size in bytes.
          type: integer
        max_count:
          description: Maximum number of custom resources.
          type: integer
        image:
          description: Image specific restrictions. Only set for image resources.
          type: object
          properties:
            sizes:
              description: Allowed image sizes.
              type: array
              items:
                type: object
                properties:
                  width:
                    type: integer
                  height:
                    type: integer
                required:
                  - width
                  - height
          required:
            - sizes
        sound:
          type: object
          description: Sound file specific restrictions. Only set for sound resources.
          properties:
            bits:
              type: array
              items:
                type: integer
            channels:
              type: array
              items:
                type: integer
            sampling_rates:
              type: array
              items:
                type: integer
      required:
        - type
        - name
        - file_formats
        - max_file_size
        - max_count
    SupportedResources:
      type: array
      items:
        $ref: '#/components/schemas/SupportedResource'
    SystemInfo:
      type: object
      properties:
        model_name:
          type: string
        model_number:
          type: string
        serial_number:
          type: string
        hw_revision:
          type: string
    UiId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique user interface identifier.
    UserInterfaceItem:
      type: object
      properties:
        type:
          type: string
          enum:
            - icon
            - text
            - numpad
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        text:
          type: string
        command:
          $ref: '#/components/schemas/EntityCommand'
        location:
          $ref: '#/components/schemas/GridLocation'
        size:
          $ref: '#/components/schemas/GridItemSize'
      required:
        - type
        - location
    AvailableSystemUpdateResponse:
      type: object
      properties:
        update_in_progress:
          type: boolean
        last_check_date:
          description: Last update check timestamp.
          type: string
          format: date-time
        update_check_enabled:
          type: boolean
        installed_version:
          description: Installed system version.
          type: string
        available:
          type: array
          items:
            $ref: '#/components/schemas/AvailableSystemUpdate'
      required:
        - update_check_enabled
        - installed_version
        - available
    AvailableSystemUpdate:
      type: object
      properties:
        id:
          description: Update identifier
          type: string
        title:
          type: string
        description:
          $ref: '#/components/schemas/LanguageText'
        version:
          type: string
        channel:
          $ref: '#/components/schemas/UpdateChannel'
        release_date:
          type: string
          format: date
        size:
          type: integer
          format: int64
      required:
        - id
        - title
        - description
        - version
        - release_date
        - size
    UpdateChannel:
      type: string
      enum:
        - STABLE
        - TESTING
        - DEVELOPMENT
    UploadSystemImageResponse:
      type: object
      properties:
        id:
          description: Update identifier
          type: string
      required:
        - id
    SystemUpdateProgress:
      type: object
      properties:
        state:
          type: string
          enum:
            - IDLE
            - START
            - RUN
            - SUCCESS
            - FAILURE
            - DOWNLOAD
            - DONE
            - SUB_PROCESS
            - PROGRESS
        update_id:
          description: Update identifier
          type: string
        download_percent:
          description: Percent of download
          type: integer
        download_bytes:
          description: Total of bytes to be downloaded
          type: integer
          format: int64
        total_steps:
          description: Total number of update steps
          type: integer
        current_step:
          description: Current installation step index
          type: integer
        current_percent:
          description: Percent in current step
          type: integer
      required:
        - state
        - update_id
    ValidationErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Message describing the validation error. This message is intended for error analysis and should not directly shown to the end user.
        errors:
          description: Optional validation errors
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      properties:
        field:
          description: Field identifier with an invalid value.
          type: string
        field_errors:
          description: |
            Optional field validation error descriptions. A field can have multiple validation rules with an error.
          type: array
          items:
            $ref: '#/components/schemas/FieldValidationError'
      required:
        - field
    FieldValidationError:
      type: object
      properties:
        code:
          description: |
            Validation error code. This can be a custom code or one of the common pre-defined codes:
            - `LENGTH`: String is either too short or too long.
            - `RANGE`: Number is not in valid range.
            - `REGEX`: Regex validation failed.
            - `INVALID_FORMAT`: value is in an invalid format.
          type: string
        message:
          description: Validation rule message.
          type: string
        params:
          description: 'Optional code related parameters. E.g. `min`, `max` for string-length or number-range validation.'
          type: object
      required:
        - message
    VersionInfo:
      type: object
      properties:
        device_name:
          description: Custom name of the remote
          type: string
        api:
          description: API version
          type: string
        core:
          description: Core app version
          type: string
        ui:
          description: Frontend app version
          type: string
        os:
          description: Operating system version
          type: string
        integrations:
          description: 'Versions of the available integrations. Map of (integration_name, version).'
          type: object
          additionalProperties:
            type: string
    ApScanStatus:
      type: object
      properties:
        active:
          type: boolean
        scan:
          type: array
          items:
            $ref: '#/components/schemas/AccessPointScan'
      required:
        - active
        - scan
    AccessPointScan:
      type: object
      properties:
        bssid:
          type: string
        frequency:
          type: string
        signal_level:
          type: integer
        auth:
          type: string
        ssid:
          type: string
      required:
        - bssid
        - ssid
    WifiStatus:
      type: object
      properties:
        wpa_state:
          $ref: '#/components/schemas/WpaState'
        id:
          type: integer
        bssid:
          type: string
        ssid:
          type: string
        freq:
          type: integer
        address:
          type: string
        pairwise_cipher:
          type: string
        group_cipher:
          type: string
        key_mgmt:
          type: string
        ip_address:
          type: string
        noise:
          type: integer
        rssi:
          type: integer
        avg_rssi:
          type: integer
        est_throughput:
          type: integer
        snr:
          type: integer
        linkspeed:
          type: integer
      required:
        - wpa_state
    CreateWifiNetwork:
      type: object
      properties:
        ssid:
          type: string
          minLength: 1
          maxLength: 32
        password:
          type: string
          minLength: 1
          maxLength: 63
      required:
        - ssid
    ModifyWifiNetwork:
      type: object
      properties:
        password:
          type: string
          minLength: 1
          maxLength: 63
      required:
        - password
    SavedNetworks:
      type: array
      items:
        $ref: '#/components/schemas/SavedNetwork'
    SavedNetwork:
      type: object
      properties:
        id:
          type: integer
        ssid:
          type: string
        state:
          type: string
          enum:
            - CONNECTED
            - DISABLED
            - TEMPORARY_DISABLED
      required:
        - id
        - ssid
    WpaState:
      type: string
      enum:
        - UNKNOWN
        - ERROR
        - DISCONNECTED
        - INTERFACE_DISABLED
        - INACTIVE
        - SCANNING
        - AUTHENTICATED
        - ASSOCIATING
        - ASSOCIATED
        - FOUR_WAY_HANDSHAKE
        - GROUP_HANDSHAKE
        - COMPLETED
    WifiCmd:
      type: string
      enum:
        - DISCONNECT
        - RECONNECT
        - REASSOCIATE
        - ENABLE_ALL_NETWORKS
        - DISABLE_ALL_NETWORKS
    WifiNetworkCmd:
      type: string
      enum:
        - ENABLE
        - DISABLE
        - SELECT
  responses:
    SuccessMessage:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err400BadRequest:
      description: The server could not understand the request due to invalid syntax or missing data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
    Err401Unauthorized:
      description: Authentication credentials were missing or incorrect. The client must authenticate itself to get the requested response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err403Forbidden:
      description: 'The request is understood, but the client does not have access rights to the content.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err409Conflict:
      description: The request conflicts with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err404NotFound:
      description: The resource does not exist or the URI is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err413PayloadTooLarge:
      description: Request entity is too large and not supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err415UnsupportedMediaType:
      description: The media format of the requested data is not supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err422UnprocessableEntity:
      description: The request was well-formed but cannot be processed. Used for already existing data which cannot be re-created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err429TooManyRequests:
      description: The client has sent too many requests in a given amount of time.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err500InternalServerError:
      description: The server has encountered a situation it does not know how to handle. Retrying the same request will most likely result in the same error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err503ServiceUnavailable:
      description: The server is not ready to handle the request. Try again later.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err507InsufficientStorage:
      description: There is insufficient storage to store the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
  securitySchemes:
    basicAuth:
      type: http
      description: Basic authentication. Please only use for single requests and testing with Swagger / OpenAPI.
      scheme: basic
    cookieAuth:
      type: apiKey
      description: Cookie based session authentication. Does not work with Swagger / OpenAPI testing.
      in: cookie
      name: id
