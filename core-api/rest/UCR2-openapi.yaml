openapi: 3.0.3
info:
  title: Remote Two REST API
  version: 0.34.1
  contact:
    name: API Support
    url: 'https://github.com/unfoldedcircle/core-api/issues'
  license:
    name: Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
    url: 'https://creativecommons.org/licenses/by-sa/4.0/'
  description: "The Unfolded Circle Remote Two REST API allows to configure the remote and manage custom resource files.\nFurthermore, API-keys for the WebSocket & REST APIs can be created.\n\n## Overview\n\nThe Remote Two WebSockets Core-API allows you to interact with the Unfolded Circle remote-core application and take\nfull control of its features.\n\nThe focus of the Core-API is to provide all functionality for the UI application and the web-configurator.  \nIt may also be used by other external systems and integration drivers, if specific configuration or interaction\nfeatures are required, which are not present in the Integration API.\n\n## Authentication\n\nAll API endpoints besides `/api/pub` are secured. Available authentication methods are:\n- `Basic Auth` for every request.  \n  This should only be used for simple testing. At the moment there's only a single user account available for the\n  web-configurator.\n  - User: `web-configurator`\n  - Password: generated pin shown in the remote UI\n- `Bearer Token` for ever request.  \n  This is the preferred authentication method for external systems communicating with the Remote Two.\n  - See `/auth/api_keys` endpoints on how to create and manage API keys.\n  - Only the `admin` role is supported at the moment. More roles will be added in the future.\n  - Example for a curl request:  \n    `curl 'http://$IP/api/system' --header 'Authorization: Bearer $API_KEY'`\n- `Cookie` based session login with the `/api/pub/login` endpoint.  \n  This is the preferred method for web frontends like the web-configurator.\n\n## \U0001F6A7 Missing Features\n\n**This API is a preview version and does not yet contain all functionality.**\n\nThe following features will be continuously added (in no particular order):\n\n- Upload of custom certificate\n- Static network configuration\n\nPlease check the [core-api GitHub issues](https://github.com/unfoldedcircle/core-api/issues) for the current state. \n\n## API Versioning\n\nThe API is versioned according to [SemVer](https://semver.org/).  \nThe initial public release will be `1.0.0` once it is considered stable enough with some initial integration\nimplementations and developer examples.\n\n**Any major version zero (`0.y.z`) is for initial development and may change at any time!**  \nI.e. backward compatibility for minor releases is not yet established, anything MAY change at any time!\nWe try avoiding it, but it might still happen...\n"
externalDocs:
  description: Find out more about the Remote Two
  url: 'https://www.unfoldedcircle.com/'
servers:
  - url: /api
  - url: 'http://localhost:8080/api'
  - url: 'https://localhost:8443/api'
  - url: 'http://unfolded-simulator.local:8080/api'
  - url: 'https://unfolded-simulator.local:8443/api'
security:
  - basicAuth: []
  - cookieAuth: []
tags:
  - name: info
    description: "\U0001F481 Public status information and health checks"
  - name: auth
    description: "\U0001F510 Session authentication"
  - name: api-keys
    description: "\U0001F511 API keys for authentication."
  - name: external-token
    description: "\U0001F48E Access token handling for external systems."
  - name: resources
    description: "\U0001F508 Media files handling, e.g. manage background images, icons or sound effects."
  - name: integrations
    description: "\U0001F9E9 Integration handling"
  - name: entities
    description: "\U0001F4FA Common handling of configured entities like sending commands and modifying editable properties.  \nEntities are usually provided by integrations, except the special activity, macro and infrared-remote entities.\n"
  - name: activities
    description: "\U0001F39B️ Combine multiple entities into an activity with optional on- & off-sequences, physical button mappings and a\ncustom user interface.\n"
  - name: macros
    description: "\U0001F522 Macros execute a sequence of commands which is exposed as an entity command. Macros don't have a custom user\ninterface.\n"
  - name: infrared
    description: "\U0001F308 Infrared code set lookup, custom IR code management and IR emitter devices.\n"
  - name: remotes
    description: "\U0001F3AE Create BT- and IR-remote-entities. Customize user interface and button mappings for all remote-entities types\nincluding external remote-entities from integrations.\n"
  - name: profiles
    description: "\U0001F464 User profile configuration with profiles, groups, pages"
  - name: cfg
    description: "\U0001F4DD Configuration settings"
  - name: dock
    description: "\U0001F6F0 Docking station management, discovery and infrared testing functions"
  - name: system
    description: ⚙️ System information and commands
paths:
  /pub/version:
    get:
      tags:
        - info
      summary: Get version information about installed components.
      operationId: getVersion
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
      security: []
  /pub/status:
    get:
      tags:
        - info
      summary: Get status information about the system.
      operationId: getStatus
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  memory:
                    type: object
                    description: Memory status
                    properties:
                      total_memory:
                        type: integer
                        description: Amount of available RAM in KB
                      available_memory:
                        type: integer
                        description: Amount of available RAM in KB for (re)use
                      used_memory:
                        type: integer
                        description: Amount of used RAM in KB
                      total_swap:
                        type: integer
                        description: SWAP size in KB
                      used_swap:
                        type: integer
                        description: Free SWAP in KB
                  load_avg:
                    type: object
                    description: System load average
                    properties:
                      one:
                        type: number
                        description: Average load within one minute
                      five:
                        type: number
                        description: Average load within five minutes
                      fifteen:
                        type: number
                        description: Average load within fifteen minutes
                  filesystem:
                    type: object
                    description: Filesystem status
                    properties:
                      user_data:
                        type: object
                        properties:
                          available:
                            type: integer
                            description: Amount of available disk space in KB
                          used:
                            type: integer
                            description: Amount of used disk space in KB
      security: []
  /pub/health_check:
    get:
      tags:
        - info
      summary: Retrieve health check information about the system and running services.
      operationId: healthCheck
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  db:
                    $ref: '#/components/schemas/HealthStatus'
                  ui:
                    $ref: '#/components/schemas/HealthStatus'
                  storage:
                    $ref: '#/components/schemas/HealthStatus'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
      security: []
  /pub/login:
    post:
      tags:
        - auth
      summary: Log in and create session.
      description: |
        A successful login returns a session authentication cookie which need to be submitted in subsequent requests.  
        The session ID is returned in a cookie named `id`.
      operationId: login
      requestBody:
        required: true
        description: A JSON object containing the username and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: []
      responses:
        '200':
          description: Successfully authenticated.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: id=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  /pub/logout:
    post:
      tags:
        - auth
      summary: Log out from session.
      description: |
        The session is removed and the session cookie named `id` is cleared.
      operationId: logout
      parameters:
        - name: id
          in: cookie
          description: Session cookie
          schema:
            type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Successfully logged out.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'id=; HttpOnly; Path=/; Max-Age=0; Expires=Sat, 26 Jun 2021 12:05:09 GMT'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
  /auth/api_keys:
    head:
      tags:
        - api-keys
      summary: Get total number of available API keys.
      operationId: getApiKeyCount
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - api-keys
      summary: List available API keys.
      description: |
        This endpoint is only intended for a management UI and not for client access. The response contains a key
        identifier in `key_id` which is required for further operations on the API key, like disabling or revoking it or
        adding a description.
      operationId: getApiKeys
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeys'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - api-keys
      summary: Create an API key for the Remote Two APIs.
      description: |
        The returned API key in `api_key` is only visible in this response. Afterwards it cannot be retrieved anymore!

        The newly created API key is usually not yet enabled for use and must first be approved by the user on the remote.

        The required scopes must be provided. They let you specify what exactly a client needs to access.
        When the access token request is displayed to the remote user for approval, the requested scopes will be
        displayed to them.

        An error is returned if an API key already exists for the provided `name`. To issue a new API key for the same
        name, the old token needs to be revoked first.
      operationId: createApiKey
      requestBody:
        description: Client information requesting access
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyRequest'
            example:
              name: My integration
              scopes:
                - admin
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - api-keys
      summary: Delete all API keys.
      description: |
        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: deleteAllApiKeys
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/auth/api_keys/{apiKeyId}':
    get:
      tags:
        - api-keys
      summary: Get information about an API key.
      description: |
        The API key itself is non-retrievable. This function provides the access rights and validity of a defined API key.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: getApiKey
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - api-keys
      summary: Update properties of an API key.
      operationId: updateApiKey
      description: |
        Activate, deactivate, rename or set validity periods of an existing API key.

        Note: access scopes cannot be changed. This requires to revoke the API key and request a new one.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      requestBody:
        description: Properties to update in the existing token.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - api-keys
      summary: Revoke an API key.
      description: |
        The API key will be deleted, no further access is possible.

        This endpoint is only intended for a management UI and not for client access. The required `key_id` parameter is
        returned in the `GET /auth/api_keys` response.
      operationId: deleteApiKey
      parameters:
        - $ref: '#/components/parameters/api_key_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /auth/scopes:
    get:
      tags:
        - api-keys
      summary: Get available access scopes.
      description: |
        Access scopes are used to create tokens for the WebSocket API.
      operationId: getAccessScopes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scopes'
  /auth/external:
    get:
      tags:
        - external-token
      summary: "\U0001F9EA Get registered external systems."
      description: |
        External systems cannot be created manually. They are automatically being created if a custom integration driver
        requests to use the "external tokens" feature. This is enabled with the driver feature `auth.external_tokens`.

        ⚠️ External integration drivers cannot use this feature.

        If the expected system name is not returned by this call, all operations on the `/auth/external/{system}` endpoints
        with that system name will fail.
        Therefore, it's advisable to either call this method first or react on the 404 error while providing or updating an
        external system token, to inform the client user, that the integration is not available on the remote.
      operationId: getExternalSystems
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalSystems'
    delete:
      tags:
        - external-token
      summary: Remove all external access tokens.
      description: |
        Management operation to delete all external access tokens. Attention: this cannot be reverted!
      operationId: deleteAllExternalAccessTokens
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  '/auth/external/{system}':
    post:
      tags:
        - external-token
      summary: "\U0001F9EA Provide an access token of an external system."
      description: |
        An access token is usually required to connect to external systems like Home Assistant.
        This method allows the external system to automatically provide the access token for the corresponding Remote
        integration instead of forcing the user to type it in. If the token name already exists for the given system,
        error `422` is returned.
        Use the PUT method to update an existing token.

        Required fields are:
        - `token_id`: the main identifier for a given system. It must be unique within that system and may not end in
          `-DATA` or `-URL`.
        - `name`: a friendly name to show in a user interface. It must be unique within that system.
        - `token`: the secret credential.

        The format of the access token depends on the external system and the involved Remote integration.
        It could be a UUID, a JWT, a PEM certificate or any other representation required for the integration to communicate
        with the external system.

        ⚠️ External access tokens can be used by the pre-installed integrations and the custom integrations installable by
        the user. External integrations cannot access the secret token value.

        ⚠️ The secret token value cannot be retrieved anymore with the API and is only available in the corresponding driver
        runtime as a credential file.

        To use the "external tokens" feature an integration driver has to request the driver feature `auth.external_tokens`.
        If enabled, an external system is automatically created with the `system` identifier matching the `driver_id`.

        Use the `GET /auth/external` method the retrieve the registered systems.

        Mapped credential files are automatically created in the corresponding integration driver runtime for the new token:
        - Environment variable `UC_TOKENS_HOME` specifies the directory containing the credential files.
        - The `token_id` value is used as credential file name for the secret token.
          - For example: for `token_id: foobar`, the credential file is accessible at the `${UC_TOKENS_HOME}/foobar` path.
          - The credential file contains the `token` field value in plain text.
        - Optional files are created for the `url` and `data` fields:
          - `{token_id}-URL` contains the `url` value. Example: `${UC_TOKENS_HOME}/foobar-URL`
          - `{token_id}-DATA` contains the `data` value. Example: `${UC_TOKENS_HOME}/foobar-DATA`
      operationId: addExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
      requestBody:
        description: Access token that needs to be added to the remote.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccessTokenRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the token identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccessTokenResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    head:
      tags:
        - external-token
      summary: "\U0001F9EA Get total number of available tokens for an external system."
      operationId: getExternalAccessTokenCount
      parameters:
        - $ref: '#/components/parameters/system'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - external-token
      summary: "\U0001F9EA List available tokens for an external system."
      operationId: getExternalAccessTokens
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccessTokens'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - external-token
      summary: Remove all access tokens of an external system.
      description: |
        All mapped credential files of the corresponding integration driver are also deleted.
      operationId: deleteExternalAccessTokensBySystem
      parameters:
        - $ref: '#/components/parameters/system'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/auth/external/{system}/{tokenId}':
    get:
      tags:
        - external-token
      summary: "\U0001F9EA Get external access token."
      description: |
        Retrieve an external access token by system and token identifiers.

        ⚠️ Only the public information of the token is returned, the secret token value itself cannot be retrieved anymore
        with the API.

        The secret token values are automatically mapped to credential files in the corresponding integration driver
        runtime. The `token_id` value is used as file name for the token, with additional files for the optional `url` and
        `data` fields.
      operationId: getExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalAccessToken'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - external-token
      summary: "\U0001F9EA Replace an existing access token of an external system."
      description: |
        This methods allows an already provided token of an external system to be updated. The token is identified by
        the system name and the token identification.

        The token, url and data values are also updated in the mapped credential files of the corresponding running
        integration driver.
      operationId: replaceExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      requestBody:
        description: Access token to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalAccessTokenRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - external-token
      summary: Remove an external access token.
      description: |
        No error is returned if the `tokenId` doesn't exist. `404` is only returned it the `system` is not found.

        The mapped credential files of the corresponding integration driver are also deleted.
      operationId: deleteExternalAccessToken
      parameters:
        - $ref: '#/components/parameters/system'
        - $ref: '#/components/parameters/token_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /resources:
    get:
      tags:
        - resources
      summary: Get supported media resource types.
      operationId: getResourceTypes
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportedResources'
              example:
                - type: Icon
                  name:
                    en: Icon
                    de: Icon
                  description:
                    en: User interface icons for entities and integrations. Icons must be of size 90x90 pixels and either in PNG or JPG format. Maximum size is 32 KB.
                    de: Icons für die Benutzeroberfläche von Objekten und Integrationen. Die Icons müssen 90x90 Pixel gross und im PNG oder JPG Format sein. Maximale Grösse ist 32 KB.
                  file_formats:
                    - png
                    - jpg
                  max_file_size: 32768
                  max_count: 100
                  image:
                    sizes:
                      - width: 90
                        height: 90
                - type: TvChannelIcon
                  name:
                    en: TV channel icon
                    de: TV Sender Icon
                  description:
                    en: User interface icons for TV channels. Icons must be of size 90x90 pixels and either in PNG or JPG format. Maximum size is 32 KB.
                    de: TV Sender Icons für die Benutzeroberfläche. Die Icons müssen 90x90 Pixel gross und im PNG oder JPG Format sein. Maximale Grösse ist 32 KB.
                  file_formats:
                    - png
                    - jpg
                  max_file_size: 32768
                  max_count: 256
                  image:
                    sizes:
                      - width: 90
                        height: 90
                - type: BackgroundImage
                  name:
                    en: Background image
                    de: Hintergrund Bild
                  description:
                    en: Background image for user interface profile pages. Images must be of size 275x480 pixels and either in PNG or JPG format. Maximum size is 1 MB.
                    de: Hintergrund Bild für Profil Seiten. Die Bilder müssen 275x480 Pixel gross und im PNG oder JPG Format sein. Maximale Grösse ist 1 MB.
                  file_formats:
                    - png
                    - jpg
                  max_file_size: 1048576
                  max_count: 30
                  image:
                    sizes:
                      - width: 275
                        height: 480
                - type: Sound
                  name:
                    en: Sound effect
                    de: Klangeffekt
                  description:
                    en: User interface sound effects. Maximum size is 1 MB.
                    de: Klangeffekte für die Benutzeroberfläche. Maximale Grösse ist 1 MB.
                  file_formats:
                    - wav
                  max_file_size: 1048576
                  max_count: 50
                  sound:
                    bits:
                      - 8
                      - 16
                    channels:
                      - 1
                      - 2
                    sampling_rates:
                      - 11025
                      - 22050
                      - 44100
                - type: BtDeviceProfile
                  name:
                    en: Bluetooth device profile
                    de: Bluetooth Geräteprofil
                  description:
                    en: Bluetooth peripheral device profile. Defines available HID commands like keyboard keys and consumer codes. Maximum size is 64 KB.
                  file_formats:
                    - json
                  max_file_size: 65536
                  max_count: 100
    delete:
      tags:
        - resources
      summary: Delete all resources.
      description: |
        ⚠️ All resources of all types are deleted if no resource-type query restriction is specified!
      operationId: deleteAllResources
      parameters:
        - $ref: '#/components/parameters/resource_type_query'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  '/resources/{type}':
    head:
      tags:
        - resources
      summary: Get total number of available resources of a given type.
      description: |
        The available resource types can be retrieved with the `GET /resources` endpoint.
      operationId: getResourceTypeItemsCount
      parameters:
        - $ref: '#/components/parameters/resource_type'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - resources
      summary: List available media resources of a given type.
      description: |
        The available resource types can be retrieved with the `GET /resources` endpoint.
      operationId: getResourceTypeItems
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceItems'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - resources
      summary: Upload media or other resource files.
      description: |
        Upload one or more resource files as form-data. Files must conform to the given type according to the metadata
        returned in `GET /api/resources`. E.g. an icon resource has other image size restrictions than a background image.

        The file names are normalized (e.g. spaces replaced with underscores) and returned as resource identifiers.

        Uploaded resources are verified, if they match expected formats. Status codes: 
        - `400`: resource doesn't confirm to the expected parameters.
        - `422`: resource already exists with the same name. Already existing resource files are NOT overwritten.
        - `507`: insufficient storage to save a new resource.
      operationId: uploadFile
      parameters:
        - $ref: '#/components/parameters/resource_type'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceItems'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
        '507':
          $ref: '#/components/responses/Err507InsufficientStorage'
    delete:
      tags:
        - resources
      summary: Delete all resources of a given type.
      operationId: deleteResources
      parameters:
        - $ref: '#/components/parameters/resource_type'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/resources/{type}/{id}':
    get:
      tags:
        - resources
      summary: Download a media resource.
      operationId: getResource
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/resource_id'
      responses:
        '200':
          description: A resource file
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpg:
              schema:
                type: string
                format: binary
            audio/wav:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - resources
      summary: Delete a media resource.
      operationId: deleteResource
      parameters:
        - $ref: '#/components/parameters/resource_type'
        - $ref: '#/components/parameters/resource_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg:
    head:
      tags:
        - integrations
      summary: Get total number of configured and external integrations.
      operationId: getIntegrationStatusCount
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - integrations
      summary: Get overview of configured and external integrations.
      description: |
        Retrieve an overview of the configured integrations and their current connection state and all external
        integrations which are ready to be configured. This overview is meant for an integration management frontend like
        the web-configurator to avoid calling multiple API endpoints to gather integration driver and instance data.
      operationId: getIntegrationStatus
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntegrationStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /intg/discover:
    get:
      tags:
        - integrations
      summary: Get external integration driver discovery status.
      description: |
        Returns the current discovery status and the discovered integration drivers.

        Use the DELETE operation to stop an active discovery and PUT to start a new discovery.
      operationId: getIntegrationDiscoveryStatus
      responses:
        '200':
          description: Integration discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDiscoveryStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    put:
      tags:
        - integrations
      summary: Start discovery of external integration drivers.
      description: |
        Start integration driver discovery on the network with mDNS. By default the discovery automatically stops after
        30 seconds. Use the GET status request to check on discovered devices or DELETE to stop discovery.

        By default only new integration drivers are returned. If a driver is already configured it will be omitted from the
        results, unless the query parameter `new=false` is set.

        - Previously discovered integrations are removed, only newly discovered integrations will be returned.
        - Emits the WebSocket event `integration_discovery` with `event_type: START` when discovery starts.
        - For each discovered driver the WebSocket event `integration_discovery` with `event_type: DISCOVER` is emitted.
      operationId: startIntegrationDiscovery
      parameters:
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 30
            minimum: 1
            maximum: 300
        - name: new
          in: query
          description: 'Only return new devices, filter out already configured integrations.'
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - integrations
      summary: Stop discovery of external integration drivers.
      description: |
        Stops the driver discovery and returns the current discovery status in the response.

        Emits the WebSocket event `integration_discovery` with `event_type: STOP`.
      operationId: stopIntegrationDiscovery
      responses:
        '200':
          description: Integration discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDiscoveryStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/intg/discover/{driverId}':
    get:
      tags:
        - integrations
      summary: Get integration driver discovery information.
      description: |
        Returns the discovered integration driver.
      operationId: getDiscoveredIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Integration discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDiscovery'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: "\U0001F9EA Execute connection test and fetch metadata from discovered integration driver."
      description: |
        Perform a driver connection test with a discovered driver. If the driver requires a token, it must be specified in
        the request body.

        Response status codes:
        - `200`: successful operation: the connection test was successful and driver metadata could be retrieved.
        - `401` / `403`: driver authentication failed. Either the driver requires a token and it was not provided, or the 
                 provided token was not valid.
        - `404`: discovered driver with `driver_id` not found. Check if the discovery result is still available and has not
                 been deleted. This can happen after a timeout since the discovery, or if the discovery result has been
                 cleared with starting a new discovery.
        - `503`: integration driver connection could not be established.
      operationId: getDiscoveredIntgDriverMetadata
      parameters:
        - $ref: '#/components/parameters/driver_id'
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 5
            minimum: 3
            maximum: 60
      requestBody:
        required: false
        description: Command payload
        content:
          application/json:
            schema:
              description: Driver connection parameters.
              type: object
              properties:
                connection:
                  type: object
                  properties:
                    driver_url:
                      description: |
                        Custom URL to connect to driver. If not specified the mDNS connection information is used.
                      type: string
                    token:
                      description: |
                        Optional driver authentication token.
                      type: string
                      maxLength: 2048
            examples:
              Connection test without token and discovered driver url:
                value: {}
              Connection test with token:
                value:
                  connection:
                    token: '0000'
              Connection test with custom driver url:
                value:
                  connection:
                    driver_url: 'ws://my-integration.local:8080'
      responses:
        '200':
          description: Command response
          content:
            application/json:
              schema:
                type: object
                properties:
                  driver:
                    $ref: '#/components/schemas/IntegrationDriver'
                required:
                  - driver
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    post:
      tags:
        - integrations
      summary: Register a discovered integration driver.
      description: |
        Register a discovered integration driver:
        - establish communication with the driver.
          - if the driver requires a password, it must be provided in the request.
          - the discovered driver name and url can be overridden.
        - fetch metadata from the driver.
        - check compatability.
        - register the driver and connection parameters in the remote.

        After a successful registration the setup process of the driver can be started to configure the integration.
        The required setup data is described in the returned `setup_data_schema` and the provided values by the user must
        be passed to the `POST /intg/setup` operation.

        Response status codes:
        - `400`: invalid data in request body.
        - `401` / `403`: driver authentication failed. Either the driver requires a token and it was not provided, or the 
                 provided token was not valid.
        - `404`: no discovered driver found for given `driver_id`.
        - `409`: integration driver is already registered.
        - `503`: integration driver communication error. Either driver is not reachable or communication failed.
      operationId: configureDiscoveredIntgDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        description: Command payload
        content:
          application/json:
            schema:
              description: Driver connection parameters.
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/LanguageText'
                driver_url:
                  description: 'Custom WebSocket URL of the driver, otherwise the discovered driver address is used.'
                  type: string
                  format: uri
                  maxLength: 2048
                token:
                  description: |
                    Optional driver authentication token.
                  type: string
                  maxLength: 2048
            examples:
              Default:
                value: {}
              Configure driver with custom url:
                value:
                  driver_url: 'ws://my-integration.local:8080'
              Configure driver with default name & url and custom token:
                value:
                  token: '0000'
              Configure driver with custom name:
                value:
                  name:
                    en: My integration
                    de: Meine Integration
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /intg/install:
    post:
      tags:
        - integrations
      summary: "\U0001F9EA Upload and install a custom integration."
      description: |
        Install a custom integration driver from an integration driver installation archive.

        ℹ️ This is a synchronous operation which takes at least 10 seconds to complete for a small Node.js driver.
        Larger archives will require more time. This might change to async processing and background installation in the future. 

        Integration driver archive requirements:
        - TAR GZip archive (either .tgz or .tar.gz file suffix) with a maximum size of 100 MB.
        - In the root of the archive, there must be a `driver.json` file describing the custom integration driver.  
          See `IntegrationDataMetadata` schema for the driver.json format.
        - The driver binary must be in the `./bin` subdirectory.
          - Either a statically linked aarch64 executable named `driver`.
          - Or a Node.js file named `driver.js`.
        - All application files must be in one of the following subdirectories, other locations are not accessible at runtime:
          - `./bin`: application binary, usually only `driver`.
          - `./config`: configuration data. Path is accessible with `UC_CONFIG_HOME` environment variable.
          - `./data`: application data. Path is accessible with `UC_DATA_HOME` environment variable.

        Restrictions:
        - Maximum 10 custom integrations can be installed.
        - Only Node.js is supported besides a statically linked binary. Other runtimes are not supported at the moment.
        - The integration driver runs in a sandbox. Access to devices and the filesystem is restricted.
        - No symlinks are allowed. They are automatically removed during the installation.
        - Executable files are only allowed in the `./bin` directory.
          - An integration driver should be limited to one process and not launch other processes.
          - No other tools are provided in the runtime environment. E.g. there is no shell available and no other tools
            like `cp` or `mv`.
        - Only the `config` and `data` directories are writeable and persisted between restarts.
          - The `/tmp` directory can be used for small temporary files. Files are not persisted between restarts.
        - File access with relative paths between `bin`, `config`, and `data` is not possible.
          - Environment variables must be used to retrieve the full path of these directories.
            - `UC_CONFIG_HOME` and `HOME`: configuration directory.
            - `STATE_DIRECTORY`: data directory.
          - The returned path may not be stored, it may change with future software updates.

        To delete a custom integration, use the regular endpoints to delete an integration instance and driver:
        - Delete integration `DELETE /api/intg/instances/:intgId`.
        - Delete driver and installation files: `DELETE /api/intg/drivers/:driverId`.

        Error response codes:
        - `400`: invalid archive, missing data in archive or included metadata cannot be read.
        - `409`: custom integration is not compatible with the current firmware or the maximum amount of custom integration
                 installations has been reached.
        - `413`: archive is too large.
        - `422`: integration is already installed, or the `driver_id` has been used by another integration.
        - `503`: service unavailable, an installation is already running or a fatal error occurred at a previous
                 installation and the device needs to be restarted.
        - `507`: insufficient storage to upload and process installation archive.
      operationId: installCustomIntegration
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: TAR GZip Archive file with the custom integration. File extension must be `.tar.gz` or `.tgz`.
                  type: string
                  format: binary
      responses:
        '201':
          description: Custom integration successfully installed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriverInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '413':
          $ref: '#/components/responses/Err413PayloadTooLarge'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
        '507':
          $ref: '#/components/responses/Err507InsufficientStorage'
  /intg/setup:
    get:
      tags:
        - integrations
      summary: Get current integration setup processes.
      description: |
        Return a list of all active setup process identifiers. The returned ids can be used with the
        `/intg/setup/:id` endpoints to continue or abort a setup process.
      operationId: getIntegrationSetupProcesses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - integrations
      summary: Start setting up a new integration driver.
      description: |
        Start a new setup process for the given integration driver and provided setup data, or reconfigure an existing
        driver.

        - This operation immediately starts the driver communication and setup process.
        - There may only be one active setup process per driver, otherwise status code `409` is returned.

        The returned `id` in the `IntegrationSetupInfo` response will be the identifier for the further setup operations
        with the `/intg/setup/:driver_id` endpoints. Once the setup process is successfully finished, an integration instance is
        created. A setup process can be simple and fully automatic, but may also require user interaction and further
        communication with the `/intg/setup/:driver_id` endpoint.

        Emits the WebSocket event `integration_setup_change` with `event_type: START`.

        Request body:
        - `name`: optional integration name. If not specified the name of the integration driver is used.
        - `setup_data`: optional driver setting values corresponding to the driver's `setup_data_schema` object.
        - `reconfigure`: set to true to reconfigure an already configured driver. The configuration options and behaviour
          is driver dependent.

        Response status codes:
        - `400`: invalid data in request body. E.g. setting the reconfigure flag for a new driver which is not yet configured.
        - `404`: specified `driver_id` in request body does not exist.
        - `409`: a setup process for the given `driver_id` already exists. Either continue or abort existing process.
        - `422`: the setup process cannot be used: either the integration is already configured or doesn't allow to be
                 set up again.  
        - `503`: integration driver communication error. Either driver is not reachable or communication failed.
      operationId: setupIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntegrationSetup'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSetupInfo'
              example:
                id: sim-test
                state: SETUP
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - integrations
      summary: Abort and remove all setup processes.
      description: |
        Stop all setup processes at the next possible operation and remove all setup process information.  
        Depending on the integration driver, a started setup process cannot be aborted.

        ⚠️ This stops all setup processes, not just for the current session!
      operationId: stopAllIntegrationSetups
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/intg/setup/{driverId}':
    get:
      tags:
        - integrations
      summary: Get integration driver setup status.
      description: |
        Poll operation to retrieve the current integration driver setup state. See the `state` and `error` fields in the
        response message. There are also WebSocket `integration_setup_change` event messages for state changes to avoid
        polling.

        Defined setup states:
        - `SETUP`: setup is running and configuring the integration. 
        - `WAIT_USER_ACTION`: user input is required to continue the setup process. See `require_user_action` in response
           for the required user input. Provide the requested data with the `PUT` operation.
        - `OK`: setup process has been completed successfully, the integration driver can now be used.
        - `ERROR`: the setup process failed. Check the `error` field for more information.
      operationId: getIntegrationSetupStatus
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSetupInfo'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Provide requested integration setup data.
      description: |
        Set required data to configure the integration driver or continue the setup process.

        Defined user actions to set in the request body `action` field:
        - `input_values`: if the user was requested to enter settings, e.g. connection or credential parameters to a device
          or service.
        - `confirm`: response to the user action `confirmation`. Set to `true` if the user had to perform an action like
          pressing a button on a device and then confirms the action with continuing the setup process.  
          The `false` value is prepared for yes / no choices.

        The `state` field in the response message indicate the current state of the setup process. Use the `GET` operation
        to poll for state updates or listen to the corresponding WebSocket `integration_setup_change` event messages with
        `event_type: SETUP`.
      operationId: setIntegrationUserData
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    input_values:
                      $ref: '#/components/schemas/SettingsValues'
                  required:
                    - input_values
                - type: object
                  properties:
                    confirm:
                      type: boolean
                  required:
                    - confirm
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationSetupInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - integrations
      summary: Abort the integration driver setup process.
      description: |
        Stop the setup process at the next possible operation and remove the setup process information.  
        To start a new setup process, use the `POST /intg/setup` operation again.

        Depending on the integration driver, a started setup process cannot be aborted.

        Emits the WebSocket event `integration_setup_change` with `event_type: STOP`.
      operationId: stopIntegrationSetup
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg/drivers:
    head:
      tags:
        - integrations
      summary: Get total number of registered integration drivers.
      operationId: getIntegrationDriversCount
      parameters:
        - name: driver_type
          in: query
          description: Filter by driver type.
          schema:
            type: string
            enum:
              - LOCAL
              - CUSTOM
              - EXTERNAL
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/instantiable'
        - $ref: '#/components/parameters/single_device'
        - $ref: '#/components/parameters/has_instances'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - integrations
      summary: Get all registered integration drivers.
      description: |
        Returns an overview of all registered drivers. To retrieve all driver data use `/intg/drivers/{driverId}`.
      operationId: getIntegrationDrivers
      parameters:
        - name: driver_type
          in: query
          description: Filter by driver type.
          schema:
            type: string
            enum:
              - LOCAL
              - CUSTOM
              - EXTERNAL
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/instantiable'
        - $ref: '#/components/parameters/single_device'
        - $ref: '#/components/parameters/has_instances'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDrivers'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - integrations
      summary: "\U0001F9EA Manually register a new integration driver."
      description: |
        A driver provides the connection parameters and optional setup configuration for an integration driver.

        Registering a driver requires that the driver is running and responding to requests on the given URL. The driver
        details will be fetched and stored in the Remote.

        Depending on the driver capabilities it either provides a single access point to the provided entities, or exposes
        multiple devices, each with its own unique set of entities. The former could for example be used to provide GPIO
        access of a Raspberry Pi or gather all supported devices it is able to interact with (e.g. network sensors, light
        switches etc.). The more capable multi-device mode is suited to bridge home automation hubs where multiple
        instances should be supported.

        Once a driver is registered, one or more integration instances must be configured to interact with the driver.  
        For simple integration drivers there's a 1:1 relationship between an instance and driver. For multi-device drivers, 
        each device corresponds to an integration instance.

        It is recommended to manually set a unique and human-readable driver identifier in `driver_id`. Otherwise a UUID
        will be assigned. The `driver_id` is required for all further interactions with the driver, like creating a runtime
        instance to connect to the driver and fetch available entities.
      operationId: registerIntegrationDriver
      requestBody:
        description: Integration driver data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationDriverRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the created integration driver in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/drivers/{driverId}':
    get:
      tags:
        - integrations
      summary: Get integration driver metadata.
      description: |
        Returns the full data of an integration driver, except the authentication token for external clients.
      operationId: getIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - integrations
      summary: Modify connection parameters of an external integration driver.
      description: |
        Update connection settings of an external integration driver if the URL or access token has changed. The new
        settings are immediately applied and the driver communication verified. This might take a few seconds.  
        The driver's own optional configuration settings cannot be applied with this operation and are configured during
        the setup process, or through the integration instance.

        - Only external integration drivers can be modified. Otherwise `400` (Bad Request) is returned.
        - Connection settings are tested and applied against the driver.
          - `503` (Service Unavailable) is returned if the driver communication fails.
          - If the driver is not active, the settings are only applied and not tested! This is for development use only.
        - See request description on how to update or remove an existing setting.
      operationId: updateIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        description: Entity data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationDriverUpdate'
        required: true
      responses:
        '200':
          description: Successful operation returning the updated integration driver in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDriver'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - integrations
      summary: Execute a command on an integration driver.
      description: |
        Available driver commands:
        - `CONNECTION_TEST`: perform a driver connection test with the connection parameters in the payload.
        - `START`: Manually start an integration driver.
        - `STOP`: Manually stop a driver to disable all integration instances processing.

        Response status codes:
        - `200`: successful operation, e.g. the connection test was successful.
        - `400`: bad request, e.g. connection parameters missing for connection test command.
        - `503`: integration driver connection could not be established.

        If a driver is enabled it will start automatically. Manually starting and stopping a driver is for testing purposes
        and setting up new drivers in the web-configurator.
      operationId: integrationDriverCommand
      parameters:
        - $ref: '#/components/parameters/driver_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECTION_TEST
              - START
              - STOP
      requestBody:
        required: false
        description: Command payload
        content:
          application/json:
            schema:
              description: Driver connection parameters for `CONNECTION_TEST` command only.
              type: object
              properties:
                driver_url:
                  description: WebSocket URL of the driver.
                  type: string
                  format: uri
                  maxLength: 2048
                token:
                  description: |
                    Optional driver authentication token.
                  type: string
                  maxLength: 2048
              required:
                - driver_url
            examples:
              Connection test:
                value:
                  driver_url: 'ws://192.168.1.200:8000/ws'
                  token: '0000'
              Other:
                value: null
      responses:
        '200':
          description: |
            Successful operation, returns the `IntegrationDriver` object for the `CONNECTION_TEST` command, otherwise the
            common `ApiResponse` object.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IntegrationDriver'
                  - $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    post:
      tags:
        - integrations
      summary: Create a new integration instance from driver.
      description: |
        Create an integration driver instance and associate it with the driver.  
        For simple integration drivers there's a 1:1 relationship only between an instance and driver.
        For multi-device drivers, each device corresponds to an integration instance.

        - the `integration_id` is automatically created by the system to make it unique over all integrations.
        - for multi-device drivers the `device_id` must be specified and may not already exist in another instance of the
          same driver.
        - the driver's name is used by default if `name` isn't specified.
        - the instance is active by default if `enabled` isn't specified.
      operationId: createIntegration
      parameters:
        - $ref: '#/components/parameters/driver_id'
      requestBody:
        description: Integration instance data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationUpdate'
        required: true
      responses:
        '201':
          description: Successful operation returning the created integration instance in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - integrations
      summary: Remove an integration driver.
      description: |
        Unloads and deletes an integration driver with all instances and provided entities.

        ⚠️ **Attention**:
        - All references to the integration driver will be removed! This includes all driver instances,
        provided entities and their references in profile pages and groups.
        - If the driver is a custom installed driver, the driver will be removed from the remote, including all
        configuration settings.
        - If an external access token system has been created for the driver, it will be removed as well, including all
          associated tokens!
      operationId: deleteIntegrationDriver
      parameters:
        - $ref: '#/components/parameters/driver_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /intg/instances:
    head:
      tags:
        - integrations
      summary: Get total number of integration instances.
      operationId: getIntegrationsCount
      parameters:
        - $ref: '#/components/parameters/enabled'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - integrations
      summary: Get all integration instances.
      operationId: getIntegrations
      parameters:
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integrations'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Connect or disconnect all integration instances.
      description: |
        Execute a command on all active integration instances:

        - `connect`: requests all enabled integrations to establish a session to the integration driver and start processing
          events.  
          Use `GET /intg/instances` or `GET /intg/instances/{intgId}` to check on the connection status.
        - `disconnect`: disconnects all active integration driver sessions.
      operationId: executeCommandOnAllIntegrations
      parameters:
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}':
    get:
      tags:
        - integrations
      summary: Get an integration instance.
      operationId: getIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - integrations
      summary: Modify a configured integration instance.
      description: |
        Modify one or several properties of an integration instance.  
        See update model description on how to update or delete an existing property.

        The integration driver of an instance cannot be changed and will be ignored if provided in the request.
      operationId: updateIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      requestBody:
        description: Integration instance data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationUpdate'
        required: true
      responses:
        '201':
          description: Successful operation returning the updated integration instance in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - integrations
      summary: Remove an integration instance.
      description: |
        Unloads and deletes an integration instance.

        **Attention: all references to the integration instance will be removed! This includes configured entities and 
        their references in profile pages and groups.**
      operationId: deleteIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - integrations
      summary: Connect or disconnect an integration instance.
      description: |
        Exectue a command on the integration instance:

        - `connect`: establish a session to the integration driver and start processing events.  
          Use `GET /intg` or `GET /intg/instances/{intgId}` to check on the connection status.
        - `disconnect`: disconnect from the driver and stop processing events.
      operationId: executeIntegrationCommand
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}/entities':
    get:
      tags:
        - integrations
      summary: Get available entities from integration instance.
      description: |
        Retrieve the available entities provided by the integration instance.

        By default only the entities are returned which are not yet configured. Use the `filter` query to include all or
        only the already configured entities.

        Available entities can be searched and filtered by one or multiple entity types. The text search searches in the
        entity name, entity identifier and area.
      operationId: getAvailableEntitiesFromInstance
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - name: reload
          in: query
          description: Force reload available entities from driver.
          required: false
          schema:
            type: boolean
            default: false
        - name: filter
          in: query
          description: Filter available entities.
          required: false
          schema:
            type: string
            default: NEW
            enum:
              - NEW
              - CONFIGURED
              - ALL
        - $ref: '#/components/parameters/entity_types'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableEntity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - integrations
      summary: Configure multiple available entities.
      description: |
        Configure multiple new Remote Two entities from available integration entities. Once configured, the entities will
        no longer show up as an available entity (unless the `filter=ALL` query parameter is set).

        An empty request body array will configure all available entities.

        Use endpoint `/intg/instances/{intgId}/entities/{entityId}` to configure a single entity and optionally rename it
        or change its icon.

        This is a best effort operation:
        - if an entity is already configured, it is ignored and not returned in the response.
        - unknown entity identifiers are ignored, no error is returned

        Every newly configured entity will trigger an `entity_change` event.
      operationId: configureEntitiesFromIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
      requestBody:
        description: Entity identifiers.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '201':
          description: Successful operation returning the configured entity identifiers in the response.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/intg/instances/{intgId}/entities/{entityId}':
    post:
      tags:
        - integrations
      summary: Configure an available entity.
      description: |
        Configure a new Remote Two entity from an available integration entity. Once configured, the entity will no longer
        show up as available entity (unless the `filter=ALL` query parameter is set).

        The entity `name`, `icon` and `description` fields may be changed. If not specified in the request the values from
        the available entity are used.
      operationId: configureEntityFromIntegration
      parameters:
        - $ref: '#/components/parameters/integration_id'
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Entity data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityUpdateRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the configured entity in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
  /entities:
    head:
      tags:
        - entities
      summary: Get total number of configured entities.
      operationId: getEntityCount
      parameters:
        - $ref: '#/components/parameters/entity_types'
        - $ref: '#/components/parameters/intg_ids'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - entities
      summary: Search and retrieve configured entities.
      description: |
        Returns all configured and loaded entities.

        Entities can be searched and filtered by one or multiple types and integrations. The text search searches in the
        entity name, entity identifier and integration name.
      operationId: getEntities
      parameters:
        - $ref: '#/components/parameters/entity_types'
        - $ref: '#/components/parameters/intg_ids'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    delete:
      tags:
        - entities
      summary: Remove configured entities.
      description: |
        Unloads and deletes multiple configured entities, either by integration identifier or by entity identifiers.
        If a deleted entity is still provided from an integration, it can be reused and will show up again as
        available entity from its integration.

        ⚠️ An empty `entity_ids` array will delete all configured entities!

        All references to the configured entities will be removed from profile pages and groups.

        This is a best effort operation:
        - unknown entity identifiers are ignored, no error is returned

        Deleted entities will trigger an `entity_change` event with `event_type: DELETE`. If a large amount of entities
        are deleted, a single, generic `entity_change` event might be sent instead (without an `entity_id` field).
      operationId: deleteEntities
      requestBody:
        description: Integration or entity identifiers.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityDeleteRequest'
            examples:
              by integration:
                value:
                  integration_id: hass.main
              by entity identifiers:
                value:
                  entity_ids:
                    - hass.main.sensor.1
                    - hass.main.sensor.2
                    - hass.main.light.1
              all entities:
                value:
                  entity_ids: []
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/entities/{entityId}':
    get:
      tags:
        - entities
      summary: Get a configured entity.
      operationId: getEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - entities
      summary: Modify a configured entity.
      operationId: updateEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Entity data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityUpdateRequest'
        required: true
      responses:
        '201':
          description: Successful operation returning the configured entity in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - entities
      summary: Remove a configured entity.
      description: |
        Unloads and deletes a configured entity. If the entity is still provided from an integration it can be reused and
        will show up again as available entity from its integration.

        All references to the configured entity will be removed from profile pages and groups.
      operationId: deleteEntity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/entities/{entityId}/command':
    put:
      tags:
        - entities
      summary: Execute an entity command.
      operationId: executeEntityCommand
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Command data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCommand'
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
  /activities:
    head:
      tags:
        - activities
      summary: Get total number of activity entities.
      description: |
        The total number of available activities are returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the activities with the `GET` operation and paging parameters.

        The optional text search query searches in the activity name and activity identifier.
      operationId: getActivityCount
      parameters:
        - name: in_group
          in: query
          description: Only activities in any activity group
          required: false
          schema:
            type: boolean
        - name: group_id
          in: query
          description: Only activities in this activity group
          required: false
          schema:
            $ref: '#/components/schemas/SimpleId'
        - $ref: '#/components/parameters/query'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - activities
      summary: Get activity entities overview with paging.
      description: |
        Returns an overview of all defined activities with the given paging parameters. Use the `HEAD` operation to retrieve
        the total number of defined activities.

        The optional text search query searches in the activity name and activity identifier.
            
        The overview information doesn't include all details of an activity. The full activity information is retrievable
        with `/activities/{entityId}`.
      operationId: getActivities
      parameters:
        - name: in_group
          in: query
          description: Only activities in any activity group
          required: false
          schema:
            type: boolean
        - name: group_id
          in: query
          description: Only activities in this activity group
          required: false
          schema:
            $ref: '#/components/schemas/SimpleId'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activities'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - activities
      summary: Create a new activity entity.
      description: |
        Create a new entity of type `activity`. An activity entity is a special internal entity without association to an
        integration driver.

        To create a new activity at least a name must be provided. The `icon`, `description` and `options.entity_ids`
        are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        An activity can be cloned from another activity-, macro- or remote-entity identifier in `clone_from`. 
        All applicable configuration will be copied, except a new activity name must be specified. The `icon` and
        `description` fields can still be specified and will override the copied data. The `options.entity_ids` is
        not allowed when cloning data, additional entities can be added later with the `PUT` update operation.

        The `entity_ids` may be omitted when creating a new activity and specified later when updating the activity.
      operationId: createActivity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityRequest'
            examples:
              simple:
                value:
                  name:
                    en: My new activity
              activity with icon and description:
                value:
                  name:
                    en: My new activity
                  icon: 'uc:bell'
                  description:
                    en: Testing the activity feature
              clone:
                value:
                  name:
                    en: My cloned activity
                  clone_from: uc.main.activity.watch-tv
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - activities
      summary: Delete all activity entities.
      description: |
        ⚠️ All defined activities will be irrevocably deleted!
      operationId: deleteAllActivities
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/activities/{entityId}':
    get:
      tags:
        - activities
      summary: Get an activity by its entity_id.
      description: "Returns all the information required to manage an existing activity. The included entities are enriched with `name`,\n`icon`, `entity_type`, available commands and if the entity is still available or has been removed since the\nactivity was defined.\n\nThe available entity commands are divided into:\n- `entity_commands`: regular entity commands as defined in the [entity documentation](https://github.com/unfoldedcircle/core-api/tree/main/doc/entities).\n   The identifier refers to the common entity command definitions, which describe all required parameters for \n   defining a command. This includes the mandatory `cmd_id` name and optional parameters.\n\n   \U0001F477 TODO endpoint to retrieve entity command definitions.\n- `simple_commands`: additional, simple dynamic commands of an entity. Like infrared code commands of a\n   remote-entity. A simple command relates directly to the `cmd_id` attribute when executing a command and there's\n   no further mapping as for _entity_commands_.\n"
      operationId: getActivity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update an activity entity.
      operationId: updateActivity
      description: |
        Update one or multiple properties of an activity. The omitted properties are ignored and not deleted. To clear an
        array simply provide an empty array.

        - Button mappings are configured with the dedicated `/activities/{entityId}/buttons` and
        `/activities/{entityId}/buttons/{button}` endpoints.
        - The user interface is configured with the dedicated `/activities/{entityId}/ui`, `/activities/{entityId}/ui/pages`
          and `/activities/{entityId}/ui/pages/{pageId}` endpoints.
        - Sequence-commands are composed of command definitions (see description of `entity_commands` and
          `simple_commands` in GET operation). The `entity_id` and `cmd_id` attributes are always required. The `params`
          object is only required for `entity_commands` having parameters. 
        - The special `"type": "delay"` command is not described in the entity command definitions and can only be used in
          sequences.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing activity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Delete an activity entity.
      description: |
        ⚠️ The given activity is irrevocably deleted.
      operationId: deleteActivity
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/buttons':
    get:
      tags:
        - activities
      summary: Get the physical button mappings.
      operationId: getActivityButtonMappings
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Reset the physical button mappings to their default state.
      description: |
        An automatic mapping of common functions to the physical buttons is performed. This depends on the chosen entities,
        e.g. an audio device will map the volume up & down keys and a TV or set-top box will map the channel up & down
        commands.

        ⚠️ The previous customization of the physical button mapping is irrevocably deleted.
      operationId: resetActivityButtonMappings
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/buttons/{buttonId}':
    get:
      tags:
        - activities
      summary: Get a physical button mapping.
      operationId: getActivityButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMapping'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update a physical button mapping.
      description: |
        Update the button mapping for either a short- or a long-press.
      operationId: updateActivityButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    short_press:
                      $ref: '#/components/schemas/EntityCommand'
                  required:
                    - short_press
                - type: object
                  properties:
                    long_press:
                      $ref: '#/components/schemas/EntityCommand'
                  required:
                    - long_press
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMapping'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Remove a physical button mapping.
      description: |
        ⚠️ The previous customization of the physical button mapping is irrevocably deleted.
      operationId: deleteActivityButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/buttons/{buttonId}/{buttonPress}':
    get:
      tags:
        - remotes
      summary: Get a button press mapping.
      operationId: getActivityButtonPressMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
        - $ref: '#/components/parameters/button_press'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityCommand'
              example:
                cmd_id: HOME
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Remove a button press mapping.
      operationId: deleteActivityButtonPressMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
        - $ref: '#/components/parameters/button_press'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/ui':
    get:
      tags:
        - activities
      summary: Get the user interface definition of an activity.
      description: |
        Returns all the information required to manage an existing activity user interface.

        At the moment a user interface only consists of pages.
      operationId: getActivityUi
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterface'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Reset an activity user interface to its default state.
      description: |
        ⚠️ The customization of the activity user interface is irrevocably deleted.
      operationId: deleteActivityUi
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterface'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/ui/pages':
    post:
      tags:
        - activities
      summary: Create a new user interface page
      description: |
        Append a new empty page to the user interface pages. The new page identifier is returned in the response.

        The payload fields are optional. A page name and the items of the page can be specified, or later be added with 
        `PATCH /activities/{entityId}/ui/pages/{pageId}`. If `grid` is not specified, the default grid size is used from
        the screen metadata layout in `GET /cfg/device/screen_layout`
      operationId: createActivityUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUserInterfacePageUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_id:
                    $ref: '#/components/schemas/SimpleId'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - activities
      summary: Get the user interface pages of an activity.
      operationId: getActivityUiPages
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update the activity user interface page order.
      operationId: updateActivityUiPageOrder
      description: |
        Reorder the pages in the user interface according to the page identifiers in the `page_order` array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page_order:
                  type: array
                  items:
                    $ref: '#/components/schemas/SimpleId'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Reset the activity user interface pages to the default state.
      description: |
        The default page(s) is created and the page array returned.

        ⚠️ The customization of the activity user interface is irrevocably deleted.
      operationId: resetActivityUiPages
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/activities/{entityId}/ui/pages/{pageId}':
    get:
      tags:
        - activities
      summary: Get the user interface page definition of a remote-entity.
      operationId: getActivityUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update an activity user interface page.
      operationId: updateActivityUiPage
      description: |
        Update one or multiple properties of an activity user interface page. The omitted properties are ignored and not
        deleted. To clear an array simply provide an empty array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      requestBody:
        description: Properties to update in the existing activity user interface page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUserInterfacePageUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterfacePage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Delete an activity user interface page.
      description: |
        The given page is removed and the array of remaining pages is returned.

        ⚠️ The customization of the activity user interface page is irrevocably deleted.
      operationId: deleteActivityUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /activity_groups:
    head:
      tags:
        - activities
      summary: Get total number of activity groups.
      description: |
        The total number of activity groups is returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the groups with the `GET` operation and paging parameters.
      operationId: getActivityGroupCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - activities
      summary: Get activity groups overview with paging.
      description: |
        Returns an overview of all defined activity groups with the given paging parameters. Use the `HEAD` operation to
        retrieve the total number of defined groups.

        The overview information doesn't include all details of an activity group. The full group information is
        retrievable with `/activity_group/{groupId}`.
      operationId: getActivityGroups
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityGroups'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - activities
      summary: Create a new activity group.
      description: |
        Create a new activity group.
      operationId: createActivityGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityGroupUpdate'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - activities
      summary: Delete all activity groups.
      description: |
        ⚠️ All defined activity groups will be irrevocably deleted!
      operationId: deleteAllActivityGroups
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/activity_groups/{groupId}':
    get:
      tags:
        - activities
      summary: Get an activity group by its group_id.
      description: |
        Returns all the information required to manage an existing activity group.
      operationId: getActivityGroup
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityGroup'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - activities
      summary: Update an activity group.
      operationId: updateActivityGroup
      description: |
        Update one or multiple properties of an activity group. The omitted properties are ignored and not deleted.
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        description: Properties to update in the existing activity group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityGroupUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityGroup'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - activities
      summary: Delete an activity group.
      description: |
        ⚠️ The given activity group is irrevocably deleted.
      operationId: deleteActivityGroup
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /macros:
    head:
      tags:
        - macros
      summary: Get total number of macro entities.
      description: |
        The total number of available macros are returned in the `Pagination-Count` header. This allows to prepare the
        retrieval of the macros with the `GET` operation and paging parameters.
      operationId: getMacroCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - macros
      summary: Get macro entities overview with paging.
      description: |
        Returns an overview of all defined macros with the given paging parameters. Use the `HEAD` operation to retrieve
        the total number of defined macros.

        The overview information doesn't include all details of a macro. The full macro information is retrievable
        with `/macros/{entityId}`.
      operationId: getMacros
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macros'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - macros
      summary: Create a new macro entity.
      description: |
        Create a new entity of type `macro`. An macro entity is a special internal entity without association to an
        integration driver.

        To create a new macro at least a name must be provided. The `icon`, `description` and `options.entity_ids`
        are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        The new macro can be cloned from another macro-entity identifier in `clone_from`. All applicable configuration will
        be copied, except a new macro name must be specified. The `icon` and `description` fields can still be specified and
        will override the copied data. The `options.entity_ids` is not allowed when cloning data, additional entities
        can be added later with the `PUT` update operation.

        The `entity_ids` may be omitted when creating a new macro and specified later when updating the macro.
      operationId: createMacro
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroCreate'
            examples:
              simple:
                value:
                  name:
                    en: My new macro
              macro with icon and description:
                value:
                  name:
                    en: My new macro
                  icon: 'uc:bell'
                  description:
                    en: Testing the macro feature
              clone:
                value:
                  name:
                    en: My cloned macro
                  clone_from: uc.main.macro.vacation-mode
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - macros
      summary: Delete all macro entities.
      description: |
        ⚠️ All defined macros will be irrevocably deleted!
      operationId: deleteAllMacros
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/macros/{entityId}':
    get:
      tags:
        - macros
      summary: Get a macro by its entity_id.
      description: |
        Returns all the information required to manage an existing macro. The included entities are enriched with `name`,
        `icon`, `entity_type`, available commands and if the entity is still available or has been removed since the
        macro was defined.
      operationId: getMacro
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - macros
      summary: Update a macro entity.
      operationId: updateMacro
      description: |
        Update one or multiple properties of a macro. The omitted properties are ignored and not deleted. To clear an
        array simply provide an empty array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing macro.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - macros
      summary: Delete a macro entity.
      description: |
        ⚠️ The given macro is irrevocably deleted.
      operationId: deleteMacro
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /ir/codes/manufacturers:
    get:
      tags:
        - infrared
      summary: Search supported infrared device manufacturers.
      description: |
        Device manufacturer search. The returned manufacturer identification will be used for the manufacturer specific IR
        code set search with `GET /ir/codes/manufacturers/{manufacturerId}`.
      operationId: searchIrDeviceManufacturers
      parameters:
        - name: q
          in: query
          description: Manufacturer name query
          required: true
          schema:
            type: string
            minLength: 2
          example: Lucky Goldstar
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: Manufacturer identification
                      type: string
                    name:
                      description: Manufacturer name
                      type: string
                    custom:
                      description: Flag indicating if this manufacturer was created by the user
                      type: boolean
                  required:
                    - id
                    - name
              example:
                - id: lg
                  name: LG
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/manufacturers/{manufacturerId}':
    get:
      tags:
        - infrared
      summary: Search for infrared device code sets by manufacturer to create a remote entity.
      description: |
        Searching without the optional device query will only return the generic manufacturer IR code sets.
      operationId: searchInfraredDevice
      parameters:
        - name: manufacturerId
          in: path
          description: Manufacturer identification from search
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: Device name query for fulltext search. At least two characters are required.
          required: false
          schema:
            type: string
            minLength: 2
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      description: Code set identifier
                      type: string
                    name:
                      description: Device name
                      type: string
                    custom:
                      description: Flag indicating if this manufacturer was created by the user
                      type: boolean
                  required:
                    - id
                    - name
              example:
                - id: '1'
                  name: Generic TV 1
                  custom: false
                - id: '2'
                  name: Generic TV 2
                  custom: false
                - id: '3'
                  name: Generic TV 3
                  custom: false
                - id: '4'
                  name: Generic Projector
                  custom: false
                - id: '5'
                  name: My BluRay Player
                  custom: true
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/manufacturers/{manufacturerId}/{codeSetId}':
    get:
      tags:
        - infrared
      summary: Retrieve IR codeset command information for testing IR commands.
      description: |
        Returns all command identifiers of a given manufacturer code set.
      operationId: getManufacturerCodeSet
      parameters:
        - name: manufacturerId
          in: path
          required: true
          schema:
            type: string
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - POWER_ON
                - POWER_OFF
                - POWER_TOGGLE
                - VOLUME_UP
                - VOLUME_DOWN
                - MUTE
                - CHANNEL_UP
                - CHANNEL_DOWN
                - DPAD_LEFT
                - DPAD_RIGHT
                - DPAD_UP
                - DPAD_DOWN
                - ENTER
                - OSD
                - SETUP
                - NUMPAD_0
                - NUMPAD_1
                - NUMPAD_2
                - NUMPAD_3
                - NUMPAD_4
                - NUMPAD_5
                - NUMPAD_6
                - NUMPAD_7
                - NUMPAD_8
                - NUMPAD_9
                - HDMI_1
                - HDMI_2
                - HDMI_3
                - HDMI_4
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /ir/codes/custom:
    head:
      tags:
        - infrared
      summary: Get total number of custom infrared code sets.
      operationId: getCustomIrDeviceCount
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - infrared
      summary: Get all custom infrared code sets or export as CSV.
      description: |
        Depending on the `Content-Type` header, the custom infrared code sets are either returned as JSON objects
        or exported as a CSV file.

        - `Content-Type: application/json` or none: retrieve all custom infrared code set with paging.  
          Use `GET /ir/codes/custom/{codeSetId}` to access the IR code definitions of a codeset.

        - `Content-Type: text/csv`: retrieve all custom codes as CSV export (without paging).  
          Query parameters `page` and `limit` are ignored.
      operationId: getCustomIrDeviceCodes
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: delimiter
          in: query
          description: CSV delimiter character. Only for CSV export.
          schema:
            type: string
            default: ','
            minLength: 1
            maxLength: 1
      responses:
        '200':
          description: 'Successful operation, either with paginated JSON or CSV response.'
          headers:
            Pagination-Count:
              description: Total number of code sets.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items. Only for json response.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based. Only for json response.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CodeSetInfo'
            text/csv:
              schema:
                type: string
              example: |
                manufacturer,device,key,format,code
                custom,My AVR,CURSOR_DOWN,HEX,3;0x20F0827D;32;0
                custom,My AVR,CURSER_ENTER,HEX,3;0x20F022DD;32;0
                custom,My AVR,CURSOR_LEFT,HEX,3;0x20F0E01F;32;0
                custom,My AVR,CURSOR_RIGHT,HEX,3;0x20F0609F;32;0
                custom,My AVR,CURSOR_UP,HEX,3;0x20F002FD;32;0
                Foobar,TV,POWER_ON,PRONTO,0000 006d 0000 0024 0157 00ac 0015 0015 0015 0015 0015 0040 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0040 0015 0040 0015 0015 0015 0040 0015 0040 0015 0040 0015 0040 0015 0040 0015 0015 0015 0015 0015 0040 0015 0015 0015 0015 0015 0015 0015 0040 0015 0040 0015 0040 0015 0040 0015 0015 0015 0040 0015 0040 0015 0040 0015 0015 0015 0015 0015 0689 0157 0056 0015 0e94
                Foobar,TV,POWER_OFF,PRONTO,0000 006d 0000 0024 0157 00ab 0015 0015 0016 0015 0016 003f 0016 0015 0015 0016 0015 0015 0016 0015 0016 0015 0015 0040 0015 0040 0015 0015 0016 003f 0016 003f 0016 003f 0016 003f 0016 003f 0016 003f 0016 0015 0016 003f 0016 0015 0015 0015 0016 0015 0016 003f 0016 003f 0016 0015 0015 0040 0015 0015 0016 003f 0016 003f 0016 003f 0016 0015 0016 0015 0015 05fd 0156 0055 0016 0ee1
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - infrared
      summary: Create a new custom infrared code set.
      description: |
        Create a new custom codeset for an IR device. The IR codes can already be provided or added later with
        `GET /ir/codes/custom/{codeSetId}/{key}`.

        If the manufacturer isn't provided, the codeset will be linked to the custom manufacturer entry for self learned
        codes.
      operationId: createCustomIrDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeSetCreate'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSetInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - infrared
      summary: Delete all custom infrared code sets.
      description: |
        ⚠️ All defined custom infrared device codes will be irrevocably deleted!
      operationId: deleteAllCustomIrDeviceCodes
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/custom/{codeSetId}':
    get:
      tags:
        - infrared
      summary: Get custom infrared code set or export as CSV.
      description: |
        Depending on the `Content-Type` header, the full definition of a custom infrared code set including the IR codes is
        returned as JSON or exported as a CSV file.

        - `Content-Type: application/json` or none: retrieve infrared code set as JSON.
        - `Content-Type: text/csv`: export codeset as CSV.
      operationId: getCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - name: delimiter
          in: query
          description: CSV delimiter character. Only for CSV export.
          schema:
            type: string
            default: ','
            minLength: 1
            maxLength: 1
      responses:
        '200':
          description: 'Successful operation, either with paginated JSON or CSV response.'
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items. Only for json response.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based. Only for json response.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSet'
            text/csv:
              schema:
                type: string
              example: |
                key,format,code
                CURSOR_DOWN,HEX,3;0x20F0827D;32;0
                CURSER_ENTER,HEX,3;0x20F022DD;32;0
                CURSOR_LEFT,HEX,3;0x20F0E01F;32;0
                CURSOR_RIGHT,HEX,3;0x20F0609F;32;0
                CURSOR_UP,HEX,3;0x20F002FD;32;0
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - infrared
      summary: Modify a custom infrared code set.
      description: |
        Rename the device or change the device type of an infrared code set.

        A device name must be unique and only custom infrared code sets can be modified.
      operationId: updateCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeSetUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSetInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    post:
      tags:
        - infrared
      summary: Bulk upload infrared codes with a CSV file.
      description: |
        Upload multiple IR codes from a CSV file into an existing code set.

        CSV file format:
        - delimiter character is `,` (comma). This can be overwritten with the query parameter `delimiter`.
        - character set: plain ASCII or UTF-8.
        - the first line must contain a header row.
        - required header columns:
          - `key`: Key / button of the IR code.
            - Valid character RegEx: `^[a-zA-Z0-9\-_\.]{1,50}$`
            - Invalid characters will be replaced with an underscore.
          - `code`: IR code
          - ⚠️`key` and `code` must be lower-case, otherwise a validation error will be returned.
        - optional header column:
          - `format`: IR code format: `PRONTO` or `HEX`. Default if missing: `PRONTO`
        - order of the header columns is not relevant, additional columns will be ignored.
        - rows with an empty `key` or `code` value are ignored.
        - duplicate `key` values are not allowed.
          - The optional `overwrite` query parameter applies to existing keys only.
        - max size: 10 MB

        Minimal example:
        ```csv
        key,code
        POWER_ON,0000 006d 0000 0020 000a
        POWER_OFF,0000 006d 0000 0020 000b
        ```

        Notes:    
        - If multiple files are specified in the form-data, only the first one will be processed.
        - Header and values are automatically trimmed from leading and trailing whitespace.
        - ⚠️ In case there's an invalid record in the CSV file, all previous valid records will be added to the data set.
      operationId: uploadCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - name: overwrite
          in: query
          description: Overwrite existing IR codes with the same key. Otherwise only new codes are added.
          schema:
            type: boolean
            default: false
        - name: delimiter
          in: query
          description: CSV delimiter character
          schema:
            type: string
            default: ','
            minLength: 1
            maxLength: 1
        - name: comment
          in: query
          description: |
            The comment character at the start of a line to use when parsing CSV. No comment character is set by default.
          schema:
            type: string
            minLength: 1
            maxLength: 1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: IR code file to upload. File ending must be `.csv`.
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: Successful CSV import
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeSetUploadResult'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - infrared
      summary: Delete custom infrared code set.
      description: |
        ⚠️ All defined custom infrared device codes will be irrevocably deleted!
      operationId: deleteCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/ir/codes/custom/{codeSetId}/{key}':
    get:
      tags:
        - infrared
      summary: Get a code definition from a custom infrared code set.
      description: |
        Retrieve the code definition for the given key in the infrared code set.
      operationId: getCodeInCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ir_key'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrCode'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - infrared
      summary: Add a new key to a custom infrared code set.
      description: |
        Enhance the infrared code set with a new key. The key must be unique in a given code set. Only custom code sets can
        be modified.
      operationId: addKeyInCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ir_key'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IrCodeUpdate'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    put:
      tags:
        - infrared
      summary: Modify a code in a custom infrared code set.
      description: |
        Update the code definition of a key in an infrared code set. Only custom code sets can be modified.
      operationId: updateCodeInCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ir_key'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IrCodeUpdate'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - infrared
      summary: Delete an entry in a custom infrared code set.
      description: |
        ⚠️ The key in the custom infrared device code set will be irrevocably deleted!
      operationId: deleteKeyInCustomIrDeviceCodeSet
      parameters:
        - name: codeSetId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ir_key'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/ir/convert/{format}':
    get:
      tags:
        - infrared
      summary: Convert an IR code into a different format.
      description: |
        This GET endpoint to convert IR codes is intended for simple scripts and tests.

        Parameters:
        - `code`: URL encoded PRONTO code or HEX Code (spaces, commas and semicolons must be encoded).
        - `repeat`: How many times to decode the repeat part of the IR code.
          - Only relevant for IR formats not containing a repeat count, as: PRONTO
          - PRONTO codes: repeats the data in the repeat sequence of the code.
            - If the 4th field of the PRONTO code is `0000`, then it doesn't contain a repeat sequence and the repeat
              parameter is ignored!
            - If the code only contains a repeat sequence and a missing first sequence (3rd field is `0000`), the repeat
              sequence is encoded at least once and the repeat count automatically increased by one.
        - `to`: The destination format. Only RAW IR timings are supported at the moment.
      operationId: convertIrCode
      parameters:
        - name: format
          in: path
          description: IR format
          required: true
          schema:
            $ref: '#/components/schemas/IrCodeFormat'
        - name: code
          in: query
          description: IR code
          required: true
          schema:
            type: string
            minLength: 1
        - name: repeat
          in: query
          description: Repeat count for PRONTO code
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 20
        - name: to
          in: query
          description: Destination IR format
          required: false
          schema:
            type: string
            enum:
              - RAW
      responses:
        '200':
          description: Successful IR code conversion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrRawCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /ir/emitters:
    head:
      tags:
        - infrared
      summary: Get total number of infrared emitter devices.
      operationId: getInfraredEmitterCount
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - infrared
      summary: Get all infrared emitter devices for sending IR codes.
      operationId: getInfraredEmitters
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrEmitters'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/ir/emitters/{emitterId}':
    get:
      tags:
        - infrared
      summary: Get an IR emitter device.
      operationId: getIrEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrEmitter'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/ir/emitters/{emitterId}/send':
    put:
      tags:
        - infrared
      summary: Send IR command.
      description: |
        Send an IR command from the specified command set or a learned / custom code on the given emitter and output port.

        ### Continuous IR repeat
        If supported by the emitter, this feature allows to repeat an IR signal autonomously by the emitting device for
        a specified number of times.

        ⚠️ Supported on the UnfoldedCircle Dock with firmware version 0.9.0 or newer. 

        The repeated IR signal is usually a special IR command to tell the receiving device, that a button on a remote
        control is hold for a longer time. Depending on the device, a repeat signal can either simply execute the same
        action as if someone would rapidly press the same button, or it can adjust the command to a different function.
        One common example is to progressively increase the volume steps, e.g. start slowly with 0.1 dBA steps, then
        after a short time increase to 0.5 or 1 dBA steps.  
        Please note that not all devices or IR formats / commands support this feature. This is manufacturer specific.

        The continuous IR repeat feature is activated with the optional `repeat` field in the request.
        - The IR repeat signal will automatically be sent the number of times specified in the repeat field.
        - If the next request contains the same IR command, the repeat count will be reset in the dock and therefore
          the repeat signal prolonged.
        - A 'PUT /ir/emitters/{emitterId}/stop_send' request will stop the remaining repeat commands.
        - Depending on the IR `format`, a repeat value might be already part of the `code`.
          - ⚠️ The `repeat` value will override the embedded repeat information.
          - See _IR formats_ below.

        If `repeat` is not specified (or set to zero):
        - The stored IR code in the `codeset_id` or provided `code` is sent as is, with the contained repeat information
          (depending on IR format).
        - Continuous IR repeat is not activated:
          - every IR send request will send the full IR command.
          - ⚠️ the 'PUT /ir/emitters/{emitterId}/stop_send' command will have no effect!

        ### IR formats
        - `PRONTO`: PRONTO HEX format:
          - Only raw codes are supported (first number is `0000`).
          - The PRONTO HEX format does not include a dedicated repeat count field, but an optional 2nd burst
            pair sequence used for repeats.
            - The third number in the PRONTO code specifies the number of burst pairs in the 1st sequence.
            - The fourth number in the PRONTO code specifies the number of burst pairs in the 2nd sequence.
            - If the fourth number is 0, then there's no repeat sequence.
            - Note that either sequence is optional. Also there might be both sequences defined, or only the
              1st or 2nd one.
          - If the `repeat` field is set (> 0), the 2nd burst pair sequence of the PRONTO code is repeated.
            - If the PRONTO code doesn't contain a 2nd burst pair sequence, then the repeat value is ignored.
        - `HEX`: Unfolded Circle format:
          - The repeat count is part of the code and might be required for certain protocols.
            - E.g. Sony needs to send the same command two or three times so it's recognized as a single
              command by a device.
          - If the `repeat` field is set (> 0), this will override the repeat count in `code` (and not multiply the total
            repeat count)!
          - The actual emitted IR repeat signal depends on the IR protocols.
            - E.g. Denon will simply repeat the full command, whereas LG has a mandatory repeat-specific code
              sent after the command. This is all handled by the dock, when sending the IR code.
      operationId: sendCommandOnEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      requestBody:
        description: IR command
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: Command from a codeset.
                  properties:
                    codeset_id:
                      description: Infrared codeset identifier.
                      type: string
                    cmd_id:
                      description: Command identifier in the codeset.
                      type: string
                    repeat:
                      description: |
                        Optional repeat value for sending continuous IR repeat signals (depending on IR protocol).
                      type: integer
                      minimum: 0
                      maximum: 20
                    cmd_delay:
                      description: |
                        Optional delay between sending IR commands, if `cmd_id` refers to a command with multiple IR codes.
                      type: integer
                      minimum: 0
                    port_id:
                      description: Optional output port identifier. The default output will be used if omitted.
                      type: string
                  required:
                    - codeset_id
                    - cmd_id
                - type: object
                  description: IR code.
                  properties:
                    code:
                      description: |
                        IR code to send.
                        - PRONTO codes can use a space or comma as separator.
                        - Multiple codes can be separated by a plus `+` (for example: `0000 0068 0001 0000 0001 + 0000 0068 0001 0000 0002`).
                      type: string
                    format:
                      $ref: '#/components/schemas/IrCodeFormat'
                    repeat:
                      description: |
                        Optional repeat value for sending continuous IR repeat signals (depending on IR protocol).
                      type: integer
                      minimum: 0
                      maximum: 20
                    cmd_delay:
                      description: |
                        Optional delay between sending commands if `code` contains more than one IR command.
                      type: integer
                      minimum: 0
                    port_id:
                      description: Optional output port identifier. The default output will be used if omitted.
                      type: string
                  required:
                    - code
                    - format
            examples:
              Command from a codeset on default output:
                value:
                  codeset_id: ir.manufacturer.123
                  cmd_id: CHANNEL_DOWN
              Command from a codeset on default output and repeat count:
                value:
                  codeset_id: ir.manufacturer.123
                  cmd_id: VOLUME_DOWN
                  repeat: 4
              Command from a codeset on specific output:
                value:
                  codeset_id: ir.manufacturer.123
                  cmd_id: CHANNEL_DOWN
                  port_id: '4'
              PRONTO code on default output:
                value:
                  code: '0000,0068,0000,0010,0060,0018,0030,0018,0018,0018,0030,0018,0018,0018,0018,0018,0030,0018,0018,0018,0030,0018,0030,0018,0030,0018,0018,0018,0030,0018,0018,0018,0018,0018,0030,0318'
                  format: PRONTO
              PRONTO code on default output and repeat count:
                value:
                  code: 0000 0068 0000 0010 0060 0018 0030 0018 0018 0018 0030 0018 0018 0018 0018 0018 0030 0018 0018 0018 0030 0018 0030 0018 0030 0018 0018 0018 0030 0018 0018 0018 0018 0018 0030 0318
                  format: PRONTO
                  repeat: 4
              Learned HEX code on specific output:
                value:
                  code: 3;0x20F0A956;32;0
                  format: HEX
                  port_id: '4'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/ir/emitters/{emitterId}/stop_send':
    put:
      tags:
        - infrared
      summary: Stop sending an IR command.
      description: |
        Stop an active IR repeat transmission.
      operationId: stopSendOnEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      requestBody:
        description: IR stop command
        content:
          application/json:
            schema:
              type: object
              properties:
                port_id:
                  description: |
                    Optional output port identifier. Requires support by IR emitter device.
                    Not supported by Unfolded Circle dock
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/ir/emitters/{emitterId}/learn':
    get:
      tags:
        - infrared
      summary: Get IR learning status and results.
      description: |
        Returns the current status and if the dock is in IR learning mode. All learned codes will be returned since the
        start of the learning session.
      operationId: irLearningStatusEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      responses:
        '200':
          description: IR learning status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrEmitterLearnStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - infrared
      summary: Start IR learning.
      description: |
        Learn IR commands from the given emitter with learning capability. The learning session will be stopped
        automatically after the timeout, unless it hasn't been stopped with the `DELETE` operation, or a new learning
        session has been initiated.

        Any learned code will immediately be sent as a WebSocket `ir_learning`event message in the `emitters` channel.
        Furthermore, the codes are stored for retrieval with the `GET` status call. There's a maximum of 16 learned
        codes per session. Any additional codes will be ignored and only sent as a WebSocket event.

        Calling this function, while learning is still active, will extend the timeout. Any previously learned codes
        will not be deleted.
      operationId: startIrLearningEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 60
            minimum: 1
            maximum: 300
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - infrared
      summary: Stop IR learning and clear results.
      description: |
        The current status and any learned codes will be returned. After this call the learned codes are no longer
        accessible through the `GET` status call.
      operationId: stopIrLearningEmitter
      parameters:
        - $ref: '#/components/parameters/emitter_id'
      responses:
        '200':
          description: IR learning status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrEmitterLearnStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /remotes:
    head:
      tags:
        - remotes
      summary: Get total number of remote-entities.
      description: |
        The total number of available remotes of the specified kind (BT, IR, external) are returned in the
        `Pagination-Count` header. This allows to prepare the retrieval of the remotes with the `GET` operation
        and paging parameters.

        Only the IR-entity count is returned if no remote-`kind` query parameter is specified.
      operationId: getRemoteCount
      parameters:
        - name: kind
          in: query
          description: Remote kind
          required: false
          schema:
            $ref: '#/components/schemas/RemoteKind'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - remotes
      summary: Get remote-entities overview with paging.
      description: |
        Returns an overview of all defined remotes of the specified kind (BT, IR, external) with the given paging
        parameters. Use the `HEAD` operation to retrieve the total number of defined remotes.

        The overview information doesn't include all details of a remote. The full remote information is retrievable
        with `/remotes/{entityId}`.

        Only the IR-entity count is returned if no remote-`kind` query parameter is specified.
      operationId: getInfraredEntities
      parameters:
        - name: kind
          in: query
          description: Remote kind
          required: false
          schema:
            $ref: '#/components/schemas/RemoteKind'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remotes'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - remotes
      summary: Create a new BT- or IR-remote entity.
      description: |
        Create a new Bluetooth or infrared `remote`-entity. External remote-entities cannot be created, they must be
        provided by integration drivers. BT- and IR-entities are special internal entities without an integration driver
        association.
        Infrared-remote entities can be created with a manufacturer IR code-set or an empty custom code-set to learn or load
        custom IR codes. Bluetooth-remote entities emulate a HID keyboard and mouse. An optional device-profile can be
        specified to customize the available commands and key-mappings.

        To create a new remote at least a name must be provided. 
        The `icon` and `description` properties are optional and can be set later with the `PUT` update operation.

        When setting a text in a multilingual field, like name or description, the default `en` identifier should always be
        included.

        IR-remotes:
        - If no manufacturer infrared code set is specified in `options.codeset_id`, a new custom code set is automatically
          created for the user to manually specify or learn the codes.

        BT-remotes:
        - Device profiles can be retrieved with the `GET /cfg/bt/profiles` endpoint.
        - Custom device profiles can be uploaded with the resource API endpoint `POST /resources/BtDeviceProfile`.
        - If no device-profile is specified, the default profile is used which exposes all HID key commands.

        The new remote can be cloned from another remote-entity identifier in `clone_from`. All applicable configuration
        will be copied, except a new remote name must be specified. The `icon` and `description` fields can still be
        specified and will override the copied data. The `options.codeset_id` is not allowed when cloning an IR-remote.
      operationId: createRemote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteCreate'
            examples:
              create IR-remote with existing code set:
                value:
                  name:
                    en: My new remote
                  codeset_id: ir.manufacturer.123
              create IR-remote with custom code set (default device type & manufacturer):
                value:
                  name:
                    en: My custom remote
                  custom_codeset:
                    device_name: My device
              'IR-remote with icon, description and custom code set':
                value:
                  name:
                    en: My custom remote
                  icon: 'uc:movie'
                  description:
                    en: Testing the custom code set feature
                  custom_codeset:
                    manufacturer_id: custom
                    device_name: My device
                    device_type: various
              create Bluetooth-remote:
                value:
                  name:
                    en: My BT remote
                  icon: 'uc:tv'
                  description:
                    en: Using the default device profile
                  kind: BT
                  bt:
                    dev_profile_id: generic_android
              clone:
                value:
                  name:
                    en: My cloned remote
                  clone_from: uc.main.remote.my-other-remote
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remote'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    delete:
      tags:
        - remotes
      summary: Delete all remote-entities.
      description: |
        ⚠️ All defined entities will be irrevocably deleted!
      operationId: deleteAllRemotes
      parameters:
        - name: kind
          in: query
          description: Remote kind
          required: false
          schema:
            $ref: '#/components/schemas/RemoteKind'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/remotes/{entityId}':
    get:
      tags:
        - remotes
      summary: Get a remote-entity by its entity_id.
      description: |
        Returns all the information required to manage an existing remote.
      operationId: getRemote
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remote'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update a remote-entity.
      operationId: updateRemote
      description: |
        Update one or multiple properties of a remote-entity. The omitted properties are ignored and not deleted.
        To clear an array simply provide an empty array.

        - Button mappings are configured with the dedicated `/remotes/{entityId}/buttons` and
          `/remotes/{entityId}/buttons/{button}` endpoints.
        - The user interface is configured with the dedicated `/remotes/{entityId}/ui`, `/remotes/{entityId}/ui/pages`
          and `/remotes/{entityId}/ui/pages/{pageId}` endpoints.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        description: Properties to update in the existing remote-entity.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteUpdate'
            examples:
              'Name, icon and description':
                value:
                  name:
                    en: New remote name
                  icon: 'uc:tv'
                  description:
                    en: Updated description
              Output emitter:
                value:
                  options:
                    ir:
                      output:
                        device_id: sim.1
                        port_id: '4'
              Infrared code set (NOT YET IMPLEMENTED):
                value:
                  options:
                    ir:
                      codeset:
                        id: lg3
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Remote'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Delete a remote-entity.
      description: |
        ⚠️ The given entity is irrevocably deleted.
      operationId: deleteRemote
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ir':
    get:
      tags:
        - remotes
      summary: Get the infrared dataset of the remote-entity.
      description: |
        Returns all the information required to manage the infrared dataset.
      operationId: getRemoteIrDataSet
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrDataSet'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ir/{cmdId}':
    post:
      tags:
        - remotes
      summary: Add a custom infrared command to the codeset.
      operationId: addRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/cmd_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: '#/components/schemas/IrCodeValue'
                format:
                  $ref: '#/components/schemas/IrCodeFormat'
              required:
                - value
                - format
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - remotes
      summary: Gets an infrared code in the codeset.
      description: |
        Returns the details of a given infrared command.
      operationId: getRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - name: cmdId
          in: path
          description: IR command identification.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update an infrared command in the codeset.
      operationId: updateRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - name: cmdId
          in: path
          description: IR command identification.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: '#/components/schemas/IrCodeValue'
                format:
                  $ref: '#/components/schemas/IrCodeFormat'
              required:
                - value
                - format
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIrCode'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Delete a custom ir code or reset a modified manufacturer code in the codeset.
      operationId: deleteOrResetRemoteIrCode
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - name: cmdId
          in: path
          description: IR command identification.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/bt':
    get:
      tags:
        - remotes
      summary: "\U0001F9EA Get information about a Bluetooth remote-entity."
      description: |
        Retrieve information of this BT-remote entity.

        Response codes:
        - `400 Bad Request` is returned if the entity is not a BT-remote entity.
      operationId: getBtRemoteInfo
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtRemoteInfo'
              examples:
                Newly created BT-remote entity:
                  value:
                    profile: 1
                    dev_profile_id: default
                    peripherals:
                      keyboard: true
                      mouse: true
                Paired BT-remote entity:
                  value:
                    profile: 1
                    dev_profile_id: my_device
                    peer:
                      address: 'AE:35:DC:88:AA:11'
                      addr_type: LePublic
                    peripherals:
                      keyboard: true
                      mouse: false
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/bt/pairing':
    get:
      tags:
        - remotes
      summary: "\U0001F9EA Get pairing information of a Bluetooth remote-entity."
      description: |
        Retrieve pairing specific information of this BT-remote entity.

        - If the peripheral is paired (`paired: true`), the peer address is returned in the `peer` field.
        - If there's a bonding request from a central, the `bonding_request` object is set.
          - ‼️ Only `PasskeyInput` bonding requests are currently supported.

        Response codes:
        - `400 Bad Request` is returned if the entity is not a BT-remote entity.
      operationId: getBtRemotePairingInfo
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtRemotePairingInfo'
              examples:
                Paired peripheral:
                  value:
                    paired: true
                    peer:
                      address: 'AE:35:DC:88:AA:11'
                      addr_type: LePublic
                Bonding request:
                  value:
                    bonding_request:
                      profile: 1
                      peer:
                        address: 'AE:35:DC:88:AA:11'
                        addr_type: LePublic
                      kind: PasskeyInput
                    paired: false
                    pairing_enabled: true
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - remotes
      summary: "\U0001F9EA Enable or disable BT-remote pairing."
      description: |
        Once a BT-remote entity is paired with a central, it will no longer accept pairing requests from a central.
        For example if the user removed the pairing information (usually through a "forget this Bluetooth device" action).

        This command enables pairing again. Note: there is no timeout, the peripheral remains in pairing mode as long as
        it is not deactivated again!

        The current pairing state can be retrieved with `GET /remotes/{entityId}/bt/pairing`.

        Response codes:
        - `400 Bad Request`: invalid request data or if the entity is not a BT-remote entity.
        - `503 Service Unavailable`: BT is switched off, or the service is not responding.
      operationId: enableBtRemotePairing
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - name: enabled
          in: query
          description: Enable pairing.
          required: true
          schema:
            type: boolean
            default: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    post:
      tags:
        - remotes
      summary: "\U0001F9EA Send a pairing response."
      description: |
        Send the displayed pairing passkey on the central or decline a pairing request.

        Response codes:
        - `400 Bad Request`: invalid request data or if the entity is not a BT-remote entity.
        - `503 Service Unavailable`: BT is switched off, or the service is not responding.
      operationId: sendPairingResponse
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BtPairingResponse'
            examples:
              Passkey entry:
                value:
                  passkey: '012345'
              Decline passkey pairing request:
                value:
                  confirm: false
              Accept non-passkey pairing request:
                value:
                  confirm: true
        required: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/remotes/{entityId}/buttons':
    get:
      tags:
        - remotes
      summary: Get the physical button mappings.
      operationId: getRemoteButtonMappings
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
              example:
                - button: DPAD_DOWN
                  short_press:
                    cmd_id: CURSOR_DOWN
                  long_press:
                    cmd_id: BACK
                - button: DPAD_MIDDLE
                  short_press:
                    cmd_id: CURSOR_ENTER
                - button: DPAD_LEFT
                  short_press:
                    cmd_id: CURSOR_LEFT
                - button: DPAD_RIGHT
                  short_press:
                    cmd_id: CURSOR_RIGHT
                - button: DPAD_UP
                  short_press:
                    cmd_id: CURSOR_UP
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Reset the physical button mappings to their default state.
      description: |
        An automatic mapping of common functions to the physical buttons is performed. This depends on the chosen IR codeset
        if e.g. the volume up & down keys are automatically mapped.

        ⚠️ The previous customization of the physical button mapping is irrevocably deleted.
      operationId: resetRemoteButtonMappings
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
              example:
                - button: BACK
                  short_press:
                    cmd_id: BACK
                - button: DPAD_DOWN
                  short_press:
                    cmd_id: CURSOR_DOWN
                - button: DPAD_MIDDLE
                  short_press:
                    cmd_id: CURSOR_ENTER
                - button: DPAD_LEFT
                  short_press:
                    cmd_id: CURSOR_LEFT
                - button: DPAD_RIGHT
                  short_press:
                    cmd_id: CURSOR_RIGHT
                - button: DPAD_UP
                  short_press:
                    cmd_id: CURSOR_UP
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/buttons/{buttonId}':
    get:
      tags:
        - remotes
      summary: Get a physical button mapping.
      operationId: getRemoteButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMapping'
              example:
                button: DPAD_DOWN
                short_press:
                  cmd_id: HOME
                long_press:
                  cmd_id: MENU
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update a physical button mapping.
      description: |
        Update the button mapping for either a short- or a long-press.

        ⚠️ In the EntityCommand object the `entity_id` may not be specified. A remote-entity always operates on its own
        commands. If you want to control other entities, an activity must be used.
      operationId: updateRemoteButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    short_press:
                      $ref: '#/components/schemas/EntityCommand'
                  required:
                    - short_press
                - type: object
                  properties:
                    long_press:
                      $ref: '#/components/schemas/EntityCommand'
                  required:
                    - long_press
            examples:
              short button press:
                value:
                  short_press:
                    cmd_id: HOME
              long button press:
                value:
                  long_press:
                    cmd_id: MENU
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMapping'
              example:
                button: DPAD_DOWN
                short_press:
                  cmd_id: HOME
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Remove a physical button mapping.
      description: |
        ⚠️ The previous customization of the physical button mapping is irrevocably deleted.
      operationId: deleteRemoteButtonMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceButtonMappings'
              example:
                - button: DPAD_MIDDLE
                  short_press:
                    cmd_id: CURSOR_ENTER
                - button: DPAD_LEFT
                  short_press:
                    cmd_id: CURSOR_LEFT
                - button: DPAD_RIGHT
                  short_press:
                    cmd_id: CURSOR_RIGHT
                - button: DPAD_UP
                  short_press:
                    cmd_id: CURSOR_UP
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/buttons/{buttonId}/{buttonPress}':
    get:
      tags:
        - remotes
      summary: Get a button press mapping.
      operationId: getRemoteButtonPressMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
        - $ref: '#/components/parameters/button_press'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityCommand'
              example:
                cmd_id: HOME
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Remove a button press mapping.
      operationId: deleteRemoteButtonPressMapping
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/button_id'
        - $ref: '#/components/parameters/button_press'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ui':
    get:
      tags:
        - remotes
      summary: Get the user interface definition of a remote-entity.
      description: |
        Returns all the information required to manage an existing remote user interface.

        At the moment a user interface only consists of pages.
      operationId: getRemoteUi
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterface'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Reset a remote user interface to its default state.
      description: |
        ⚠️ The customization of the remote user interface is irrevocably deleted.
      operationId: deleteRemoteUi
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterface'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ui/pages':
    post:
      tags:
        - remotes
      summary: Create a new user interface page
      description: |
        Append a new empty page to the user interface pages. The new page identifier is returned in the response.

        The payload fields are optional. A page name and the items of the page can be specified, or later be added with 
        `PATCH /remotes/{entityId}/ui/pages/{pageId}`. If `grid` is not specified, the default grid size is used from
        the screen metadata layout in `GET /cfg/device/screen_layout`

        ⚠️ If the user interface items with `command` objects are specified, then the `EntityCommand` structure may not
        contain an `entity_id` field. A remote-entity always operates on itself.
      operationId: createRemoteUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUserInterfacePageUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  page_id:
                    $ref: '#/components/schemas/SimpleId'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - remotes
      summary: Get the user interface pages of a remote-entity.
      operationId: getRemoteUiPages
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update the remote user interface page order.
      operationId: updateRemoteUiPageOrder
      description: |
        Reorder the pages in the user interface according to the page identifiers in the `page_order` array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page_order:
                  type: array
                  items:
                    $ref: '#/components/schemas/SimpleId'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Reset the remote user interface pages to the default state.
      description: |
        The default page(s) is created and the page array returned.

        ⚠️ The customization of the remote user interface is irrevocably deleted.
      operationId: resetRemoteUiPages
      parameters:
        - $ref: '#/components/parameters/entity_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/remotes/{entityId}/ui/pages/{pageId}':
    get:
      tags:
        - remotes
      summary: Get the user interface page definition of a remote-entity.
      operationId: getRemoteUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - remotes
      summary: Update a remote user interface page.
      operationId: updateRemoteUiPage
      description: |
        Update one or multiple properties of a remote user interface page. The omitted properties are ignored and not deleted.
        To clear an array simply provide an empty array.
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      requestBody:
        description: Properties to update in the existing remote user interface page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityUserInterfacePageUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityUserInterfacePage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - remotes
      summary: Delete a remote user interface page.
      description: |
        The given page is removed and the array of remaining pages is returned.

        ⚠️ The customization of the remote user interface page is irrevocably deleted.
      operationId: deleteRemoteUiPage
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityUserInterfacePage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /profiles:
    post:
      tags:
        - profiles
      summary: Create a new profile.
      description: |
        There are two different types of profiles:

        - Normal profile (default): can do anything, change settings, add pages, entities, integrations, etc.
        - Restricted profile: intended for guests or children, who can only use the remote, but cannot change settings.

        The admin PIN is required to switch from a restricted to a normal profile. It can be defined in settings.  

        - Switching away from a restricted profile will prompt the user to enter the admin PIN.
        - Switching to a restricted profile can be done without entering the admin PIN.

        Profile request object:    
        - `profile_id` is optional and auto-generated if not specified. Otherwise it needs to be a unique profile identifier.
        - `name` is mandatory and must be unique.
        - if the first profile is added, it is automatically set as the active profile.
      operationId: createProfile
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
            examples:
              Simple profile:
                value:
                  name: My profile
              Profile with an icon:
                value:
                  name: My profile
                  icon: 'uc:star'
              Restricted profile:
                value:
                  name: Guests
                  icon: 'uc:lock'
                  restricted: true
        required: true
      responses:
        '201':
          description: Successful operation returning the profile identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    put:
      tags:
        - profiles
      summary: Switch active profile.
      description: |
        The administrator PIN in `admin_pin` is required to switch from a restricted to a normal profile.
        If the current profile is a restricted profile and the pin is missing, error `401` is returned.
      operationId: switchProfile
      parameters:
        - name: active_profile_id
          in: query
          description: Active profile identifier
          required: true
          schema:
            type: string
      requestBody:
        description: Optional administrator pin
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_pin:
                  $ref: '#/components/schemas/AdminPin'
        required: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    get:
      tags:
        - profiles
      summary: Get all profiles or the active profile.
      description: |
        If the active profile is requested and no profile exists, or set active, 404 is returned.
      operationId: getProfiles
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profiles'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete all profiles.
      operationId: deleteAllProfiles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/profiles/{profileId}':
    get:
      tags:
        - profiles
      summary: Get profile.
      operationId: getProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a profile.
      description: |
        Update one or multiple properties of a profile. A missing property will not update its current value.  
        - `profile_id` is mandatory and can't be changed.
        - an empty `icon` value removes an existing icon identifier.
        - a missing `pages` property will not change the page order.
        - ⚠️ an empty `pages` array removes all pages and groups in the profile!
        - ⚠️ missing page identifiers in the `pages` array will remove the page configuration!
      operationId: updateProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
      requestBody:
        description: Properties to update in the existing profile.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete profile.
      operationId: deleteProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/pages':
    post:
      tags:
        - profiles
      summary: Create a new page in the profile.
      operationId: createPage
      parameters:
        - $ref: '#/components/parameters/profile_id'
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageCreate'
            examples:
              Simple page:
                value:
                  name: My page
              New page at the first position:
                value:
                  name: Favorites
                  pos: 1
              New page with items:
                value:
                  name: My other page
                  items:
                    - entity_id: switch1
                    - entity_id: mediaplayer1
                    - entity_id: blind1
                    - group_id: 'def:g2'
        required: true
      responses:
        '201':
          description: Successful operation returning the page identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    get:
      tags:
        - profiles
      summary: Get all pages of the profile.
      operationId: getPagesInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete all pages of the profile.
      operationId: deleteAllPagesInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/pages/{pageId}':
    get:
      tags:
        - profiles
      summary: Get a page of the profile
      operationId: getPage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a page.
      operationId: updatePage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
      requestBody:
        description: Properties to update in the existing page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageUpdate'
            examples:
              Rename page:
                value:
                  name: A better name
              Rearrange items:
                value:
                  items:
                    - entity_id: mediaplayer1
                    - group_id: 'def:g2'
                    - entity_id: blind1
                    - entity_id: switch1
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete a page of the profile.
      operationId: deletePage
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/page_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/groups':
    post:
      tags:
        - profiles
      summary: Create a new group in the profile.
      operationId: createGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
      requestBody:
        description: Profile data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '201':
          description: Successful operation returning the page identifier in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    get:
      tags:
        - profiles
      summary: Get all groups of the profile.
      operationId: getGroupsInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete all groups of the profile.
      operationId: deleteAllGroupsInProfile
      parameters:
        - $ref: '#/components/parameters/profile_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/profiles/{profileId}/groups/{groupId}':
    get:
      tags:
        - profiles
      summary: Get a group in the profile.
      operationId: getGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - profiles
      summary: Update properties of a group.
      operationId: updateGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
      requestBody:
        description: Properties to update in the existing group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - profiles
      summary: Delete a group of the profile.
      operationId: deleteGroup
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - $ref: '#/components/parameters/group_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /cfg:
    get:
      tags:
        - cfg
      summary: Get all configuration settings.
      description: |
        Retrieve all system configuration settings at once. Updating a configuration setting must be performed with the
        corresponding endpoint.
      operationId: getAllSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgAll'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    delete:
      tags:
        - cfg
      summary: Reset all settings to default values.
      description: |
        This resets all system configuration settings to factory defaults. Integration & profile settings are not affected.
      operationId: resetAllSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgAll'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/bt:
    get:
      tags:
        - cfg
      summary: "\U0001F9EA Get Bluetooth settings."
      description: |
        Retrieve Bluetooth settings

        Advertisement name placeholders:
        - `000000` will be replaced with the last 3 BT MAC address values.
        - `00:00:00:00:00:00` will be replaced with the full BT MAC address.
      operationId: getBtSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgBt'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: "\U0001F9EA Modify Bluetooth settings."
      description: |
        Change one or multiple Bluetooth settings. The remote must be restarted after a configuration change.

        - If `peripheral_connections` or `enable_hci_log` is not specified, the original setting will be kept.
        - The `peripheral_connections` setting must be enabled with a feature flag, otherwise it will be ignored and only
          a single connection be used.
      operationId: updateBtSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgBtUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgBt'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/bt/profiles:
    get:
      tags:
        - cfg
      summary: Get Bluetooth device profiles.
      description: |
        Retrieve an overview of all available BT device profiles for BT-remote entities.

        Pre-defined system profiles and custom profiles are returned. Custom profiles can override system profiles if they
        specify the same `id`. The type of profile is indicated in the `user_profile` flag.
      operationId: getBtDeviceProfiles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtDeviceProfileInfos'
              example:
                - id: default
                  name:
                    en: Default
                  version: 1
                  peripherals:
                    keyboard: true
                    mouse: true
                - id: generic_android
                  name:
                    en: Generic Android
                  version: 1
                  peripherals:
                    keyboard: true
                    mouse: true
                - id: my_device
                  name:
                    en: My custom device
                  user_profile: true
                  version: 2
                  peripherals:
                    keyboard: true
                    mouse: false
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/cfg/bt/profiles/{id}':
    get:
      tags:
        - cfg
      summary: Retrieve a Bluetooth device profile.
      description: |
        Retrieve a specific BT device profile for BT-remote entities. System and custom profiles can be retrieved.

        To upload and delete custom profiles, please use the resource endpoints: `/resources/BtDeviceProfile`.
      operationId: getBtDeviceProfile
      parameters:
        - $ref: '#/components/parameters/resource_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtDeviceProfile'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /cfg/button:
    get:
      tags:
        - cfg
      summary: Get button settings.
      description: |
        Button backlight configuration.
      operationId: getButtonSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgButtons'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify button settings.
      description: |
        Change one or multiple button backlight settings.
      operationId: updateButtonSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgButtons'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgButtons'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device:
    get:
      tags:
        - cfg
      summary: Get remote device settings.
      description: |
        The remote device settings contain the custom name of the remote.
      operationId: getRemoteDeviceSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgRemoteDevice'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify remote device settings.
      description: |
        Change one or multiple remote device settings.
      operationId: updateRemoteDeviceSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgRemoteDevice'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgRemoteDevice'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device/button_layout:
    get:
      tags:
        - cfg
      summary: Get the button layouts of the device.
      description: |
        Meta-information about the button groups and button layouts.
      operationId: getRemoteDeviceButtonLayoutSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceButtonLayout'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device/icon_mapping:
    get:
      tags:
        - cfg
      summary: Get the native icon mapping of the device.
      description: |
        Meta-information about the native icon mappings. These are the icon identifiers prefixed with `uc:`, e.g. `uc:cool`.
        The remaining label is mapped to a unicode number in the icon font. For `uc:cool` the mapping will be: (`cool`, `\uE91E`)

        Note: the example response omits the leading backslash to avoid character substitution in the browser!
      operationId: getRemoteDeviceIconMapping
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Label -> Unicode map
                type: object
                additionalProperties:
                  type: string
              example:
                cool: uE91E
                heat: uE91F
                home: uE900
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/device/screen_layout:
    get:
      tags:
        - cfg
      summary: Get the screen layout of the device.
      description: |
        Meta-information about the screen grid size.
      operationId: getRemoteDeviceScreenLayoutSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceScreenLayout'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/display:
    get:
      tags:
        - cfg
      summary: Get display settings.
      description: |
        Display brightness and auto brightness configuration.
      operationId: getDisplaySettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgDisplay'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify display settings.
      description: |
        Change one or multiple display settings.
      operationId: updateDisplaySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgDisplay'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgDisplay'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/entity/commands:
    get:
      tags:
        - cfg
      summary: Get entity command definitions.
      description: |
        Meta-information about the entity commands.
      operationId: getEntityCommandMetadata
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityCommandMetadata'
              example:
                - id: button.press
                  cmd_id: press
                  name:
                    en: Press
                    de: Betätigen
                - id: switch.on
                  cmd_id: 'on'
                  name:
                    en: 'On'
                    de: Ein
                - id: switch.off
                  cmd_id: 'off'
                  name:
                    en: 'Off'
                    de: Aus
                - id: switch.toggle
                  cmd_id: toggle
                  name:
                    en: Toggle
                    de: Umschalten
                - id: light.on
                  cmd_id: 'on'
                  name:
                    en: Turn on
                    de: Einschalten
                - id: light.off
                  cmd_id: 'off'
                  name:
                    en: Turn off
                    de: Ausschalten
                - id: light.toggle
                  cmd_id: toggle
                  name:
                    en: Toggle state
                    de: Umschalten
                - id: light.dim
                  cmd_id: 'on'
                  name:
                    en: Set brightness
                    de: Setze Helligkeit
                  params:
                    - name:
                        en: brightness
                        de: Helligkeit
                      param: brightness
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
                - id: light.color_temperature
                  cmd_id: 'on'
                  name:
                    en: Set color temperature
                    de: Setze Farbtemperatur
                  params:
                    - name:
                        en: Color temperature
                        de: Farbtemperatur
                      param: color_temperature
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
                - id: light.color
                  cmd_id: 'on'
                  name:
                    en: Set color
                    de: Setze Farbe
                  params:
                    - name:
                        en: Hue
                        de: Farbton
                      param: hue
                      type: int
                      min: 0
                      max: 360
                      step: 1
                      unit: °
                    - name:
                        en: saturation
                        de: Farbsättigung
                      param: saturation
                      type: int
                      min: 0
                      max: 100
                      step: 1
                      unit: '%'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/features:
    get:
      tags:
        - cfg
      summary: Get feature flag settings.
      description: |
        Feature flag configuration.
      operationId: getFeatureFlagSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgFeatures'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify a feature flag.
      description: |
        Enable or disable a feature flag setting.
      operationId: updateFeatureFlagSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgFeatureUpdate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgFeatures'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/haptic:
    get:
      tags:
        - cfg
      summary: Get haptic settings.
      description: |
        Haptic configuration.
      operationId: getHapticSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgHaptic'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify haptic settings.
      description: |
        Change one or multiple haptic settings.
      operationId: updateHapticSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgHaptic'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgHaptic'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization:
    get:
      tags:
        - cfg
      summary: Get localization settings.
      description: |
        Retrieve the language and region configuration.
      operationId: getLocalizationSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgLocalization'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify localization settings.
      description: |
        Change one or multiple localization settings.
      operationId: updateLocalizationSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgLocalization'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgLocalization'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/tz_names:
    get:
      tags:
        - cfg
      summary: Get all available time zone names.
      operationId: getTimezoneNames
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/countries:
    get:
      tags:
        - cfg
      summary: Get all available countries.
      operationId: getLocalizationCountries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      $ref: '#/components/schemas/CountryCode'
                    name_en:
                      description: |
                        Country name in english. Native country names will be provided in additional `name_<language_code>`
                        properties.
                      type: string
                  additionalProperties: true
                  required:
                    - code
                    - name_en
              example:
                - code: CH
                  name_de: Schweiz
                  name_en: Switzerland
                  name_fr: Suisse
                  name_it: Svizzera
                - code: DE
                  name_de: Deutschland
                  name_en: Germany
                - code: DK
                  name_dk: Danmark
                  name_en: Denmark
                - code: HU
                  name_en: Hungary
                  name_hu: Magyarország
                - code: NL
                  name_en: Netherlands
                  name_nl: Nederland
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/localization/translations:
    get:
      tags:
        - cfg
      summary: Get all available translations.
      description: |
        The available translations are provided from the UI application.  
        Future UI versions might provide new or updated translations.
      operationId: getTranslations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  translations:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          $ref: '#/components/schemas/LanguageCode'
                        name:
                          type: string
                      required:
                        - code
                        - name
                required:
                  - version
                  - translations
              example:
                version: default
                translations:
                  - code: da_DK
                    name: Dansk
                  - code: de_DE
                    name: Deutsch
                  - code: de_CH
                    name: Schwiizertüütsch
                  - code: fr_CH
                    name: Français (Suisse)
                  - code: it_CH
                    name: Italiano (Svizzera)
                  - code: hu_HU
                    name: Magyar
                  - code: nl_NL
                    name: Nederlands
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/network:
    get:
      tags:
        - cfg
      summary: Get network settings.
      description: |
        Retrieve network settings, as WiFi or Bluetooth status.
      operationId: getNetworkSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgNetwork'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify network settings.
      description: |
        Change one or multiple network settings.

        ⚠️ The `ws` configuration object is an expert setting intended for support issues. Those settings may not be
        exposed in a user frontend.
        - The `ws` object is only returned, after it has been set manually.
        - Settings stay persisted for PATCH requests not containing the `ws` key.
        - Return and apply current system settings: send a PATCH request with an empty object: `"ws": {}".
        - The `ws` settings can only be removed with a configuration reset: `DELETE /cfg`
        - Modifying any `ws` settings requires a system reboot.
      operationId: updateNetworkSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgNetwork'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgNetwork'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/power_saving:
    get:
      tags:
        - cfg
      summary: Get power settings.
      description: |
        Sleep timeout and wakeup sensitivity configuration.
      operationId: getPowerSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgPowerSaving'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify power settings.
      description: |
        Change one or multiple power saving settings.
      operationId: updatePowerSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgPowerSaving'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgPowerSaving'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/profile:
    get:
      tags:
        - cfg
      summary: Get profile settings.
      operationId: getProfileSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  has_admin_pin:
                    description: An administrator pin has been set to use restricted profiles.
                    type: boolean
                required:
                  - has_admin_pin
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify profile settings.
      description: |
        Change profile administrator pin.

        - an empty `admin_pin` value will remove the pin.
      operationId: updateProfileSettings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_pin:
                  $ref: '#/components/schemas/AdminPin'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1cfg~1profile/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/software_update:
    get:
      tags:
        - cfg
      summary: Get software update settings.
      description: |
        Software update configuration. See PATCH operation and data model description for more information.
      operationId: getSoftwareUpdateSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSoftwareUpdate'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify software update settings.
      description: |
        Change one or multiple software update settings.

        If `check_for_updates` is enabled:
        - the device automatically checks for new updates daily. The check happens during a random time within the 
          OTA window time frame `ota_window_start` - `ota_window_end`.
        - if a new update is available, the update metadata is immediately downloaded and the firmware update file is
          scheduled to download.
        - the firmware file will only download if the remote has at least 50% battery charge.
        - if the remote is not in the dock and suspended, the remote will not automatically wake up and the check
          will be skipped.

        If `auto_update` is enabled:
        - once the firmware file is downloaded it will be automatically installed in the next OTA check window.
        - the installation will only start if the remote has at least 50% battery charge.

        OTA window fields:
        - the stored values are used if omitted. 
        - default values are set if not configured.
        - the time of day corresponds to the configured timezone.
        - for changing the update window, both start and end times are required, otherwise a default will be used.
        - if the end time is before the start time, the window will spawn over midnight, e.g. `23:00:00` - `01:00:00`.

        Optional software update channel & token:
        - the default release channel is used if not configured.
        - the stored values are used if omitted. 
        - changing the update channel is intended for closed user groups only.  
          ⚠️ High chance of breaking changes, bugs and loosing data!
        - other channels than `default` might require an access token in `channel_token`.
        - ⚠️ Changing the update channel or token requires a device restart, otherwise the automated updates will not use
             the new channel!
      operationId: updateSoftwareUpdateSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgSoftwareUpdate'
            example:
              check_for_updates: true
              auto_update: false
              ota_window_start: '02:15:00'
              ota_window_end: '05:00:00'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSoftwareUpdate'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    delete:
      tags:
        - cfg
      summary: Reset all software update settings to default values.
      description: |
        Set all software update settings to default values and use the default release update channel.
      operationId: resetSoftwareUpdateSettings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSoftwareUpdate'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/sound:
    get:
      tags:
        - cfg
      summary: Get sound settings.
      description: |
        Sound configuration.
      operationId: getSoundSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSound'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify sound settings.
      description: |
        Change one or multiple sound settings.
      operationId: updateSoundSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgSound'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgSound'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/voice_control:
    get:
      tags:
        - cfg
      summary: Get voice control settings.
      description: |
        Voice control configuration.
      operationId: getVoiceControlSettings
      parameters:
        - name: default
          in: query
          description: Get default values instead of configured values.
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgVoiceControl'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    patch:
      tags:
        - cfg
      summary: Modify voice control settings.
      description: |
        Change one or multiple voice control settings.
      operationId: updateVoiceControlSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfgVoiceControl'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CfgVoiceControl'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /cfg/voice_control/voice_assistants:
    get:
      tags:
        - cfg
      summary: Get available voice assistants.
      operationId: getVoiceAssistants
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /docks:
    head:
      tags:
        - dock
      summary: Get total number of configured docks.
      description: |
        By default only active docks are counted. This can be changed with the `active` query parameter.
      operationId: getDockCount
      parameters:
        - $ref: '#/components/parameters/active'
      responses:
        '200':
          description: Successful operation.
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    get:
      tags:
        - dock
      summary: List configured docks and their connection state.
      description: |
        Returns all dock configuration with paging. The configuration data is enriched with current connection information.
        Use the `HEAD` operation to retrieve the total number of defined docking stations.

        By default only active docks are returned. This can be changed with the `active` query parameter.
      operationId: getDocks
      parameters:
        - $ref: '#/components/parameters/active'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          headers:
            Pagination-Count:
              description: Total number of items.
              schema:
                type: integer
            Pagination-Limit:
              description: Number of returned items.
              schema:
                type: integer
            Pagination-Page:
              description: Current page number. 1-based.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfigurations'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: Create a new dock configuration.
      description: |
        Manually create and persist a new dock configuration. This is a low-level operation without configuring and setting
        up the dock as with the `/docks/setup` endpoints! To establish a session to the dock, the connect operation must be
        called afterwards.  
        - Error `422` is returned if the given service name in `dock_id` already exists.
        - If `custom_ws_url` is not specified, the dock address is resolved through an mDNS service name lookup in `dock_id`.   
        - The `active` flag specifies if the dock will react to connection requests.
        - Non-active docks will not auto-connect and must be enabled first to be used.
        - Non-active docks won't be visible in the web-configurator.
        - If no `token` is provided the default token is used! The token is used to authenticate the WebSocket
          connection once a connection to the dock is established. To change an existing token, use the 
          `PATCH /docks/devices/:dockId` operation.
        - If `model` is provided it must be one of the known dock model identifiers: `UCD2` or `YIO1DOCK`.
      operationId: createDock
      requestBody:
        description: Client information requesting access
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockConfigurationRequest'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
    put:
      tags:
        - dock
      summary: Connect or disconnect all active dock connections.
      description: |
        Requests all active docks to establish or stop a session to the dock.  
        Use `GET /docks` or `GET /docks/devices/{dockId}` to check on the connection status.
      operationId: executeCommandOnAllDocks
      parameters:
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    delete:
      tags:
        - dock
      summary: Delete all dock configurations.
      description: |
        ⚠️ All defined dock configurations will be irrevocably deleted!

        Active dock sessions will be disconnected and the persisted dock configurations removed.
      operationId: deleteAllDocks
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /docks/discover:
    get:
      tags:
        - dock
      summary: Get docking station discovery status.
      description: |
        Returns the current discovery status and any discovered docks.

        Use the DELETE operation to stop an active discovery and PUT to start a new discovery.
      operationId: getDockDiscoveryStatus
      responses:
        '200':
          description: Dock discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockDiscoveryStatus'
              example:
                active: true
                docks:
                  - id: UC-Dock-E831CDD012A8
                    configured: false
                    friendly_name: Living room
                    address: '192.168.1.106:946'
                    model: UCD2
                    version: 0.1.0
                    discovery_type: NET
                    timestamp: '2022-11-07T07:46:04.370629Z'
                  - id: sim.1
                    configured: false
                    friendly_name: Simulated dock
                    address: '127.0.0.1:946'
                    version: 0.1.2
                    discovery_type: NET
                    timestamp: '2022-11-07T07:46:05.245759Z'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    put:
      tags:
        - dock
      summary: Start discovery of new docking stations.
      description: |
        Start device discovery over Bluetooth and mDNS. Bluetooth or network discovery can be disabled with a query
        parameter. By default the discovery automatically stops after 30 seconds. Use the GET status request to check on
        discovered devices or DELETE to stop discovery.

        By default only new network devices are returned. If a dock is already configured it will be omitted from the
        results, unless the query parameter `new=false` is set. Docks with Bluetooth enabled are always returned, since
        this usually means that the dock needs to be re-configured.

        - If BT is disabled in the remote, the query parameter `bt` is ignored.
        - Emits the WebSocket event `dock_discovery` with `event_type: START` when discovery starts.
        - For each discovered device the WebSocket event `dock_discovery` with `event_type: DISCOVER` is emitted.
        - This operation clears any old discovered devices and won't be accessible anymore with the GET operation.
      operationId: startDockDiscovery
      parameters:
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 30
            minimum: 1
            maximum: 300
        - name: bt
          in: query
          description: Use Bluetooth to discover new docks.
          required: false
          schema:
            type: boolean
            default: true
        - name: net
          in: query
          description: Query network to discover new docks.
          required: false
          schema:
            type: boolean
            default: true
        - name: new
          in: query
          description: 'Only return new devices, filter out already configured docks.'
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Stop discovery of new docking stations.
      description: |
        Stops the device discovery. The current discovery status is returned in the response. Already discovered devices
        won't be returned and can still be retrieved with the GET operation.

        Emits the WebSocket event `dock_discovery` with `event_type: STOP`.
      operationId: stopDockDiscovery
      responses:
        '200':
          description: Dock discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockDiscoveryStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/docks/discover/{dockId}':
    get:
      tags:
        - dock
      summary: Get docking station discovery device status.
      description: |
        Returns the discovered docking station device.
      operationId: getDockDiscoveryDeviceStatus
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Dock discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockDiscoveryStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - dock
      summary: Execute command on a discovered docking station.
      description: |
        Perform a WebSocket connection test with a discovered docking station. If the dock requires an API token, it must
        be specified in the request body.  
        The `IDENTIFY` command also blinks the status LED on the dock.

        Response status codes:
        - `200`: successful operation: the connection test was successful and docking station metadata could be retrieved.
        - `404`: discovered dock with `dock_id` not found. Check if the discovery result is still available and has not
                 been deleted. This can happen after a timeout since the discovery, or if the discovery result has been
                 cleared with `DELETE /docks/discover`.
        - `503`: docking station connection could not be established.
      operationId: executeCommandOnDiscoveredDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECTION_TEST
              - IDENTIFY
        - name: timeout
          in: query
          description: Timeout in seconds.
          required: false
          schema:
            type: integer
            format: int32
            default: 5
            minimum: 3
            maximum: 60
      requestBody:
        required: false
        description: Command payload
        content:
          application/json:
            schema:
              description: Driver connection parameters.
              type: object
              properties:
                connection:
                  type: object
                  properties:
                    token:
                      description: |
                        Optional dock authentication token.
                      type: string
                      maxLength: 40
      responses:
        '200':
          description: Dock system information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockSystemInfo'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /docks/setup:
    get:
      tags:
        - dock
      summary: Get current dock setup processes.
      description: |
        Return a list of all active setup process identifiers. The returned ids can be used with the
        `/docks/setup/:id` endpoints to continue or abort a setup process.
      operationId: getDockSetupProcesses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - dock
      summary: Start setting up a new docking station.
      description: |
        Create a new setup process from a discovered dock or from a manually provided dock address.

        - If there's already a setup process running for the given dock id, status code `409` is returned.
        - Emits the WebSocket event `dock_setup_change` with `event_type: START` when this operation returns `201`.

        Start setup from dock discovery:
        - The required request data can be obtained from the `/api/docks/discover` endpoints when searching for docking
          stations over Bluetooth or Ethernet. Simply provide the returned `DockDiscovery` data object (which is a super
          set of the required data to start a setup process).
        - The returned `id` in the `DockSetupInfo` response will be the identifier for the next `PUT /docks/setup/:id`
          call to provide additional data.

        Manual setup:
        - A dock identifier will automatically be created and returned in `DockSetupInfo`.
        - The dock must be reachable on the network with the provided `custom_ws_url` and optional `token`. Otherwise,
          status code `503` is returned.
        - The setup process is automatically started after a successful POST request, no call to `PUT /docks/setup/:id`
          is required.

        Response status codes:
        - `201`: setup process successfully started. Use `GET /docks/setup/:id` to poll for status updates, or listen to
           WebSocket `dock_setup_change` event messages.
        - `400`: invalid data in request body.
        - `409`: a setup process is already running. Either wait until finished, or abort it.
        - `503`: service not available to setup docking station.  
           E.g. Bluetooth is disabled and therefore the docking station cannot be setup over Bluetooth. Either enable
           Bluetooth or setup the dock over Ethernet.
      operationId: createDockSetup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDockSetup'
            examples:
              From dock discovery:
                value:
                  discovery:
                    id: UC-Dock-E831CDD012A8
                    friendly_name: Living room
                    address: '192.168.1.106:946'
                    model: UCD2
                    version: 0.1.0
                    discovery_type: NET
              Manually:
                value:
                  manually:
                    name: Living room
                    token: '0000'
                    custom_ws_url: 192.168.1.106
              Manually with WiFi:
                value:
                  manually:
                    name: Living room
                    token: '0000'
                    custom_ws_url: 192.168.1.106
                    wifi:
                      ssid: My network
                      password: don't tell anyone
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockSetupInfo'
              example:
                id: UC-Dock-E831CDD012A8
                name: Living room
                discovery_type: NET
                state: NEW
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Abort and remove all setup processes.
      description: |
        Stop all setup processes at the next possible operation and remove all setup process information.
      operationId: stopAllDockSetups
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/docks/setup/{dockId}':
    get:
      tags:
        - dock
      summary: Get docking station setup status.
      description: |
        Poll operation to retrieve the current docking station setup state. See the `state` and `error` fields in the
        response message. There are also WebSocket `dock_setup_change` event messages for state changes to avoid polling.

        Defined setup states:
        - `NEW`: setup has not yet been started. Use the `PUT` operation to provide the required data and to start setting up the dock.
        - `CONFIGURING`: setup data is currently being transferred to the dock.
        - `RESTARTING`: dock has been configured and is restarting to integrate into the network.
        - `OK`: setup process has been completed successfully, the dock can now be used.
        - `ERROR`: the setup process failed. Check the `error` field for more information.
      operationId: getDockSetupStatus
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockSetupInfo'
              example:
                id: UC-Dock-E831CDD012A8
                name: Living room
                model: UCD2_VIRTUAL
                discovery_type: NET
                state: OK
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - dock
      summary: Setup docking station.
      description: |
        Set required data to start the setup process and configure the docking station.
        When using Bluetooth the WiFi network name and credentials must be provided to connect the dock to the WiFi network.

        The `state` field in the response message indicate the current state of the setup process. Use the `GET` operation
        to poll for state updates or listen to the corresponding WebSocket `dock_setup_change` event messages with
        `event_type: SETUP`.
      operationId: startDockSetup
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockSetup'
            example:
              name: Living room
              token: '123'
              description: Setup test
              wifi:
                ssid: My Network
                password: 0123456789
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockSetupInfo'
              example:
                id: UC-Dock-E831CDD012A8
                name: Living room
                model: UCD2
                discovery_type: NET
                state: CONFIGURING
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Abort the dock setup process.
      description: |
        Stop the setup process at the next possible operation and remove the setup process information.  
        To start a new setup process, use the `POST /docks/setup` operation again.

        Emits the WebSocket event `dock_setup_change` with `event_type: STOP`.
      operationId: stopDockSetup
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/devices/{dockId}':
    get:
      tags:
        - dock
      summary: Get dock configuration.
      description: |
        Returns the dock configuration, enriched with the current session information if a dock connection is established.
      operationId: getDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
              example:
                dock_id: UC-Dock-E831CDD012A8
                name: Living room
                resolved_ws_url: 'ws://192.168.1.23:946'
                active: true
                model: UCD2
                revision: '5.4'
                led_brightness: 88
                state: CONNECTED
                version: 0.9.2
                learning_active: false
                description: Setup test
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    patch:
      tags:
        - dock
      summary: Change dock configuration like auto-connect or access token.
      description: |
        Update one or more dock fields.

        - If the dock is in an `active` connection state, then the `name`, `token` and `wifi` values are persisted in the
          dock if provided in the request. The request fails with `503` service unavailable if the configuration can't be
          set in the docking station.
        - An empty `custom_ws_url` value will remove the custom URL.
        - If the dock is not active, the values are only stored in the remote. A changed `token` will be used for the next
          connection attempt.
      operationId: updateDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: 'Fields to update, omit the ones without change.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockUpdateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockConfiguration'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - dock
      summary: Start or stop a dock connection.
      description: |
        Establish or stop a session to the dock.  
        Use `GET /docks` or `GET /docks/devices/{dockId}` to check on the connection status.
      operationId: dockConnectionCommand
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: cmd
          in: query
          description: Command to execute.
          required: true
          schema:
            type: string
            enum:
              - CONNECT
              - DISCONNECT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: Delete dock configuration.
      description: |
        ⚠️ The dock configuration will be irrevocably deleted!

        An active dock session will be disconnected and the persisted dock configuration removed.
      operationId: deleteDock
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/devices/{dockId}/command':
    post:
      tags:
        - dock
      summary: Send a dock command.
      description: |
        The following `command` values are defined:
        - `SET_LED_BRIGHTNESS`: set the maximum brightness of the front indicator LED. Set the `0..100` percentage as
           string parameter in the `value` field.  
        - `IDENTIFY`: identify the dock with blinking the indicator LED.
        - `REMOTE_LOW_BATTERY`: trigger the low battery status indicator on the dock.
        - `REMOTE_CHARGED`: trigger the remote charged indicator on the dock.
        - `REMOTE_NORMAL`: trigger the normal remote operation mode on the dock.
        - `REBOOT`: reboot the dock.
        - `RESET`: ⚠️ factory reset the dock. Requires administrator privileges.  
           The dock configuration will be deleted from the remote.
      operationId: dockCommand
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: Dock command
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  type: string
                  enum:
                    - SET_LED_BRIGHTNESS
                    - IDENTIFY
                    - REMOTE_LOW_BATTERY
                    - REMOTE_CHARGED
                    - REMOTE_NORMAL
                    - REBOOT
                    - RESET
                value:
                  description: Command parameter value. Required for `SET_LED_BRIGHTNESS`.
                  type: string
              required:
                - command
            examples:
              Set LED brightness to 50%:
                value:
                  command: SET_LED_BRIGHTNESS
                  value: '50'
              Set LED brightness to maximum:
                value:
                  command: SET_LED_BRIGHTNESS
                  value: '100'
              Identify the dock:
                value:
                  command: IDENTIFY
              Trigger low battery indicator:
                value:
                  command: REMOTE_LOW_BATTERY
              Trigger remote charged indicator:
                value:
                  command: REMOTE_CHARGED
              Reboot the dock:
                value:
                  command: REBOOT
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/devices/{dockId}/update':
    get:
      tags:
        - dock
      summary: Check for dock firmware updates.
      description: |
        Check if there is an update available for the dock.

        This operation will use the cached update information from the software update cloud service, which runs
        periodically to check for available updates and independently from this operation.  
        The returned `update_check_enabled` flag indicates if the online update check is enabled or not.

        If `update_id` is set then an update is currently in progress and can be monitored either with listening to the
        WebSocket `dock_update_change` event messages or polling the status with the
        `GET /docks/devices/{dockId}/update/{id}` operation.
      operationId: checkDockFirmwareUpdate
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockUpdateCheck'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - dock
      summary: Force dock firmware update check.
      description: |
        Check if there is an update available for the dock.

        This operation will contact the software update cloud service to check for available updates.    
        The returned `update_check_enabled` flag indicates if the online update check is enabled or not.

        If `update_id` is set then an update is currently in progress and can be monitored either with listening to the
        WebSocket `dock_update_change` event messages or polling the status with the
        `GET /docks/devices/{dockId}/update/{id}` operation.

        New updates will automatically downloaded. The download state can be retrieved with the GET operation and is
        shown in the `firmware_update.download` enum field.
      operationId: forceCheckDockFirmwareUpdate
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockUpdateCheck'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: Update dock firmware.
      description: |
        Start a firmware update on the given dock. The returned update identifier can be used to poll for the update 
        progress with the `GET /docks/devices/{dockId}/update/{id}` operation or listen to the WebSocket
        `dock_update_change` event message.

        The battery of the remote needs to be at least 20% charged to start the dock firmware update. 

        Error response codes:
        - `400`: Bad request if no update is available for the given dock.
        - `404`: Dock identifier not found.
        - `409`: Conflict, an update is already running. Use the `GET` operation to retrieve the current update identifier.
        - `503`: The dock is not connected, not enough battery to start the update, or the update service is unavailable.  
                 Please try again later.
      operationId: updateDockFirmware
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '201':
          description: Firmware update started
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - dock
      summary: "\U0001F6A7 Abort the dock firmware update."
      description: |
        Stop the firmware update process at the next possible operation and remove the update process information.

        Emits the WebSocket event `dock_update_change` with `event_type: STOP`
      operationId: stopDockFirmwareUpdate
      parameters:
        - $ref: '#/components/parameters/dock_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  '/docks/devices/{dockId}/update/{id}':
    get:
      tags:
        - dock
      summary: Check for dock firmware update progress.
      description: |
        Get the current progress and status information about a dock firmware upgrade.

        Instead of using polling one can also listen to the WebSocket `dock_update_change` event messages.
      operationId: dockFirmwareUpdateProgress
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: id
          in: path
          description: Update identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockUpdateProgress'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/docks/devices/{dockId}/ir/send':
    get:
      tags:
        - dock
      summary: Test IR command.
      description: |
        ⚠️ This is for testing only. Please use the `/ir/emitters/` endpoints for sending IR codes.

        Test function for sending IR commands. The IR code can either be in Pronto format or Hex.
        If no output is specified, the code will only be emitted from the dock.
      operationId: sendIrTest
      parameters:
        - $ref: '#/components/parameters/dock_id'
        - name: int1
          in: query
          description: Main internal ir blaster
          schema:
            type: boolean
        - name: int2
          in: query
          description: 'Second internal ir blaster. V2 dock: top'
          schema:
            type: boolean
        - name: ext1
          in: query
          description: External IR blaster 1
          schema:
            type: boolean
        - name: ext2
          in: query
          description: External IR blaster 2
          schema:
            type: boolean
        - name: pronto
          in: query
          description: 'Pronto IR code, values separated by comma'
          required: false
          schema:
            type: string
            pattern: '^[a-fA-F0-9]{4}(,[a-fA-F0-9]{4}){3,}$'
        - name: hex
          in: query
          description: Hex IR code
          required: false
          schema:
            type: string
            pattern: '^[\d]{1,3};0x[a-fA-F0-9]{1,16};[\d]{1,2};[\d]{1,2}$'
        - name: repeat
          in: query
          description: |
            Optional repeat value for sending continuous IR repeat signals (depending on IR protocol).
          schema:
            type: integer
            minimum: 0
            maximum: 20
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - dock
      summary: Send IR command.
      description: |
        ⚠️ This is for testing only. Please use the `/ir/emitters/` endpoints for sending IR codes.

        Send an IR command, either in Pronto or [IRremoteESP8266 Hex](https://github.com/unfoldedcircle/IRremoteESP8266) format.

        Hex format: `<protocol>;<hex-ir-code>;<bits>;<repeat-count>`
        - protocol: numeric value from supported and enabled protocols. See: [decode_type_t](https://github.com/unfoldedcircle/IRremoteESP8266/blob/v2.8.5-ucd2.2/src/IRremoteESP8266.h#L1011)
        - hex-ir-code: HEX value prefixed with `0x`
        - bits: number of bits in hex value
        - repeat-count: number of repeats
      operationId: sendIr
      parameters:
        - $ref: '#/components/parameters/dock_id'
      requestBody:
        description: IR command
        content:
          application/json:
            schema:
              type: object
              properties:
                int1:
                  description: Main internal ir blaster
                  type: boolean
                int2:
                  description: 'Second internal ir blaster. V2 dock: top'
                  type: boolean
                ext1:
                  description: External IR blaster 1
                  type: boolean
                ext2:
                  description: External IR blaster 2
                  type: boolean
                pronto:
                  description: 'Pronto IR code, values separated by space or comma'
                  type: string
                  pattern: '^0000((, )[a-fA-F0-9]{4}){5,}$'
                hex:
                  description: Hex IR code
                  type: string
                  pattern: '^[\d]{1,3};0x[a-fA-F0-9]{1,16};[\d]{1,2};[\d]{1,2}$'
                repeat:
                  description: |
                    Optional repeat value for sending continuous IR repeat signals (depending on IR protocol).
                  type: integer
                  minimum: 0
                  maximum: 20
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /system:
    get:
      tags:
        - system
      summary: Get system information.
      description: 'Get hardware information about the device like serial number, model number and hardware revision.'
      operationId: getSystemInfo
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - system
      summary: Perform a system command like reboot or power-off.
      description: |
        The following system commands can be executed:

        - `STANDBY`: Put the device into standby mode.
        - `REBOOT`: Reboot the device.
        - `POWER_OFF`: Switch off the device
        - `RESTART`: Restart all applications.
        - `RESTART_UI`: Restart the ui application.
        - `RESTART_CORE`: Restart the core service application.
      operationId: systemCommand
      parameters:
        - name: cmd
          in: query
          description: System command
          required: true
          schema:
            type: string
            enum:
              - STANDBY
              - REBOOT
              - POWER_OFF
              - RESTART
              - RESTART_UI
              - RESTART_CORE
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/backup/export:
    get:
      tags:
        - system
      summary: Create and export a device configuration backup.
      description: |
        Export the full Remote Two device configuration. This allows to restore the configuration after a factory reset
        or to load the configuration onto another device.

        - The backup archive is only returned to the client and not stored on the device. 
        - The returned backup archive can be restored with `PUT /system/backup/restore`.
        - It is recommended to perform the backup while the remote is in the docking station.
        - Using the remote or the Core-API should be avoided while the backup is running.
        - The backup should only take a few seconds. The backup will take longer:
          - if integration drivers are busy and require more time to shutdown.
          - if many custom resources (icons, background images, etc) are present.

        ⚠️ Attention:
        - The backup archive may contain personal information and access keys to external systems.
          - The backup archive is not encrypted. Contained information can be extracted with little effort.
          - For example the long-lived access token for Home Assistant is included, if that integration has been configured.
        - All integrations and docks will be disconnected and stopped during backup.
          - They are restarted after the backup is finished. This may take several seconds until all entities are available again.
          - Restart the device, if an integration or entities are no longer working after a backup.
        - The device must have enough free disk space to create the backup archive. At least 100 MB must be free to start the backup process.

        The backup **does not include**:
        - WiFi network configuration and passwords.
        - Administrator pin.
        - Web-configurator pin.
        - Any API-keys created with the Core-API.

        Error codes:
        - `403`: forbidden, only an administrator account may create a backup.
        - `409`: conflict, a backup or restore process is already running.
        - `507`: not enough disk space available.
      operationId: exportBackup
      responses:
        '200':
          description: Binary backup archive.
          headers:
            content-disposition:
              description: Attachment filename.
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '507':
          $ref: '#/components/responses/Err507InsufficientStorage'
  /system/backup/restore:
    put:
      tags:
        - system
      summary: Upload and restore a device configuration backup.
      description: |
        Restore the Remote Two device configuration from the uploaded backup archive. The backup archive is only used
        to restore the system and deleted after restore.

        - It is highly recommended to perform the restore while the remote is in the docking station.
        - Using the remote or the Core-API should be avoided while the restore is running.
        - The restore should only take a few seconds. The restore will take longer:
          - if integration drivers are busy and require more time to shutdown.
          - if many custom resources (icons, background images, etc) are present.

        ⚠️ Attention:
        - The device will not automatically restart after a system restore.
          - The device must be restarted after the restore to activate all changed settings.
          - Certain setting changes like OTA require a system restart.
        - WiFi configuration, administrator pin and web-configurator pin are not overwritten by a system restore.
        - All integrations and docks will be disconnected and stopped during restore.
        - The device must have enough free disk space to restore the backup. At least 100 MB must be free to start the restore process.

        Error codes:
        - `400`: bad request, back archive is invalid or corrupt. Check logs for further details.
        - `403`: forbidden, only an administrator account may restore a backup.
        - `409`: conflict, a backup or restore process is already running.
        - `500`: internal server error, the backup archive could not be processed. Check logs for further details.
        - `507`: not enough disk space available.
      operationId: restoreBackup
      parameters:
        - $ref: '#/components/parameters/merge'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BackupMetadata/properties/report'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
        '507':
          $ref: '#/components/responses/Err507InsufficientStorage'
  /system/backup/snapshots:
    get:
      tags:
        - system
      summary: "\U0001F477 Get information about available system backup snapshots."
      description: |
        _Work in progress, might still change!_

        Retrieve all available device configuration backups stored on the device.
      operationId: getBackupSnapshots
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BackupSnapshot'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - system
      summary: "\U0001F477 Create a new system backup snapshot."
      description: |
        _Work in progress, might still change!_

        Create a new device configuration backup and store it on the device.

        Please see `GET /system/backup/export` operation about creating a backup.

        Response codes:
        - `403`: forbidden, only an administrator account may create a backup.
        - `409`: conflict, a maximum of 50 backups can be stored on the device, or a backup or restore process is already running.
        - `507`: a minimum of 100 MB free space on the device is required to create a new backup.
      operationId: createBackupSnapshot
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupSnapshot'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '507':
          $ref: '#/components/responses/Err507InsufficientStorage'
    delete:
      tags:
        - system
      summary: "\U0001F477 Remove all system backups."
      description: |
        _Work in progress, might still change!_

        Delete all device configuration backups stored on the device.
      operationId: deleteAllBackupSnapshots
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/system/backup/snapshots/{id}':
    get:
      tags:
        - system
      summary: "\U0001F477 Get information about a system backup snapshot or download archive."
      description: |
        _Work in progress, might still change!_

        Based on the request `Content-Type` header, either the JSON metadata information is returned or the binary
        backup archive. If the header is missing, the binary archive is returned.

        Response codes:
        - `404`: system backup snapshot not found.
      operationId: getBackupSnapshot
      parameters:
        - $ref: '#/components/parameters/backup_id'
      responses:
        '200':
          description: Successful operation.
          headers:
            content-disposition:
              description: |
                Attachment filename for `content-type: application/octet-stream`.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupMetadata'
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    put:
      tags:
        - system
      summary: "\U0001F477 Restore a system backup snapshot."
      description: |
        _Work in progress, might still change!_

        Please see `PUT /system/backup/restore` operation about restoring a backup.

        Response codes:
        - `403`: forbidden, only an administrator account may create a backup.
        - `404`: system backup snapshot not found.
        - `409`: conflict, a backup or restore process is already running.
        - `500`: internal server error, the backup archive could not be processed. Check logs for further details.
        - `507`: not enough disk space available.
      operationId: restoreBackupSnapshot
      parameters:
        - $ref: '#/components/parameters/backup_id'
        - $ref: '#/components/parameters/merge'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1system~1backup~1restore/put/responses/200/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '500':
          $ref: '#/components/responses/Err500InternalServerError'
        '507':
          $ref: '#/components/responses/Err507InsufficientStorage'
    delete:
      tags:
        - system
      summary: "\U0001F477 Remove a system backup snapshot."
      description: |
        _Work in progress, might still change!_
      operationId: deleteBackupSnapshot
      parameters:
        - $ref: '#/components/parameters/backup_id'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/bt:
    put:
      tags:
        - system
      summary: "\U0001F9EA Perform a Bluetooth operation."
      description: |
        Change the Bluetooth controller power mode or clear all bonding information.

        `power_mode`:
        - `On`: power-on the BT controller
        - `Off`: power-off the BT controller
        - `Sleep`: put the BT controller into HCI sleep mode
      operationId: performBtOperation
      parameters:
        - name: clear_bonds
          in: query
          description: Clear bonding data
          schema:
            type: boolean
        - name: power_mode
          in: query
          description: Set power mode
          schema:
            type: string
            enum:
              - 'On'
              - 'Off'
              - Sleep
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - system
      summary: "\U0001F9EA Perform a Bluetooth subsystem reset."
      description: |
        A BT subsystem reset removes all bonding information and removes the BT-remote entity associations to BT connection 
        profiles.

        The BT-remote entities are not removed, but they need to be paired again with a BT central device.
      operationId: performBtReset
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/factory_reset:
    get:
      tags:
        - system
      summary: Get factory reset token.
      description: |
        Get a factory reset token to perform a complete factory reset of the remote.

        The token will be valid for 60 seconds. Afterwards, a new token must be requested.  
        Whenever a new token is requested, any old tokens will be invalidated.
      operationId: getFactoryResetToken
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    post:
      tags:
        - system
      summary: Perform a factory reset.
      description: |
        A factory reset removes all configuration data and puts the device into a clean state.  

        ⚠️ **Warning:** All user data will be erased and won't be recoverable!

        A reset token must be requested first and provided to perform a factory reset.
      operationId: performFactoryReset
      parameters:
        - name: token
          in: query
          description: Reset token
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/install:
    get:
      tags:
        - system
      summary: Get installed custom components.
      description: |
        Returns the installation status of custom system components like the user interface or web-configurator.
      operationId: getInstalledCustomComponents
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomInstall'
              example:
                - component: ui
                  installed: true
                  active: true
                  installation_date: 2023-07-24T07:57:33.000Z
                  release:
                    name:
                      en: Remote UI
                    version: 0.27.10
                    description:
                      en: Custom remote UI App for testing.
                    developer:
                      name: Unfolded Circle ApS
                      url: 'https://www.unfoldedcircle.com'
                      email: hello@unfoldedcircle.com
                    home_page: 'https://www.unfoldedcircle.com'
                    release_date: '2023-07-19'
                    requirements:
                      firmware_version: '>=0.13.0, <1.0.0'
                - component: web_configurator
                  installed: false
                  active: false
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/system/install/{customComponent}':
    get:
      tags:
        - system
      summary: Get status of a custom component installation.
      description: |
        Returns the status of an installed custom component, as a custom UI app or web-configurator.

        - Error response `400` might be returned, if the metadata of an installed custom component is no longer valid with
          the current firmware.
      operationId: getCustomComponentStatus
      parameters:
        - $ref: '#/components/parameters/custom_component'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomInstall'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
    put:
      tags:
        - system
      summary: Enable or disable a custom component.
      description: |
        Switch between a default or an installed custom component.

        This does not delete the custom installation and only switches between the default component and the installed
        custom component.

        Error response codes:
        - `400`: metadata of custom component is no longer valid with the current firmware. 
        - `403`: user doesn't have administrator rights.
        - `404`: the custom component is not installed and cannot be enabled or disabled.
        - `409`: installed custom component is no longer compatible with the current firmware.

        ⚠️ Attention:
        - Switching the web-configurator might disconnect the current request. Use a GET request to check for the current state.
        - Switching the remote-ui will restart the application and the screen will go dark for a while.
        - For certain error conditions, the device might restart.
      operationId: enableCustomComponent
      parameters:
        - $ref: '#/components/parameters/custom_component'
        - name: enable
          in: query
          description: Enable or disable component.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomInstall'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
    delete:
      tags:
        - system
      summary: Remove an installed custom component.
      description: |
        Deactivates the custom components and starts the default one. The custom component is removed afterwards from the
        device.

        ⚠️ Attention:
        - Deleting the web-configurator might disconnect the current request. Use a GET request to check for the current state.
        - Deleting an active, custom remote-ui will restart the application and the screen will go dark for a while.
        - For certain error conditions, the device might restart.
      operationId: removeCustomComponent
      parameters:
        - $ref: '#/components/parameters/custom_component'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
    post:
      tags:
        - system
      summary: Upload and install a custom component.
      description: |
        ☢️ VOIDS WARRANTY ☢️

        The `void_warranty` query parameter is required to install a custom component:
        - The user has to agree and confirm, that the warranty will be voided by installing a custom component.
        - The confirmation will be recorded in a write-once location on the device and cannot be reverted!
        - The value of the parameter must be `yes`, otherwise the installation is aborted and `401` returned. 

        Custom archive requirements:
        - TAR GZip archive (either .tgz or .tar.gz file suffix).
        - In the root of the archive, there must be a `release.json` file describing the custom version.  
          See `CustomRelease` schema for the release.json format.
        - No symlinks. They are automatically removed during the installation.
        - UI:
          - The UI binary must be named `remote-ui` in the `./bin` subdirectory.
          - All application files must be in one of the following subdirectories, other locations are not accessible at runtime:
            - `./bin`: application binary, usually only `remote-ui`.
            - `./config`: configuration data. Path is accessible with `UC_CONFIG_HOME` environment variable.
            - `./data`: application data. Path is accessible with `UC_DATA_HOME` environment variable.
        - web-configurator:
          - An `index.html` file must be in the root of the archive.

        Error response codes:
        - `400`: invalid archive, missing data in archive or included metadata cannot be read.
        - `403`: user did not agree to void warranty, or user does not have administrator rights.
        - `409`: custom component is not compatible with the current firmware.
        - `507`: insufficient storage to upload and process installation archive.

        ⚠️ Attention:
        - Installing a custom web-configurator might disconnect the current request. Use a GET request to check for the current state.
        - Installing a custom remote-ui will restart the application and the screen will go dark for a while.
        - For certain error conditions, the device might restart.
      operationId: installCustomComponent
      parameters:
        - $ref: '#/components/parameters/custom_component'
        - name: void_warranty
          in: query
          description: User confirmation that this action voids warranty.
          required: false
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: TAR GZip Archive file with the custom component. File extension must be `.tar.gz` or `.tgz`.
                  type: string
                  format: binary
      responses:
        '201':
          description: Custom component successfully installed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomInstall'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '507':
          $ref: '#/components/responses/Err507InsufficientStorage'
  /system/logs:
    get:
      tags:
        - system
      summary: Retrieve and query log entries.
      description: |
        Retrieve log entries based on the query parameters.

        Depending on the `Content-Type` header, the logs are either returned as JSON objects or exported as a text file.

        - `Content-Type: application/json` or none: retrieve logs as json objects.
        - `Content-Type: text/plain` or none: retrieve logs as text export.
          - Field order: <timestamp> <service> <level> <message>
          - Fields are separated by a tab.
          - The message itself might contain tabs as well!
          - The message might contain line breaks and use multiple lines.

        Notes:    
        - Number of log entries are limited to a maximum of 10'000 entries.
        - Log entries are retrieved in reverse order.
        - Not all services are using the priority logging yet and log all entries with priority 6 (info).  
          They might even include their own log level in the message text.
        - Text search is not case-sensitive. Wildcards or Regex is not supported.
      parameters:
        - name: p
          in: query
          description: Minimum priority of log message.
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 8
            default: 5
        - name: s
          in: query
          description: 'One or more service identifiers, separated by comma'
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit number of returned log entries
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 10000
            default: 100
        - name: from
          in: query
          description: Oldest log timestamp to consider
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Newest log timestamp to consider
          required: false
          schema:
            type: string
            format: date-time
        - name: q
          in: query
          description: Search text in log message
          required: false
          schema:
            type: string
        - name: boot_ids
          in: query
          description: 'One or more boot identifiers, separated by comma'
          required: false
          schema:
            type: string
      operationId: queryLogs
      responses:
        '200':
          description: Successful operation.
          content:
            text/plain:
              schema:
                type: string
              example: |
                2023-07-27T09:11:44.584555+00:00  ui  WARN  A warning message
                2023-07-27T08:52:54.609843+00:00  ui  INFO  An information message
                2023-07-27T08:52:53.609143+00:00  ui  DEBUG Application is starting
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SystemLogEntry'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/logs/boots:
    get:
      tags:
        - system
      summary: Get boot identifiers for log access.
      description: |
        List system boots to retrieve boot identifiers for a specific boot.
      operationId: getBootLogIdentifiers
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SystemLogBoot'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/logs/services:
    get:
      tags:
        - system
      summary: Get available services to retrieve log entries from.
      description: |
        List the available services which can be queried for log entries.
      operationId: getLogServices
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SystemLogService'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/logs/hci:
    get:
      tags:
        - system
      summary: Download HCI trace file.
      description: |
        Retrieve the Bluetooth HCI trace file in binary PacketLogger file format.

        - `404 Not Found` is returned if there's no HCI trace file.
      operationId: downloadHciLog
      responses:
        '200':
          description: Successful operation.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /system/power:
    get:
      tags:
        - system
      summary: Get current system power mode.
      operationId: getPowerMode
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerModeResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: Set a power mode
      description: |
        Setting `SUSPEND` will put the system immediately into suspend mode!

        Note: suspend mode might be prevented by standby inhibitors, for example by activity sequences or if an integration
        setup is running.
      operationId: setPowerMode
      parameters:
        - $ref: '#/components/parameters/power_mode'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /system/power/battery:
    get:
      tags:
        - system
      summary: Get battery status.
      operationId: getBatteryStatus
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatteryStatusResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /system/power/standby_inhibitors:
    get:
      tags:
        - system
      summary: Get standby inhibitors.
      operationId: getStandbyInhibitors
      description: |
        Automatic system standby can be prevented with "standby inhibitors". For example during integration setup or as a
        user option for activities.

        There are two types of inhibitors:
        - Temporary inhibitors set a delay value for which the device doesn't go into standby. After the delay and
          the idle timeouts have expired, the remote goes into standby and the temporary inhibitor will be removed.
        - Blocking inhibitors will prevent the device to go into standby until the inhibitor is removed by the client.

        Note: temporary inhibitors will only be checked and removed during standby events. As long as the device is active,
        they may still appear in the result.
      responses:
        '200':
          description: List of inhibitors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inhibitors'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    post:
      tags:
        - system
      summary: Create a standby inhibitor.
      operationId: createStandbyInhibitor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStandbyInhibitor'
        required: true
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                  - id
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '409':
          $ref: '#/components/responses/Err409Conflict'
    delete:
      tags:
        - system
      summary: Remove all standby inhibitors.
      operationId: deleteAllStandbyInhibitors
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  '/system/power/standby_inhibitors/{id}':
    delete:
      tags:
        - system
      summary: Remove a standby inhibitor.
      operationId: deleteStandbyInhibitor
      parameters:
        - name: id
          in: path
          description: Inhibitor identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
  /system/sensors/ambient_light:
    get:
      tags:
        - system
      summary: Get current ambient light reading from light sensor.
      operationId: getAmbientLight
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmbientLightResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /system/update:
    get:
      tags:
        - system
      summary: Check if system update is available.
      description: |
        Returns the known available system updates.

        System update checks are run automatically (if not disabled in settings). Use the `PUT` operation to force
        an update check.
      operationId: checkSystemUpdate
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableSystemUpdateResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: Force system update check
      operationId: forceSystemUpdateCheck
      description: |
        Contacts the update server to check if a new system update is available.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableSystemUpdateResponse'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/system/update/{updateId}':
    post:
      tags:
        - system
      summary: Perform system update.
      description: |
        Start a system update with the given `updateId` parameter. Use `latest` to use the latest available system update.

        The system update will be started if:
        - the system update has been downloaded already (`download` state is `DOWNLOADED`).
        - the device has at least 50% battery charge.

        If the system update is started, the response message contains `state: START`. In case there's not enough battery,
        `503 service unavailable` is returned. 
        It is recommended to perform the update while the remote is charging in the docking station.

        The progress of the system update can be retrieved with the `GET` operation, or by listening to the WebSocket 
        `software_update` event messages.

        If the system update hasn't been downloaded yet (`download` state is `PENDING` or `ERROR`), this operation will only
        start the download and return `state: DOWNLOAD`. Once successfully downloaded, it can be installed by calling this
        operation again.

        ⚠️ Download progress events are not yet implemented!

        Error codes:
        - `404`: updateId does not exist
        - `409`: download or update is already running
        - `422`: for download request: update is already downloaded
        - `503`: update service is currently not available
      operationId: updateSystem
      parameters:
        - name: updateId
          in: path
          description: Update image identification
          required: true
          schema:
            type: string
            default: latest
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemUpdateResponse'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '409':
          $ref: '#/components/responses/Err409Conflict'
        '422':
          $ref: '#/components/responses/Err422UnprocessableEntity'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    get:
      tags:
        - system
      summary: Get system update progress.
      operationId: getSystemUpdateProgress
      parameters:
        - name: updateId
          in: path
          description: Update image identification
          required: true
          schema:
            type: string
            default: latest
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemUpdateProgress'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
  /system/wifi:
    get:
      tags:
        - system
      summary: Get WiFi status.
      operationId: getWifiStatus
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WifiStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: WiFi connection handling.
      description: |
        Perform one of the following commands on the WLAN interface:

        - `DISCONNECT`: Disconnect and wait for `REASSOCIATE` or `RECONNECT` command before connecting again.
        - `RECONNECT`: Connect if disconnected (i.e. like `REASSOCIATE`, but only connect if in disconnected state).
        - `REASSOCIATE`: Force reassociation.
        - `ENABLE_ALL_NETWORKS`: Enable all network connections and start connecting to a network if in disconnected state.
        - `DISABLE_ALL_NETWORKS`: Disable all network connections and disconnect if in connected state.

        ⚠️Attention: `ENABLE_ALL_NETWORKS` and `DISABLE_ALL_NETWORKS` will persist the state! I.e. if all networks are 
        disabled and the device is restarted afterwards, no WiFi connection will be established.
      operationId: wifiCommand
      parameters:
        - name: cmd
          in: query
          description: Command
          schema:
            $ref: '#/components/schemas/WifiCmd'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /system/wifi/scan:
    get:
      tags:
        - system
      summary: Get discovered WiFi access points.
      description: |
        Returns the current discovery status and any discovered access points.

        Use the DELETE operation to stop an active discovery and PUT to start a new discovery.
      operationId: getWifiScanStatus
      responses:
        '200':
          description: WiFi AP discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApScanStatus'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: Start discovery of WiFi access points.
      description: |
        Request a new BSS scan. A scan usually takes a few seconds and the current state is returned with the GET
        operation, together with the already found access points.
      operationId: startWifiScan
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - system
      summary: Stop discovery of WiFi access points.
      description: |
        Stops the access point discovery. The current discovery status is returned in the response.
      operationId: stopWifiScan
      responses:
        '200':
          description: Dock discovery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApScanStatus'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  /system/wifi/networks:
    get:
      tags:
        - system
      summary: Get configured WiFi networks.
      description: |
        Returns all configured WiFi networks.
      operationId: getAllWifiNetworks
      responses:
        '200':
          description: Configured WiFi networks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedNetworks'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    post:
      tags:
        - system
      summary: Create a new Wifi network configuration.
      operationId: addWifiNetwork
      description: |
        Add a new network configuration for the given SSID.  
        For an open network without password the `password` field must be omitted (do not send an empty password value).

        ⚠️ Only WPA-PSK (pre shared keys) and open networks are supported!
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWifiNetwork'
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - system
      summary: Delete all configured WiFi networks.
      description: |
        Disconnects the WiFi network and removes all network configurations.

        ⚠️ Attention: the network configuration is automatically persisted and the network configuration cannot
        be retrieved anymore!
      operationId: deleteAllWifiNetworks
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
  '/system/wifi/networks/{wifiId}':
    get:
      tags:
        - system
      summary: Get WiFi network configuration.
      description: |
        Returns the configured wifi network.

        Use the DELETE operation to remove and PATCH to edit a network configuration. A new network configuration can be
        created with the POST operation on the `/system/wifi/networks/` resource.
      operationId: getWifiNetwork
      parameters:
        - $ref: '#/components/parameters/wifi_id'
      responses:
        '200':
          description: WiFi network configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedNetwork'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    patch:
      tags:
        - system
      summary: Modify a network configuration.
      description: Change the WiFi network password.
      operationId: modifyWifiNetwork
      parameters:
        - $ref: '#/components/parameters/wifi_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyWifiNetwork'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Err400BadRequest'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    put:
      tags:
        - system
      summary: WiFi network connection handling.
      description: |
        Perform one of the following commands on a network configuration:
        - `ENABLE`: Enable a network. If no network is connected, it will be tried to connect to this network.
        - `DISABLE`: Disable a network. If the network is currently connected it will be disconnected.
        - `SELECT`: Select the given network and disable all others.

        ⚠️ Attention: all network changes (enabled or disabled) are persisted!
      operationId: wifiNetworkCommand
      parameters:
        - $ref: '#/components/parameters/wifi_id'
        - name: cmd
          in: query
          description: Command
          schema:
            $ref: '#/components/schemas/WifiNetworkCmd'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
    delete:
      tags:
        - system
      summary: Delete a configured WiFi network.
      description: |
        The given network is removed from the configuration and disconnected if currently connected.

        ⚠️ Attention: the network configuration is automatically persisted and the removed network configuration cannot
        be retrieved anymore!
      operationId: deleteWifiNetwork
      parameters:
        - $ref: '#/components/parameters/wifi_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '401':
          $ref: '#/components/responses/Err401Unauthorized'
        '403':
          $ref: '#/components/responses/Err403Forbidden'
        '404':
          $ref: '#/components/responses/Err404NotFound'
        '503':
          $ref: '#/components/responses/Err503ServiceUnavailable'
components:
  parameters:
    api_key_id:
      name: apiKeyId
      in: path
      description: API key identification
      required: true
      schema:
        $ref: '#/components/schemas/ApiKeyId'
    backup_id:
      name: id
      in: path
      description: Backup snapshot identifier
      required: true
      schema:
        type: string
    button_id:
      name: buttonId
      in: path
      description: Button identification.
      required: true
      schema:
        $ref: '#/components/schemas/ButtonId'
    button_press:
      name: buttonPress
      in: path
      description: Button press type.
      required: true
      schema:
        type: string
        enum:
          - short_press
          - long_press
    cmd_id:
      name: cmdId
      in: path
      description: IR command identification.
      required: true
      schema:
        $ref: '#/components/schemas/IrCodeKey'
    custom_component:
      name: customComponent
      in: path
      description: Custom system component.
      required: true
      schema:
        $ref: '#/components/schemas/CustomComponent'
    dock_id:
      name: dockId
      in: path
      description: Dock identification
      required: true
      schema:
        $ref: '#/components/schemas/DockId'
    driver_id:
      name: driverId
      in: path
      description: Integration driver identification
      required: true
      schema:
        $ref: '#/components/schemas/DriverId'
    emitter_id:
      name: emitterId
      in: path
      description: Emitter device id.
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    entity_id:
      name: entityId
      in: path
      description: Entity identification.
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
    group_id:
      name: groupId
      in: path
      description: Group identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    integration_id:
      name: intgId
      in: path
      description: Integration identification
      required: true
      schema:
        $ref: '#/components/schemas/IntegrationId'
    ir_key:
      name: key
      in: path
      description: IR command key
      required: true
      schema:
        $ref: '#/components/schemas/IrCodeKey'
    page_id:
      name: pageId
      in: path
      description: Page identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    profile_id:
      name: profileId
      in: path
      description: Profile identification
      required: true
      schema:
        $ref: '#/components/schemas/SimpleId'
    resource_id:
      name: id
      in: path
      description: Resource identifier
      required: true
      schema:
        type: string
    resource_type:
      name: type
      in: path
      description: Resource type
      required: true
      schema:
        $ref: '#/components/schemas/ResourceType'
    system:
      name: system
      in: path
      description: Identification of the external system. E.g. _homeassistant_.
      required: true
      schema:
        $ref: '#/components/schemas/ExternalSystemId'
    token_id:
      name: tokenId
      in: path
      description: Access token identification
      required: true
      schema:
        $ref: '#/components/schemas/AccessTokenId'
    wifi_id:
      name: wifiId
      in: path
      description: WiFi network identification
      required: true
      schema:
        type: integer
        minimum: 0
    active:
      name: active
      in: query
      description: Filter by active flag
      required: false
      schema:
        type: boolean
    enabled:
      name: enabled
      in: query
      description: Filter by enabled flag.
      required: false
      schema:
        type: boolean
    entity_types:
      name: entity_types
      in: query
      description: 'Filter by multiple entity types, separated by comma.'
      required: false
      schema:
        type: string
    has_instances:
      name: has_instances
      in: query
      description: |
        Filter if a driver has integration instances or not:
        - true = only consider drivers which have at least one integration instance,
        - false = drivers without instances
        - NONE = any.
      required: false
      schema:
        type: boolean
    instantiable:
      name: instantiable
      in: query
      description: |
        Filter if a driver is instantiable or not:
        - true = only consider drivers which allow new integration instances to be created from. Either single-device drivers
          without an instance, or multi-device drivers.
        - false = only drivers which allow no more instances
        - NONE = any.
      required: false
      schema:
        type: boolean
    intg_ids:
      name: intg_ids
      in: query
      description: 'Filter by multiple integration identifiers, separated by comma.'
      required: false
      schema:
        type: string
    merge:
      name: merge
      in: query
      description: Merge data.
      required: false
      schema:
        type: boolean
    query:
      name: q
      in: query
      description: Text search
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 50
    resource_type_query:
      name: type
      in: query
      description: Resource type.
      required: false
      schema:
        $ref: '#/components/schemas/ResourceType'
    page:
      name: page
      in: query
      description: Current page number. 1-based.
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    power_mode:
      name: power_mode
      in: query
      description: Power mode
      required: true
      schema:
        $ref: '#/components/schemas/PowerMode'
    limit:
      name: limit
      in: query
      description: Limits the number of returned items.
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 10
        maximum: 100
        multipleOf: 10
    single_device:
      name: single_device
      in: query
      description: |
        true = only consider single-device drivers, false = only multi-device drivers, NONE = all.
      required: false
      schema:
        type: boolean
  schemas:
    AccessTokenId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique token identifier. Usually a UUID.
    Activities:
      type: array
      items:
        $ref: '#/components/schemas/ActivityOverview'
    Activity:
      description: |
        The activity entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - activity
            features:
              description: |
                Supported features of the activity. If the activity has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: activity was created by Remote Two and can be edited.
                    - `false`: activity was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                activity_group:
                  description: |
                    Minimal activity group information to use in a user interface with it's friendly name and icon.
                  type: object
                  properties:
                    group_id:
                      $ref: '#/components/schemas/EntityId'
                    name:
                      $ref: '#/components/schemas/LanguageText'
                    icon:
                      $ref: '#/components/schemas/IconIdentifier'
                  required:
                    - group_id
                    - name
                prevent_sleep:
                  description: Prevent the device to go to sleep while activity is on.
                  type: boolean
                included_entities:
                  $ref: '#/components/schemas/IncludedEntities'
                sequences:
                  $ref: '#/components/schemas/ActivitySequences'
                button_mapping:
                  $ref: '#/components/schemas/DeviceButtonMappings'
                user_interface:
                  $ref: '#/components/schemas/ActivityUserInterface'
            attributes:
              type: object
              properties:
                state:
                  $ref: '#/components/schemas/SequenceState'
          required:
            - options
            - attributes
    ActivityId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Activity identifier
    ActivityOverview:
      description: |
        The activity entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - activity
            features:
              description: |
                Supported features of the activity. If the activity has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: activity was created by Remote Two and can be edited.
                    - `false`: activity was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                activity_group:
                  $ref: '#/components/schemas/EntityId'
    ActivityRequest:
      description: |
        Dedicated request object to create a new activity.
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                options:
                  type: object
                  properties:
                    entity_ids:
                      type: array
                      items:
                        $ref: '#/components/schemas/EntityId'
                  required:
                    - entity_ids
      required:
        - name
    ActivitySequences:
      type: object
      properties:
        'on':
          $ref: '#/components/schemas/CommandSequence'
        'off':
          $ref: '#/components/schemas/CommandSequence'
    ActivityUpdate:
      description: |
        Dedicated request object to update an existing activity.  
        All root properties are optional and only the provided objects are updated in the activity. Omitted objects are
        ignored and not deleted from the activity.

        The `entity_ids` object must be managed by the client and is persisted when updating an activity.

        Notes:
        - Entities can be included in `entity_ids` without being used in `sequences`.  
          This allows to edit the activity in multiple sessions without having to reselect the desired entities.
        - Every referenced entity in `sequences` must be included in `entity_ids`, otherwise the activity cannot be saved.
        - If the client removes a configured entity from the system which is included in an activity, it must make sure to
          also remove all references in the activity. See `IncludedEntity.available` property in the included entities
          object when retrieving an activity.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            prevent_sleep:
              description: Prevent the device to go to sleep while activity is on.
              type: boolean
            entity_ids:
              type: array
              items:
                $ref: '#/components/schemas/EntityId'
            sequences:
              $ref: '#/components/schemas/ActivitySequences'
    ActivityUserInterface:
      type: object
      properties:
        pages:
          type: array
          items:
            $ref: '#/components/schemas/ActivityUserInterfacePage'
    ActivityUserInterfacePage:
      type: object
      properties:
        page_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          description: Optional page name
          type: string
        grid:
          $ref: '#/components/schemas/DeviceButtonLayout/properties/grid'
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserInterfaceItem'
      required:
        - page_id
        - grid
        - items
    ActivityUserInterfacePageUpdate:
      type: object
      properties:
        name:
          description: Optional page name
          type: string
        grid:
          $ref: '#/components/schemas/DeviceButtonLayout/properties/grid'
        items:
          description: |
            Updated user interface items. An empty array will REMOVE all items, if the property is omitted the existing
            configuration is not changed.
          type: array
          items:
            $ref: '#/components/schemas/UserInterfaceItem'
    ActivityGroup:
      description: |
        An activity group creates a dependency between multiple activities. Switching between activities will consider
        the current state of the included entities and only turn-on or -off the required entities.
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/EntityId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          $ref: '#/components/schemas/ActivityGroupOptions'
        activities:
          description: Included activities in the group.
          type: array
          items:
            $ref: '#/components/schemas/IncludedActivity'
      required:
        - group_id
        - name
        - options
        - activities
    ActivityGroups:
      type: array
      items:
        $ref: '#/components/schemas/ActivityGroupOverview'
    ActivityGroupState:
      description: |
        - `OFF`: No included activity is running.
        - `ACTIVE`: An included activity is running.
        - `RUNNING`: An included activity is currently running, e.g. either switching activities, or turning off.
        - `ERROR`: An included activity is in an error state.
      type: string
      enum:
        - 'OFF'
        - ACTIVE
        - RUNNING
        - ERROR
    ActivityGroupOverview:
      description: |
        Minimal activity group object intended for an overview page, which is returned when retrieving all activities.
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/EntityId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        activity_count:
          description: Number of included activities.
          type: integer
        state:
          $ref: '#/components/schemas/ActivityGroupState'
      required:
        - group_id
        - name
        - activity_count
    ActivityGroupUpdate:
      description: |
        Dedicated request object to update an existing activity group.  
        All root properties are optional and only the provided objects are updated in the activity group. Omitted objects are
        ignored and not deleted from the activity group.

        Referenced activities must exist, an empty `activity_ids` array will remove all included activities from the group.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          $ref: '#/components/schemas/ActivityGroupOptions'
        activity_ids:
          description: Entity identifiers of included activities in group.
          type: array
          items:
            $ref: '#/components/schemas/EntityId'
    IncludedActivity:
      description: |
        Minimal activity object to show the activity in a user interface with it's friendly name and icon.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        state:
          $ref: '#/components/schemas/SequenceState'
      required:
        - entity_id
        - name
    SequenceState:
      description: |
        State of an Activity or Macro sequence:
        - `RUNNING`: Sequence is currently running
        - `COMPLETED`: Final state for a macro
        - `ON`: Final activity state for the `on` sequence
        - `OFF`: Final activity state for the `off` sequence
        - `STOPPED`: The sequence was aborted with a stop request
        - `TIMEOUT`: The sequence timed out and was aborted
        - `ERROR`: There was an error running the sequence and did not complete
      type: string
      enum:
        - RUNNING
        - COMPLETED
        - 'ON'
        - 'OFF'
        - STOPPED
        - TIMEOUT
        - ERROR
    ActivityGroupOptions:
      description: "\U0001F477Not yet finalized!\n\nActivity group specific options, e.g. how delays are handled when switching between activities.\n"
      type: object
      properties:
        remove_turn_on_delays:
          description: |
            - `previous_cmd_skipped`: Only remove delay steps if the previous step is skipped, because the entity is in a
               power-on state.
            - `between_skipped_cmds`: Only remove delay steps if the previous and next power-on steps are skipped, because
               the entity is already in a power-on state.
            - `never`: Never remove delay steps in the on-sequence of the new activity.
          type: string
          enum:
            - previous_cmd_skipped
            - between_skipped_cmds
            - never
        turn_off_unused_entities:
          description: |
            - `always`: Always turn off unused entities in the previous activity.  
               All included entities are considered, not just the ones used in the on-sequence of the new activity.
            - `in_off_sequence`: Only turn off unused entities which are included in the off-sequence of the previous activity.
            - `run_off_sequence`: Run the original off-sequence of the old activity and dynamically filter out power-off commands.  
               All power-off commands from entities used in the new activity's power-on sequence will be filtered out.
            - `never`: Never turn off entities in the previous activity.
          type: string
          enum:
            - always
            - in_off_sequence
            - run_off_sequence
            - never
    AdminPin:
      type: string
      maxLength: 20
      description: Optional administrator pin
    AmbientLight:
      type: object
      properties:
        intensity:
          description: 'Light intensity. 0 = pitch black, 65535 = very bright.'
          type: integer
          minimum: 0
          maximum: 65535
      required:
        - intensity
    AmbientLightResponse:
      type: object
      properties:
        intensity:
          description: 'Light intensity. 0 = pitch black, 65535 = very bright.'
          type: integer
          minimum: 0
          maximum: 65535
      required:
        - intensity
    ApiKey:
      type: object
      properties:
        key_id:
          $ref: '#/components/schemas/ApiKeyId'
        name:
          $ref: '#/components/schemas/ApiKeyName'
        prefix:
          description: Prefix of the API key for identification purposes.
          type: string
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeName'
        description:
          $ref: '#/components/schemas/Description'
        creation_date:
          type: string
          format: date-time
    ApiKeyId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique key identifier. Usually a UUID.
    ApiKeyName:
      type: string
      minLength: 1
      maxLength: 50
      description: Friendly API key name to show in the app
    ApiKeyRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        scopes:
          type: array
          items:
            type: string
          description: Requested access scopes for the API key.
        active:
          type: boolean
          default: false
          description: |
            Only activated keys are valid for API access.  
            This might be overridden if the requestor doesn't have sufficient rights. In this case the key will not be active
            until a user with appropriate rights will set it active. The assigned `active` state will be returned in the
            response.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - name
        - scopes
    ApiKeyResponse:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        api_key:
          type: string
          description: API key.
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeName'
      required:
        - name
        - api_key
        - active
        - scopes
    ApiKeys:
      type: array
      items:
        $ref: '#/components/schemas/ApiKey'
    ApiKeyUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ApiKeyName'
        active:
          type: boolean
          description: Only activated keys are valid for API access.
        valid_to:
          type: string
          format: date-time
          description: 'Optional expiration timestamp. If not set, the API key is valid until revoked.'
        description:
          $ref: '#/components/schemas/Description'
    ApiResponse:
      type: object
      properties:
        code:
          type: string
          description: Status code
        message:
          type: string
          description: Status message describing the result or error. This message is intended for error analysis and should not directly shown to the end user.
    AvailableEntity:
      description: Provided entity from an integration which can be configured to be used in the remote.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/AvailableEntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        device_id:
          $ref: '#/components/schemas/DeviceId'
        device_class:
          description: |
            Optional device type. This can be used by the UI to represent the entity with a different
            icon, behaviour etc. See entity documentation for available device classes.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        features:
          description: |
            Supported features of the entity. See entity documentation for available features.
          type: array
          items:
            type: string
        options:
          description: |
            Feature options. See entity documentation for available options.
          type: object
        area:
          description: Optional area if supported by the integration. E.g. `Living room`.
          type: string
      required:
        - entity_id
        - entity_type
        - integration_id
        - name
        - features
    AvailableEntityId:
      type: string
      format: '^[a-zA-Z0-9\-_\.]+$'
      minLength: 1
      maxLength: 36
      description: |
        Entity identifier used in an integration driver (= available entities).
    BackupSnapshot:
      type: object
      properties:
        id:
          description: Backup identifier
          type: string
        creation_date:
          description: Creation date of the backup snapshot
          type: string
          format: date-time
        size:
          description: Archive size in bytes
          type: integer
          format: int32
      required:
        - id
        - creation_date
        - size
      example:
        id: UCR2_2023-09-17_145305
        creation_date: '2023-09-17T14:53:05+02:00'
        size: 2370274
    BackupMetadata:
      type: object
      properties:
        id:
          description: Backup identifier
          type: string
        creation_date:
          description: Creation date of the backup snapshot
          type: string
          format: date-time
        version:
          $ref: '#/components/schemas/BackupMetadataVersion'
        report:
          type: object
          properties:
            item:
              type: string
              enum:
                - db
                - integration_driver
                - integration
                - activity
                - macro
                - remote
                - profile
                - dock
                - resource
            available:
              type: integer
              format: int32
            ok:
              type: integer
              format: int32
          required:
            - item
            - available
            - ok
      required:
        - id
        - creation_date
        - version
      example:
        id: UCR2_2023-09-17_145305
        creation_date: '2023-09-17T14:53:05+00:00'
        version:
          backup: 1.0.0
          core: 0.34.5-beta
          os: 1.2.0
    BackupMetadataVersion:
      type: object
      properties:
        backup:
          description: 'Version of the backup data model in [SemVer](https://semver.org/) format.'
          type: string
        core:
          description: Core app version
          type: string
        os:
          description: Operating system version
          type: string
      required:
        - backup
    BatteryStatusResponse:
      type: object
      properties:
        capacity:
          description: Current battery charge in %
          type: integer
          minimum: 0
          maximum: 100
        status:
          $ref: '#/components/schemas/PowerStatus'
        power_supply:
          description: Power supply online
          type: boolean
      required:
        - capacity
        - status
    PowerStatus:
      type: string
      enum:
        - CHARGING
        - DISCHARGING
        - NOT_CHARGING
        - FULL
    ButtonId:
      type: string
      format: '^[A-Z0-9_]+$'
      minLength: 1
      maxLength: 20
      description: Physical button identification
    CfgAll:
      type: object
      properties:
        bt:
          $ref: '#/components/schemas/CfgBt'
        button:
          $ref: '#/components/schemas/CfgButtons'
        device:
          $ref: '#/components/schemas/CfgRemoteDevice'
        display:
          $ref: '#/components/schemas/CfgDisplay'
        features:
          $ref: '#/components/schemas/CfgFeatures'
        haptic:
          $ref: '#/components/schemas/CfgHaptic'
        localization:
          $ref: '#/components/schemas/CfgLocalization'
        network:
          $ref: '#/components/schemas/CfgNetwork'
        power_saving:
          $ref: '#/components/schemas/CfgPowerSaving'
        profile:
          $ref: '#/paths/~1cfg~1profile/get/responses/200/content/application~1json/schema'
        software_update:
          $ref: '#/components/schemas/CfgSoftwareUpdate'
        sound:
          $ref: '#/components/schemas/CfgSound'
        voice_control:
          $ref: '#/components/schemas/CfgVoiceControl'
        restart_required:
          description: A configuration change requires a restart.
          type: boolean
    CfgBt:
      type: object
      properties:
        peripheral_connections:
          description: Maximum number of peripheral connections at the same time.
          type: integer
          minimum: 1
        advertisement_name:
          description: Advertisement name of the Remote.
          type: string
        enable_hci_log:
          description: Enable HCI logging.
          type: boolean
        enable_debug_port:
          description: Enable BT subsystem debug TCP-port for remote control.
          type: boolean
        version:
          description: BT subsystem version.
          type: string
      required:
        - peripheral_connections
        - advertisement_name
        - enable_hci_log
        - enable_debug_port
    CfgBtUpdate:
      type: object
      properties:
        peripheral_connections:
          description: Maximum number of peripheral connections at the same time.
          type: integer
          minimum: 1
        enable_hci_log:
          description: Enable HCI logging.
          type: boolean
        enable_debug_port:
          description: Enable BT subsystem debug TCP-port for remote control.
          type: boolean
    CfgButtons:
      type: object
      properties:
        brightness:
          description: 'Button backlight brightness. 0 = off, 100 = max.'
          type: integer
          minimum: 0
          maximum: 100
        auto_brightness:
          description: 'When enabled, button backlight will automatically turn on in a dark room.'
          type: boolean
      required:
        - brightness
        - auto_brightness
    CfgDisplay:
      type: object
      properties:
        brightness:
          description: Display brightness.
          type: integer
          minimum: 0
          maximum: 100
        auto_brightness:
          description: Automatically adjust the display brightness based on ambient lighting conditions.
          type: boolean
      required:
        - brightness
        - auto_brightness
    CfgFeatures:
      type: array
      items:
        $ref: '#/components/schemas/CfgFeature'
    CfgFeature:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
        title:
          $ref: '#/components/schemas/LanguageText'
        description:
          $ref: '#/components/schemas/LanguageText'
        help_url:
          type: string
          format: url
      required:
        - id
        - enabled
        - title
        - description
    CfgFeatureUpdate:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
      required:
        - id
        - enabled
    CfgHaptic:
      type: object
      properties:
        enabled:
          description: Haptic feedback enabled.
          type: boolean
      required:
        - enabled
    CfgLocalization:
      type: object
      properties:
        language_code:
          $ref: '#/components/schemas/LanguageCode'
        country_code:
          $ref: '#/components/schemas/CountryCode'
        time_zone:
          description: 'Time zone name according to IANA <https://www.iana.org/time-zones>, e.g. `Europe/Copenhagen`.'
          type: string
        time_format_24h:
          type: boolean
        measurement_unit:
          $ref: '#/components/schemas/MeasurementUnit'
      required:
        - language_code
        - country_code
        - time_zone
        - time_format_24h
        - measurement_unit
    CfgNetwork:
      type: object
      properties:
        bt_enabled:
          description: Enable Bluetooth.
          type: boolean
        wifi_enabled:
          description: Enable WiFi.
          type: boolean
        bt:
          description: Temporary read-only Bluetooth information until dedicated BT management endpoint is provided.
          type: object
          properties:
            address:
              description: Bluetooth MAC address
              type: string
        ws:
          description: |
            Optional expert settings for WebSocket (re-)connection handling.  
            These settings are only intended for support issues and might change any time. Changed values are not supported
            and might make the system unstable!
          type: object
          properties:
            dock:
              type: object
            integration:
              type: object
      required:
        - bt_enabled
        - wifi_enabled
    CfgPowerSaving:
      type: object
      properties:
        wakeup_sensitivity:
          description: 'Amount of movement needed to wake up the remote. 0 = disabled, 1 = min, 2 = medium, 3 = max.'
          type: integer
          minimum: 0
          maximum: 3
        display_off_sec:
          type: integer
          minimum: 0
          maximum: 60
          description: Turn off display after given seconds.
        standby_sec:
          type: integer
          minimum: 0
          maximum: 10800
          description: Activate standby after given seconds. 0 disables standby mode.
      required:
        - wakeup_sensitivity
        - display_off_sec
        - standby_sec
    CfgRemoteDevice:
      type: object
      properties:
        name:
          description: Custom name of the remote
          type: string
          minimum: 1
          maximum: 50
      required:
        - name
    CfgSoftwareUpdate:
      type: object
      properties:
        check_for_updates:
          description: |
            Automatically check for updates. If `auto_update` is enabled, the updates are automatically installed,
            otherwise the user is only notified about the updates.

            The time window when to check for new updates can be specified in `ota_window_start` and `ota_window_end`.
            Update checks are performed daily.
          type: boolean
        auto_update:
          description: |
            Automatically update the remote when new software is available. Requires `check_for_updates` to be enabled.

            Auto-installation of new firmwares will usually happen over 2 update checks: the first check finds a new
            update, downloads the metadata and schedules the firmware file to be downloaded. The next check will find the
            downloaded firmware file and installs it.
          type: boolean
        ota_window_start:
          description: |
            OTA update window start time: automatic update checks will only be performed during this time window.  
            Furthermore, the remote needs to be in the docking station and have enough battery charge.

            Format: time of day - as defined by `partial-time` in RFC3339
          type: string
          pattern: '^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$'
        ota_window_end:
          description: |
            OTA update window end time.

            - If the end time is before the start time, the window will spawn over midnight, e.g. `23:00:00` - `01:00:00`.
            - Both start and end times are required, otherwise a default will be used.
          type: string
          pattern: '^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$'
        channel:
          description: |
            Software update channels:
            - `DEFAULT`: release channel
            - `TESTING`: new test and beta versions which might become the next release if successfully tested.
            - `DEVELOPMENT`: untested alpha versions from the developers.  
               ⚠️ High chance of breaking changes, bugs and loosing data!

            Other channels than `DEFAULT` might require an access token in `channel_token`, since they are intended for
            a closed user group.
          type: string
          anyOf:
            - enum:
                - DEFAULT
                - TESTING
                - DEVELOPMENT
            - {}
        channel_token:
          description: |
            Optional access token which might be required for non-default software update channels.
            - This token is write only and cannot be retrieved anymore.
            - If omitted when updating settings: the stored token will be used.
            - If the `default` channel is selected when updating settings: the token will be ignored.
          type: string
          pattern: '^[-a-zA-Z0-9._~+/]{1,256}=?$'
        restart_required:
          description: 'Optional response field only: a configuration change requires a restart.'
          type: boolean
      required:
        - check_for_updates
        - auto_update
    CfgSound:
      type: object
      properties:
        enabled:
          description: Sound effects enabled.
          type: boolean
        volume:
          description: Sound effects volume.
          type: integer
          minimum: 0
          maximum: 100
      required:
        - enabled
        - volume
    CfgVoiceControl:
      type: object
      properties:
        microphone:
          description: |
            Enable microphone. Disabling the microphone will completely turn it off. Voice control and dictation won't work
            with the remote or integrations.
          type: boolean
        enabled:
          description: |
            Enable voice control. Disabling voice control will still let you use voice dictation with integrations. 
            Disable the microphone to completely switch off any microphone related functionality.
          type: boolean
        voice_assistant:
          description: |
            TODO
          type: string
          default: None
      required:
        - microphone
        - enabled
        - voice_assistant
    CommandSequence:
      description: Sequence of commands to execute.
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/CommandSequenceEntity'
          - $ref: '#/components/schemas/CommandSequenceDelay'
        discriminator:
          propertyName: type
          mapping:
            command: '#/components/schemas/CommandSequenceEntity'
            delay: '#/components/schemas/CommandSequenceDelay'
    CommandSequenceEntity:
      description: Entity command step in a command sequence.
      type: object
      properties:
        type:
          type: string
        command:
          $ref: '#/components/schemas/EntityCommand'
      required:
        - type
        - command
      example:
        type: command
        command:
          entity_id: hass.main.light.living-room
          cmd_id: 'on'
          params:
            brightness: 75
    CommandSequenceDelay:
      description: Delay step in a command sequence.
      type: object
      properties:
        type:
          type: string
        delay:
          description: Delay in milliseconds.
          type: integer
          minimum: 1
      required:
        - type
        - delay
      example:
        type: delay
        delay: 100
    CountryCode:
      description: 'Two letter country code according to [ISO-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).'
      type: string
      format: iso-3166
    CustomInstall:
      description: Information about an installed custom component. The `installed` flag reports if a custom installation
      type: object
      properties:
        component:
          $ref: '#/components/schemas/CustomComponent'
        installed:
          description: |
            Custom component has been installed. When `installed: true` is set, more information is returned in `release`.
          type: boolean
        active:
          description: Custom component is active and replacing the default component.
          type: boolean
        installation_date:
          description: 'Installation date of the component. Only provided when `installed: true` is set.'
          type: string
          format: date-time
        release:
          $ref: '#/components/schemas/CustomRelease'
      required:
        - component
        - installed
        - active
    CustomComponent:
      description: Type of custom component.
      type: string
      enum:
        - ui
        - web_configurator
    CustomRelease:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        version:
          type: string
          maxLength: 30
        description:
          $ref: '#/components/schemas/LanguageText'
        developer:
          $ref: '#/components/schemas/DriverDeveloper'
        home_page:
          description: Optional home page url for more information.
          type: string
          format: uri
          maxLength: 255
        release_date:
          description: Release date of the component.
          type: string
          format: date
        requirements:
          type: object
          properties:
            firmware_version:
              description: |
                [SemVer](https://semver.org/) version requirement, describing the intersection of some version comparators to
                match the installed Remote Two firmware.

                - `>=1.0`: requires at least version 1.0.0
                - `>=0.9.0, <0.10.0`: only works with minor version 0.9.*   

                Follows the Cargo's SemVer support documented in the [Specifying Dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html)
                chapter of the Cargo reference.
              type: string
    Description:
      type: string
      maxLength: 255
      description: Optional description
    DeviceButtonGroup:
      description: Button group type.
      type: string
      enum:
        - keypad
    DeviceButtonLayout:
      description: 'Button group definitions with layout placement, size, icon and language specific names.'
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DeviceButtonGroup'
        grid:
          description: Grid layout size.
          type: object
          properties:
            width:
              type: integer
              minimum: 1
            height:
              type: integer
              minimum: 1
          required:
            - width
            - height
        buttons:
          type: array
          items:
            type: object
            properties:
              button:
                description: Unique button identifier over all button groups.
                type: string
              icon:
                $ref: '#/components/schemas/IconIdentifier'
              name:
                $ref: '#/components/schemas/LanguageText'
              location:
                $ref: '#/components/schemas/GridLocation'
              size:
                $ref: '#/components/schemas/GridItemSize'
            required:
              - button
              - icon
              - name
              - location
      required:
        - type
        - grid
        - buttons
    DeviceScreenLayout:
      description: Screen layout definitions with usable grid sizes for custom UI pages.
      type: object
      properties:
        grid:
          type: object
          properties:
            default:
              $ref: '#/components/schemas/DeviceButtonLayout/properties/grid'
            min:
              $ref: '#/components/schemas/DeviceButtonLayout/properties/grid'
            max:
              $ref: '#/components/schemas/DeviceButtonLayout/properties/grid'
          required:
            - default
            - min
            - max
      required:
        - grid
    DeviceButtonMapping:
      type: object
      properties:
        button:
          $ref: '#/components/schemas/ButtonId'
        short_press:
          $ref: '#/components/schemas/EntityCommand'
        long_press:
          $ref: '#/components/schemas/EntityCommand'
      required:
        - button
    DeviceButtonMappings:
      description: |
        Physical button mapping to entity commands. The `entity_id` in the EntityCommand object is a required
        property for an activity and ignored for a remote-entity.
      type: array
      items:
        $ref: '#/components/schemas/DeviceButtonMapping'
    DeviceId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Device identifier for multi-device integrations only.
    DeviceState:
      type: string
      enum:
        - UNKNOWN
        - CONNECTING
        - CONNECTED
        - DISCONNECTED
        - ERROR
    DeviceType:
      type: string
      enum:
        - audio
        - radio
        - cd_player
        - receiver
        - soundbar
        - hdmi_switch
        - television
        - projector
        - set_top_box
        - media_player
        - dvd_player
        - bluray_player
        - climate
        - light
        - various
    DiscoveryType:
      type: string
      description: |
        Device discovery type:
        - `BT`: Bluetooth
        - `NET`: LAN or WAN network
      enum:
        - BT
        - NET
    DockConfiguration:
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/DockId'
        name:
          $ref: '#/components/schemas/DockName'
        custom_ws_url:
          $ref: '#/components/schemas/DockUrl'
        resolved_ws_url:
          type: string
          maxLength: 64
          description: Resolved WebSocket URL from the service name in `dock_id` if no `custom_ws_url` is used.
        active:
          type: boolean
          description: |
            Enable flag: active docks are automatically connected when network is available.
        model:
          type: string
          description: Dock model number.
        revision:
          type: string
          description: Dock revision.
        serial:
          type: string
          description: Dock serial number.
        led_brightness:
          type: integer
          minimum: 0
          maximum: 100
        eth_led_brightness:
          type: integer
          minimum: 0
          maximum: 100
        connection_type:
          type: string
          description: |
            Network connection of the dock: `Ethernet` or `WiFi`.
        version:
          type: string
          description: Firmware version
        state:
          $ref: '#/components/schemas/DockState'
        learning_active:
          type: boolean
          description: Dock is in IR learning mode.
        description:
          $ref: '#/components/schemas/Description'
      required:
        - dock_id
        - active
    DockConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/DockConfiguration'
    DockConfigurationRequest:
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/DockId'
        name:
          $ref: '#/components/schemas/DockName'
        custom_ws_url:
          $ref: '#/components/schemas/DockUrl'
        token:
          $ref: '#/components/schemas/DockToken'
        active:
          type: boolean
          description: |
            Enable flag: active docks are automatically connected when network is available.
        model:
          type: string
          description: Dock model number.
        description:
          $ref: '#/components/schemas/Description'
      required:
        - dock_id
        - active
    DockUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 40
          description: User assignable friendly name to use instead of dock_id (service name).
        custom_ws_url:
          $ref: '#/components/schemas/DockUrl'
        token:
          type: string
          maxLength: 40
          description: Access token to connect to the dock.
        active:
          type: boolean
          description: Auto connect to dock when network is available.
        description:
          type: string
          description: Optional description.
        wifi:
          type: object
          properties:
            ssid:
              description: Network name (Service Set IDentifier)
              type: string
              maxLength: 32
            password:
              type: string
              maxLength: 63
    DockDiscovery:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DockId'
        configured:
          description: |
            Dock configuration flag for this remote:
            - true: device has already been configured
            - false: device has not yet been configured
          type: boolean
        friendly_name:
          $ref: '#/components/schemas/DockName'
        address:
          description: Resolved device network address.
          type: string
        model:
          description: Detected dock model.
          type: string
        version:
          description: Detected firmware version.
          type: string
        discovery_type:
          $ref: '#/components/schemas/DiscoveryType'
        timestamp:
          description: Timestamp of dock discovery.
          type: string
          format: date-time
        bt:
          type: object
          description: Optional Bluetooth discovery information. Not present for network device.
          properties:
            signal:
              description: 'Bluetooth signal strength. 0 = min, 5 = max.'
              type: integer
              minimum: 0
              maximum: 5
            last_seen_sec:
              description: |
                Last time the device was seen on a Bluetooth scan. Values over 15 sec indicate that the device is no longer
                reachable.
              type: integer
              format: int32
      required:
        - id
        - configured
        - discovery_type
    DockDiscoveryStatus:
      type: object
      properties:
        active:
          description: |
            Dock discovery still active or not.
          type: boolean
        docks:
          type: array
          items:
            $ref: '#/components/schemas/DockDiscovery'
      required:
        - discovery_active
        - docks
    DockFirmwareUpdate:
      type: object
      description: Dock firmware information
      properties:
        model:
          description: Dock model
          type: string
        description:
          $ref: '#/components/schemas/LanguageText'
        version:
          type: string
        channel:
          $ref: '#/components/schemas/UpdateChannel'
        release_date:
          type: string
          format: date
        size:
          type: integer
          format: int64
        release_notes_url:
          type: string
          format: uri
        download:
          $ref: '#/components/schemas/UpdateDownloadState'
      required:
        - model
        - description
        - version
    DockId:
      type: string
      format: '^[a-zA-Z0-9\-\.]+$'
      minLength: 1
      maxLength: 64
      description: Dock identifier
    DockName:
      type: string
      minLength: 1
      maxLength: 40
      description: User assignable friendly name to use instead of dock_id (service name).
    DockSystemInfo:
      type: object
      properties:
        name:
          type: string
        hostname:
          type: string
        model:
          type: string
        revision:
          type: string
        version:
          type: string
        serial:
          type: string
        ir_learning:
          type: boolean
        ethernet:
          type: boolean
        wifi:
          type: boolean
        ssid:
          description: Network name (Service Set IDentifier)
          type: string
    CreateDockSetup:
      type: object
      oneOf:
        - type: object
          properties:
            discovery:
              $ref: '#/components/schemas/DockSetupFromDiscovery'
          required:
            - discovery
        - type: object
          properties:
            manually:
              $ref: '#/components/schemas/DockSetup'
          required:
            - manual
    DockSetup:
      type: object
      description: Dock setup data
      properties:
        name:
          $ref: '#/components/schemas/DockName'
        token:
          $ref: '#/components/schemas/DockToken'
        custom_ws_url:
          $ref: '#/components/schemas/DockUrl'
        description:
          $ref: '#/components/schemas/Description'
        wifi:
          description: |
            Optional WiFi information if the dock should connect to (or be prepared for) WiFi instead of Ethernet.
          type: object
          properties:
            ssid:
              description: Network name (Service Set IDentifier)
              type: string
            password:
              type: string
              format: password
          required:
            - ssid
            - password
      required:
        - name
    DockSetupFromDiscovery:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DockId'
        friendly_name:
          $ref: '#/components/schemas/DockName'
        address:
          description: Resolved device network address.
          type: string
        model:
          description: Detected dock model.
          type: string
        version:
          description: Detected firmware version.
          type: string
        discovery_type:
          $ref: '#/components/schemas/DiscoveryType'
      required:
        - id
        - discovery_type
    DockSetupError:
      type: string
      enum:
        - NONE
        - NOT_FOUND
        - CONNECTION_ERROR
        - CONNECTION_REFUSED
        - AUTHORIZATION_ERROR
        - TIMEOUT
        - ABORT
        - PERSISTENCE_ERROR
        - OTHER
    DockSetupInfo:
      type: object
      description: Dock setup state
      properties:
        id:
          type: string
        name:
          $ref: '#/components/schemas/DockName'
        discovery_type:
          $ref: '#/components/schemas/DiscoveryType'
        state:
          $ref: '#/components/schemas/DockSetupState'
        error:
          $ref: '#/components/schemas/DockSetupError'
      required:
        - id
        - state
    DockSetupState:
      type: string
      enum:
        - NEW
        - CONFIGURING
        - UPLOADING
        - RESTARTING
        - OK
        - ERROR
    DockState:
      type: string
      description: Dock connection state
      enum:
        - IDLE
        - CONNECTING
        - ACTIVE
        - RECONNECTING
        - ERROR
    DockToken:
      type: string
      format: password
      minLength: 1
      maxLength: 40
      description: Access token
    DockUpdateCheck:
      type: object
      description: Dock firmware update check information.
      properties:
        dock_id:
          type: string
        version:
          description: Installed firmware version.
          type: string
        update_available:
          description: Whether or not an update is available. An available update is set in the `firmware_update` object.
          type: boolean
        update_check_enabled:
          description: |
            Whether or not the online update check is enabled or not. If disabled, `update_available` will always be false.
          type: boolean
        firmware_update:
          $ref: '#/components/schemas/DockFirmwareUpdate'
        update_id:
          description: Update identifier if an update is currently in progress.
          type: string
      required:
        - dock_id
        - version
        - update_available
        - update_check_enabled
    DockUpdateProgress:
      type: object
      description: Dock firmware update progress
      properties:
        dock_id:
          type: string
        update_id:
          description: Update identifier
          type: string
        version:
          description: Firmware version being installed
          type: string
        progress:
          description: Update progress in percent
          type: integer
          format: int32
          minimum: 0
          maximum: 100
        state:
          $ref: '#/components/schemas/DockSetupState'
        error:
          $ref: '#/components/schemas/DockSetupError'
      required:
        - dock_id
        - update_id
        - version
        - state
    DockUrl:
      type: string
      maxLength: 64
      description: Dock WebSocket URL to override auto-discovery from the service name in `dock_id`.
    DriverDeveloper:
      type: object
      description: Optional information about the integration developer.
      properties:
        name:
          description: Optional developer information to display in UI / web-configurator.
          type: string
          maxLength: 100
        url:
          description: Optional developer home page.
          type: string
          format: uri
          maxLength: 255
        email:
          description: Optional developer contact email.
          type: string
          format: email
          maxLength: 100
    DriverId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: 'Unique integration driver identifier, e.g. `homeassistant`, `homey`, etc.'
    DriverState:
      type: string
      enum:
        - NOT_CONFIGURED
        - IDLE
        - CONNECTING
        - ACTIVE
        - RECONNECTING
        - ERROR
    Entities:
      type: array
      items:
        $ref: '#/components/schemas/Entity'
    Entity:
      description: |
        Configured entity in the remote to be used in one or more profiles.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        device_class:
          description: |
            Optional device type. This can be used by the UI to represent the entity with a different
            icon, behaviour etc. See entity documentation for available device classes.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        features:
          description: |
            Supported features of the entity. See entity documentation for available features.
          type: array
          items:
            type: string
        options:
          description: |
            Feature options. See entity documentation for available options.
          type: object
        description:
          $ref: '#/components/schemas/LanguageText'
        attributes:
          description: |
            Dynamic entity attributes set by the integration driver. These are key/value pairs, see [integration entity
            documentation](https://github.com/unfoldedcircle/core-api/tree/main/doc/entities) for detailed information.
          type: object
      required:
        - entity_id
        - entity_type
        - integration_id
        - name
    EntityId:
      type: string
      format: '^[a-zA-Z0-9\-_\.]+$'
      minLength: 5
      maxLength: 110
      description: Unique UC Remote Two identifier over all entities and integrations.
    EntityCommand:
      description: |
        Entity command object. The `entity_id` only has to be specified if it's not already included as a parameter in the URL.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        cmd_id:
          description: |
            Entity command identifier, as returned in the entity command metadata.

            This identifier may change at any time and may not be used for logic decisions in a client!
            If entity specific information is required, the entity object must be loaded from the `entity_id`.
          type: string
        params:
          description: |
            Optional command parameters as key / value pairs. See entity documentation for available parameters.
          type: object
      required:
        - cmd_id
      example:
        entity_id: hass.main.light.living-room
        cmd_id: light.on
        params:
          hue: 180
          saturation: 90
    EntityCmdParamBool:
      type: object
      description: Boolean value parameter.
    EntityCmdParamNumber:
      type: object
      description: |
        Number value parameter with optional limits.   
      properties:
        default:
          description: 'Default value to use, e.g. in a UI editor.'
        min:
          description: Minimal allowed value (inclusive).
          type: number
          default: 0
        max:
          description: Maximal allowed value (inclusive).
          type: number
        step:
          description: Step size between values.
          type: number
          default: 1
        unit:
          description: Optional unit label of the value.
          type: string
      example:
        default: 22
        min: 0
        max: 100
        step: 1
        unit: '%'
    EntityCmdParamRegex:
      type: object
      description: Text value parameter with optional regex validation.
      properties:
        regex:
          description: Validation regex.
          type: string
    EntityCmdParamEnum:
      type: object
      description: Enumeration parameter. Only the defined values are allowed as parameter value.
      properties:
        values:
          type: array
          items:
            type: string
        default:
          description: Default value for a new command. Must be a value defined in `values`
          type: string
      required:
        - values
      example:
        values:
          - Option 1
          - Option 2
          - Option 3
        default: Option 1
    EntityCmdParamSelection:
      type: object
      description: Text value parameter with a selection list from another entity field.
      properties:
        items:
          description: Validation regex.
          type: object
          properties:
            source:
              description: Where to load the selection list from.
              type: string
              enum:
                - attributes
                - options
            field:
              description: |
                Field name in the source object containing an array of strings for the parameter selection
              type: string
          required:
            - source
            - field
      required:
        - items
      example:
        items:
          source: attributes
          field: source_list
    EntityCommandMetadata:
      type: object
      properties:
        id:
          description: |
            Entity command identifier to be used in activity and macro commands (button mappings, UI elements and sequences).

            This identifier may change at any time and may not be used for logic decisions in a client!
            If entity specific information is required, the entity object must be used.
          type: string
        cmd_id:
          description: |
            Entity command as specified in the [entity documentation](https://github.com/unfoldedcircle/core-api/tree/main/doc/entities).
            This is the command identifier being sent to integration drivers.
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        params:
          description: |
            Metadata describing the optional parameters of the command. Simple "button like" commands
            don't have any parameters, whereas e.g. a light entity can also dim the light, change color or color
            temperature.
          type: array
          items:
            type: object
            allOf:
              - properties:
                  name:
                    $ref: '#/components/schemas/LanguageText'
                  param:
                    description: Parameter name.
                    type: string
                  type:
                    description: Parameter type.
                    type: string
                    enum:
                      - number
                      - bool
                      - regex
                      - enum
                required:
                  - name
                  - param
                  - type
              - oneOf:
                  - $ref: '#/components/schemas/EntityCmdParamNumber'
                  - $ref: '#/components/schemas/EntityCmdParamBool'
                  - $ref: '#/components/schemas/EntityCmdParamRegex'
                  - $ref: '#/components/schemas/EntityCmdParamEnum'
                  - $ref: '#/components/schemas/EntityCmdParamSelection'
                discriminator:
                  propertyName: type
                  mapping:
                    number: '#/components/schemas/EntityCmdParamNumber'
                    bool: '#/components/schemas/EntityCmdParamBool'
                    regex: '#/components/schemas/EntityCmdParamRegex'
                    enum: '#/components/schemas/EntityCmdParamEnum'
                    selection: '#/components/schemas/EntityCmdParamSelection'
      required:
        - id
        - cmd_id
        - name
    EntityUpdateRequest:
      type: object
      description: |
        Update model for an entity.

        - Specified properties will update the current values.
        - An empty value will delete the currently set property.
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
    EntityDeleteRequest:
      type: object
      description: |
        Delete request model for multiple entities. Either specify `integration_id` or `entity_ids`.
      properties:
        integration_id:
          type: string
        entity_ids:
          type: array
          items:
            type: string
    EntityType:
      type: string
      description: Entity type
      enum:
        - button
        - climate
        - cover
        - light
        - media_player
        - sensor
        - switch
        - activity
        - macro
        - remote
    ExternalSystems:
      type: array
      items:
        $ref: '#/components/schemas/ExternalSystem'
    ExternalSystem:
      type: object
      properties:
        system:
          $ref: '#/components/schemas/ExternalSystemId'
        name:
          $ref: '#/components/schemas/ExtSystemName'
      required:
        - system
        - name
    ExternalSystemId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 50
      description: Unique external system identifier registered by an R2 integration to interact with the API.
    TokenId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: |
        Unique token identifier, used for later token management through the external system or management ui.
    ExtSystemName:
      type: string
      minLength: 1
      maxLength: 50
      description: |
        Friendly name of the external system to display to the user within the app. This name must be unique for an external
        system and should be as short and concise as possible.
    ExtAccessToken:
      type: string
      minLength: 1
      maxLength: 32768
      description: |
        The token to access the external system with the corresponding Remote integration.
        This could be a UUID, a JWT, a PEM certificate or any other representation required for the integration to
        authenticate on the system.
    ExtAccessTokenDescription:
      type: string
      maxLength: 2048
      description: Optional description of the external access token.
    ExtAccessTokenUrl:
      type: string
      maxLength: 2048
      description: Optional URL of the external system.
    ExtAccessTokenData:
      type: string
      maxLength: 32768
      description: |
        Optional data from the external system for the Remote integration.  
        ⚠️ Attention: this data is not protected and retrievable by API clients!
    ExternalAccessTokens:
      type: array
      items:
        $ref: '#/components/schemas/ExternalAccessToken'
    ExternalAccessToken:
      type: object
      properties:
        system:
          $ref: '#/components/schemas/ExternalSystemId'
        token_id:
          $ref: '#/components/schemas/TokenId'
        name:
          $ref: '#/components/schemas/ExtSystemName'
        description:
          $ref: '#/components/schemas/ExtAccessTokenDescription'
        url:
          $ref: '#/components/schemas/ExtAccessTokenUrl'
        data:
          $ref: '#/components/schemas/ExtAccessTokenData'
        creation_date:
          type: string
          format: date-time
      required:
        - system
        - token_id
        - name
        - creation_date
    ExternalAccessTokenRequest:
      type: object
      description: |
        The token_id can be provided by the external system. If omitted, an UUID is generated and returned in the
        ExternalAccessToken response. It may not end in `-DATA` or `-URL`.
      properties:
        token_id:
          $ref: '#/components/schemas/TokenId'
        name:
          $ref: '#/components/schemas/ExtSystemName'
        token:
          $ref: '#/components/schemas/ExtAccessToken'
        description:
          $ref: '#/components/schemas/ExtAccessTokenDescription'
        url:
          $ref: '#/components/schemas/ExtAccessTokenUrl'
        data:
          $ref: '#/components/schemas/ExtAccessTokenData'
      required:
        - name
        - token
      example:
        token_id: 1-2-3
        name: My smart home
        token: secret-sauce-42!
        description: Any other informative message about the external system
        url: 'ws://smart.home'
        data: 'optional: true, foo: bar, free: text'
    ExternalAccessTokenResponse:
      type: object
      description: |
        If the token identifier has been provided in the request, then then same identifier is returned, otherwise a
        UUID is generated.
      properties:
        token_id:
          $ref: '#/components/schemas/TokenId'
      required:
        - token_id
    FriendlyName:
      type: string
      maxLength: 64
    GridItemSize:
      description: 'Item size in the button grid. Default size if not specified: 1 x 1'
      type: object
      properties:
        width:
          type: integer
          minimum: 1
          default: 1
        height:
          type: integer
          minimum: 1
          default: 1
    GridLocation:
      description: Button placement in the grid with 0-based coordinates.
      type: object
      properties:
        x:
          type: integer
          minimum: 0
        'y':
          type: integer
          minimum: 0
      required:
        - x
        - 'y'
    Group:
      type: object
      description: |
        The shown group switch in the UI is automatically determined by the capabilities of the group's entities.
      properties:
        group_id:
          $ref: '#/components/schemas/SimpleId'
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        entities:
          type: array
          description: Entity identifiers belonging to the group
          items:
            $ref: '#/components/schemas/EntityId'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - group_id
        - profile_id
        - name
        - entities
    GroupUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        entities:
          type: array
          description: |
            Changed or re-ordered group entities.
            An empty array remove all entities.
            If the property is not specified the defined entities will not be changed.
          items:
            $ref: '#/components/schemas/EntityId'
        description:
          $ref: '#/components/schemas/Description'
    Groups:
      type: array
      items:
        $ref: '#/components/schemas/Group'
    HealthStatus:
      type: string
      enum:
        - Healthy
        - Degraded
        - Unhealthy
    IconIdentifier:
      type: string
      format: '^[a-z0-9]+:[a-zA-Z0-9\-_\.]+$'
      maxLength: 255
      description: |
        Optional icon identifier. The identifier consists of a prefix and a resource identifier, separated by `:`.  
        Available prefixes:
        - `uc:` - integrated icon font 
        - `custom:` - custom resource

        An empty identifier, while updating the object, removes the existing icon.
    ImageIdentifier:
      type: string
      format: '^[a-z0-9]+:[a-zA-Z0-9\-_\.]+$'
      maxLength: 255
      description: |
        Optional image identifier. The identifier consists of a prefix and a resource identifier, separated by `:`.  
        Available prefixes:
        - `custom:` - custom resource

        An empty identifier, while updating the object, removes the existing image.
    IncludedEntities:
      description: |
        Included entities in an activity or macro. This object is writable from the client and persisted when saving.

        Notes:
        - Entities can be included without being used in a sequence.  
          This allows to edit the activity or macro in multiple sessions without having to reselect the desired entities.
        - Every used entity in a sequence must be included, otherwise the activity or macro  cannot be saved.
        - If the client removes an entity which is included in an activity or macro, it must make sure to also remove all
          entity references the sequence(s), button mapping and user interface.
      type: array
      items:
        $ref: '#/components/schemas/IncludedEntity'
    IncludedEntity:
      description: |
        When saving an activity only the `entity_id` is persisted. When retrieving an activity all other fields
        will be retrieved from the real entities to make sure they are up to date. I.e. the entity name or icon
        might change between saving an activity and retrieving it again!
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        entity_type:
          $ref: '#/components/schemas/EntityType'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        integration:
          description: |
            Optional integration information. Regular entities will have at least the integration name. Special
            entities like activities and macros might omit the integration object.
          type: object
          properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
        entity_commands:
          description: |
            Supported entity command identifiers. A command identifier refers to the common entity command
            definitions, which describe all required parameters to set for calling the entity command. This
            includes the mandatory `cmd_id` attribute and optional parameters.
          type: array
          items:
            type: string
        simple_commands:
          description: |
            Simple commands are additional commands supported by the entity, which are not included in the
            common entity command definitions. A typical example are remote-entity commands like `VOLUME_UP` etc
            which don't have additional parameters. A simple command relates directly to the `cmd_id` attribute
            when calling a command.
          type: array
          items:
            type: string
        available:
          description: |
            State of the entity: True / missing = entity is available as configured entity and can be used.  
            False = entity has been removed and must be corrected by the user.

            If an entity is no longer available then all usages in the sequences are still present in case the
            entity is re-configured. The execution of the on- or off-sequence will then simply skip the actions
            of the no longer available entity.
          type: boolean
      required:
        - entity_id
    IntgAuthMethod:
      type: string
      description: |
        Integration driver authentication method if a token is required.

        The JSON `auth` message is used if a token is configured but no authentication method is set.
      enum:
        - HEADER
        - MESSAGE
    InhibitMode:
      type: string
      enum:
        - BLOCK
        - DELAY
    Inhibitor:
      type: object
      properties:
        id:
          description: Unique identifier
          type: string
        who:
          description: A descriptive string who is inhibiting
          type: string
        why:
          description: A descriptive string why is being inhibited
          type: string
        mode:
          $ref: '#/components/schemas/InhibitMode'
        delay:
          description: 'Delay value in seconds for mode: DELAY'
          type: integer
          minimum: 0
        created:
          description: Duration in seconds when this inhibitor was created
          type: integer
          minimum: 0
      required:
        - id
        - who
        - mode
    Inhibitors:
      type: array
      items:
        $ref: '#/components/schemas/Inhibitor'
    CreateStandbyInhibitor:
      type: object
      properties:
        id:
          description: 'Unique identifier, automatically crated if not specified.'
          type: string
          minLength: 1
          maxLength: 64
        who:
          description: A descriptive string who is inhibiting
          type: string
          minLength: 1
          maxLength: 64
        why:
          description: A descriptive string why is being inhibited
          type: string
          maxLength: 64
        delay:
          description: 'Delay standby for given seconds, otherwise block indefinitely until inhibitor is removed.'
          type: integer
          minimum: 1
      required:
        - who
    CreateIntegrationSetup:
      type: object
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        setup_data:
          $ref: '#/components/schemas/SettingsValues'
        reconfigure:
          description: Reconfigure an already configured integration.
          type: boolean
      required:
        - driver_id
    IntegrationSetupError:
      type: string
      enum:
        - NONE
        - NOT_FOUND
        - CONNECTION_REFUSED
        - AUTHORIZATION_ERROR
        - TIMEOUT
        - OTHER
    IntegrationSetupInfo:
      type: object
      description: Integration setup state
      properties:
        id:
          type: string
        state:
          $ref: '#/components/schemas/IntegrationSetupState'
        error:
          $ref: '#/components/schemas/IntegrationSetupError'
        require_user_action:
          description: 'If set, the setup process waits for the specified user action.'
          oneOf:
            - type: object
              properties:
                input:
                  $ref: '#/components/schemas/SettingsPage'
              required:
                - input
            - type: object
              properties:
                confirmation:
                  $ref: '#/components/schemas/ConfirmationPage'
              required:
                - confirmation
      required:
        - id
        - state
    IntegrationSetupState:
      type: string
      enum:
        - SETUP
        - WAIT_USER_ACTION
        - OK
        - ERROR
    IntegrationDiscovery:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DriverId'
        configured:
          description: |
            Integration configuration flag:
            - true: driver has already been configured
            - false: driver has not yet been configured
          type: boolean
        name:
          type: string
        developer_name:
          type: string
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        driver_url:
          description: Resolved driver url.
          type: string
        pwd_protected:
          description: Driver requires a connection password.
          type: boolean
        version:
          description: Detected driver version.
          type: string
        timestamp:
          description: Timestamp of integration discovery.
          type: string
          format: date-time
      required:
        - id
        - configured
        - name
        - driver_url
    IntegrationDiscoveryStatus:
      type: object
      properties:
        active:
          description: |
            Integration discovery still active or not.
          type: boolean
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationDiscovery'
      required:
        - discovery_active
        - integrations
    IntegrationDriver:
      type: object
      description: |
        Integration driver model.

        A driver represents the communication aspect of an integration. E.g. how one can connect to it
        and which API version it supports.

        One driver can provide multiple `Integration` instances. In the integration API they are
        referred to as `multi-device integrations` and use the optional `device_id` property where
        required. If a driver only provides a single instance, which is usually the default use case,
        then the `device_id` is not used (or set to the default value `main`).
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_type:
          $ref: '#/components/schemas/IntegrationDriverType'
        driver_url:
          description: WebSocket URL of the driver. Only optional for integration driver metadata.
          type: string
          format: uri
          maxLength: 2048
        token:
          description: |
            Optional driver authentication token.

            Note: the token will not be returned to external clients!
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/IntgAuthMethod'
        pwd_protected:
          description: Driver requires a connection password.
          type: boolean
        version:
          description: 'Driver version, [SemVer](https://semver.org/) preferred.'
          type: string
          maxLength: 20
        min_core_api:
          description: |
            Optional version check: minimum required core API version in the remote.
          type: string
          maxLength: 20
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication. For development use only!  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
        description:
          $ref: '#/components/schemas/LanguageText'
        developer:
          $ref: '#/components/schemas/DriverDeveloper'
        home_page:
          description: Optional home page url for more information.
          type: string
          format: uri
          maxLength: 255
        device_discovery:
          description: Driver supports multi-device discovery. **Not yet supported**.
          type: boolean
        setup_data_schema:
          $ref: '#/components/schemas/SettingsPage'
        release_date:
          description: Release date of the driver.
          type: string
          format: date
        driver_state:
          $ref: '#/components/schemas/DriverState'
      required:
        - driver_id
        - name
        - version
    IntegrationDriverInfo:
      type: object
      description: |
        Summary data of an integration driver intended for overview screens.
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        developer_name:
          type: string
        driver_type:
          $ref: '#/components/schemas/IntegrationDriverType'
        driver_url:
          description: WebSocket URL of external driver
          type: string
          format: uri
          maxLength: 255
        version:
          type: string
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          type: boolean
        driver_state:
          $ref: '#/components/schemas/DriverState'
      required:
        - driver_id
        - name
        - driver_type
        - version
        - enabled
    IntegrationDrivers:
      type: array
      items:
        $ref: '#/components/schemas/IntegrationDriverInfo'
    IntegrationDriverRequest:
      type: object
      description: |
        Integration driver creation model. 

        - The only required property is `driver_url` to contact the driver and fetch all driver data.
        - If the driver requires an access token, the `token` needs to be specified and optionally the authentication method
          in `auth_method`.
        - The `driver_id` identifier can be specified by the client, but it needs to be unique among
          all drivers. If omitted, the driver identifier returned by the driver will be used.  
          A manually assigned, short, human-readable identifier is recommended for better recognizability.
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_url:
          description: WebSocket URL of the driver
          type: string
          format: uri
          maxLength: 2048
        token:
          description: Optional driver authentication token.
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/IntgAuthMethod'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication. For development use only!  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
      required:
        - driver_url
    IntegrationDriverType:
      type: string
      description: |
        - `LOCAL`: pre-installed integration driver in the firmware.
        - `CUSTOM`: user-installed custom integration driver on the remote.
        - `EXTERNAL`: external integration driver on the network.
      enum:
        - LOCAL
        - CUSTOM
        - EXTERNAL
    IntegrationDriverUpdate:
      type: object
      description: |
        Integration driver update model. This model corresponds to the `IntegrationDriverRequest` model except there are
        no required properties to allow patch updates. 

        - Specified properties will update the current values.
        - An empty value will delete the currently set property.
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        driver_url:
          description: WebSocket URL of the driver
          type: string
          format: uri
          maxLength: 2048
        token:
          description: Optional driver authentication token.
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/IntgAuthMethod'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication.  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
    Integration:
      type: object
      description: |
        Integration instance model.
      properties:
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        driver_id:
          $ref: '#/components/schemas/DriverId'
        device_id:
          $ref: '#/components/schemas/DeviceId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: Enable / disable flag. For development use only!
          type: boolean
        setup_data:
          description: Instance configuration object
          type: object
        device_state:
          $ref: '#/components/schemas/DeviceState'
      required:
        - integration_id
        - driver_id
        - name
        - enabled
    IntegrationId:
      type: string
      format: '^[a-zA-Z0-9\-_\.]+$'
      minLength: 1
      maxLength: 73
      description: |
        Unique integration instance identifier. Automatically created by the system when creating a new instance from a driver.
    Integrations:
      type: array
      items:
        $ref: '#/components/schemas/Integration'
    IntegrationUpdate:
      type: object
      description: |
        Integration instance update model. This model corresponds to the `Integration` model except there are no required
        properties to allow patch updates. 

        - Specified properties will update the current values.
        - An empty value will delete a set property.
        - `device_id` is only required for multi-device integrations.
      properties:
        device_id:
          $ref: '#/components/schemas/DeviceId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        enabled:
          description: Enable / disable flag. For development use only!
          type: boolean
        setup_data:
          description: Instance configuration object.
          type: object
    IntegrationState:
      type: string
      enum:
        - NOT_CONFIGURED
        - UNKNOWN
        - IDLE
        - CONNECTING
        - CONNECTED
        - DISCONNECTED
        - RECONNECTING
        - ACTIVE
        - ERROR
    IntegrationStatus:
      type: object
      description: |
        Integration status information. Intended to be used in a general overview of the integration drivers and instances.
      properties:
        driver_id:
          $ref: '#/components/schemas/DriverId'
        integration_id:
          $ref: '#/components/schemas/IntegrationId'
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        driver_type:
          $ref: '#/components/schemas/IntegrationDriverType'
        state:
          $ref: '#/components/schemas/IntegrationState'
      required:
        - name
        - driver_type
    CodeSet:
      type: object
      properties:
        manufacturer_id:
          type: string
        manufacturer:
          type: string
        device_id:
          type: string
        device:
          type: string
        device_type:
          type: string
        codes:
          type: array
          items:
            $ref: '#/components/schemas/IrCode'
      required:
        - manufacturer
        - manufacturer_id
        - device_id
        - device
        - device_type
        - codes
    CodeSetCreate:
      type: object
      properties:
        manufacturer:
          description: |
            Optional manufacturer name. If not specified: the codeset will be linked to the custom manufacturer entry
            for self learned codes.
          type: string
          minLength: 1
          maxLength: 100
        device:
          type: string
          minLength: 1
          maxLength: 100
        device_type:
          $ref: '#/components/schemas/DeviceType'
        code_format:
          $ref: '#/components/schemas/IrCodeFormat'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/IrCodeCreate'
      required:
        - device
        - device_type
    CodeSetInfo:
      type: object
      properties:
        manufacturer_id:
          type: string
        manufacturer:
          type: string
        device_id:
          type: string
        device:
          type: string
        device_type:
          type: string
      required:
        - manufacturer_id
        - manufacturer
        - device_id
        - device
        - device_type
    CodeSetUpdate:
      type: object
      properties:
        device:
          type: string
          minLength: 1
          maxLength: 100
        device_type:
          $ref: '#/components/schemas/DeviceType'
    CodeSetUploadResult:
      type: object
      properties:
        processed:
          type: integer
        added:
          type: integer
        updated:
          type: integer
    IrCode:
      type: object
      properties:
        key:
          type: string
        format:
          $ref: '#/components/schemas/IrCodeFormat'
        value:
          type: string
      required:
        - key
        - format
        - value
    IrCodeCreate:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/IrCodeKey'
        value:
          $ref: '#/components/schemas/IrCodeValue'
      required:
        - key
        - value
    IrCodeFormat:
      description: |
        Supported IR code formats:
        - `HEX`: Unfolded Circle HEX codes, `<protocol>;<hex-ir-code>;<bits>;<repeat-count>` (based on
          [IRremoteESP8266 Hex](https://github.com/unfoldedcircle/IRremoteESP8266) format).
          - protocol: numeric value from supported and enabled protocols. See: [decode_type_t](https://github.com/unfoldedcircle/IRremoteESP8266/blob/v2.8.5-ucd2.2/src/IRremoteESP8266.h#L1011)
          - hex-ir-code: HEX value prefixed with `0x`
          - bits: number of bits in hex value
          - repeat-count: number of repeats
        - `PRONTO`: PRONTO hex codes
          - Only raw codes are supported. First number must be `0000`.
      type: string
      enum:
        - HEX
        - PRONTO
    IrCodeKey:
      description: IR command key identifier
      type: string
      format: '^[a-zA-Z0-9\-_\.:+#*°@%/()?]{1,50}$'
    IrCodeSetType:
      description: 'Type of codeset, either a manufacturer codeset or a custom codeset.'
      type: string
      enum:
        - manufacturer
        - custom
    IrCodeUpdate:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/IrCodeFormat'
        value:
          $ref: '#/components/schemas/IrCodeValue'
      required:
        - format
        - value
    IrCodeValue:
      description: |
        IR code value, either in HEX or PRONTO format as defined in the format field.

        - Multiple IR codes in a sequence can be specified with a plus character `+` as divider.
          - For example: `3;0x20F0A956;32;0 + 3;0x20F02956;32;0`
          - This works for HEX and PRONTO
        - PRONTO only: 2 toggling codes can be specified with a pipe character `|` as divider.
          - Only two codes toggling codes are valid. 
          - For example: `0000 0068 0001 0000 0002 0800 | 0000 0068 0001 0000 8002 0800`
        - ⚠️ Sequence and toggle divider cannot be mixed.
      type: string
      format: '^(?:(?:\d{1,3};0x[a-fA-F0-9]{1,16};\d{1,2};\d{1,2}(?:\s*\+\s*\d{1,3};0x[a-fA-F0-9]{1,16};\d{1,2};\d{1,2})*)|(?:0000(?:[, ][a-fA-F0-9]{4}){5,}(?:(?:\s*\+\s*0000(?:[, ][a-fA-F0-9]{4}){5,})*|\s*\|\s*0000(?:[, ][a-fA-F0-9]{4}){5,})))$'
    IrRawCode:
      type: object
      properties:
        raw:
          type: array
          items:
            type: integer
            minimum: 0
        frequency:
          type: integer
          minimum: 0
        duty_cycle:
          type: integer
          minimum: 0
          maximum: 100
      required:
        - raw
        - frequency
    IrEmitter:
      type: object
      properties:
        device_id:
          description: IR emitter device identifier.
          type: string
        type:
          $ref: '#/components/schemas/IrEmitterType'
        name:
          description: Friendly name of the IR emitter device.
          type: string
        active:
          description: Emitter device is active or currently not available.
          type: boolean
        capabilities:
          description: Optional capabilities of the emitter.
          type: object
          properties:
            learning:
              $ref: '#/components/schemas/IrEmitterLearningCapability'
        ports:
          description: |
            Available output ports of the emitter. A simple emitter might only have one IR output, whereas the Remote Two dock
            has 4 individual outputs.
          type: array
          items:
            type: object
            properties:
              port_id:
                description: IR emitter output port identifier.
                type: string
              name:
                description: Friendly name of the output port.
                type: string
            required:
              - port_id
              - name
      required:
        - device_id
        - type
        - name
        - active
        - ports
    IrEmitterLearnStatus:
      type: object
      properties:
        device_id:
          description: IR emitter device identifier.
          type: string
        learning_active:
          description: |
            Device is in IR learning mode. Usually an emitter can't send IR commands while it is in learning mode.
          type: boolean
        codes:
          type: array
          items:
            $ref: '#/components/schemas/LearnedIrCode'
      required:
        - device_id
        - learning_active
        - codes
    IrEmitterLearningCapability:
      type: object
      description: Emitter can also be used for learning IR codes.
      properties:
        description:
          type: string
        instruction:
          type: string
        formats:
          type: array
          items:
            type: string
        send_while_learn:
          description: Emitter is able to send IR codes while in learn mode.
          type: boolean
          default: false
      required:
        - formats
    IrEmitters:
      type: array
      items:
        $ref: '#/components/schemas/IrEmitter'
    IrEmitterType:
      type: string
      description: |
        The type of the IR emitter device:
        - `DOCK`: a Remote Two docking station
        - `INTERNAL`: internal IR
        - `IR_BLASTER`: a network based IR blaster
        - `OTHER`: something else
      enum:
        - DOCK
        - INTERNAL
        - IR_BLASTER
        - OTHER
    IrStatus:
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/DockId'
        learning_active:
          description: Dock is in IR learning mode
          type: boolean
        state:
          $ref: '#/components/schemas/DockState'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/LearnedIrCode'
    LanguageCode:
      description: |
        Language culture code: starting with the two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
        code, followed by an optional [ISO-3166 country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes),
        separated by an underscore.
        Examples: `en`, `en_UK`, `en_US`, `de`, `de_DE`, `de_CH` etc.
      type: string
      pattern: '^[a-z]{2}(_\w+)?$'
    LanguageText:
      type: object
      description: |
        Key value pairs of language texts. Key: ISO 639-1 code with optional country suffix to represent a `culture code`.
        Examples: `en`, `en_UK`, `en_US`, `de`, `de_CH`.

        If we need to support more regional differences within a country, then the
        [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) might be a solution. This would even
        support the various Swiss German dialects!
      additionalProperties:
        type: string
    LearnedIrCode:
      type: object
      properties:
        code:
          type: string
        format:
          $ref: '#/components/schemas/IrCodeFormat'
        timestamp:
          type: string
          format: date-time
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      example:
        username: admin
        password: '1234'
    Macro:
      description: |
        The macro entity executes a sequence of commands.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - macro
            features:
              description: |
                Supported features of the macro.
              type: array
              items:
                type: string
                enum:
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: macro was created by Remote Two and can be edited.
                    - `false`: macro was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                included_entities:
                  $ref: '#/components/schemas/IncludedEntities'
                sequence:
                  $ref: '#/components/schemas/CommandSequence'
          required:
            - options
    Macros:
      type: array
      items:
        $ref: '#/components/schemas/MacroOverview'
    MacroCreate:
      description: |
        Dedicated request object to create a new macro.  
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                options:
                  type: object
                  properties:
                    entity_ids:
                      type: array
                      items:
                        $ref: '#/components/schemas/EntityId'
                  required:
                    - entity_ids
      required:
        - name
    MacroOverview:
      description: |
        The macro entity executes a sequence of commands.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - macro
            features:
              description: |
                Supported features of the macro.
              type: array
              items:
                type: string
                enum:
                  - start
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: macro was created by Remote Two and can be edited.
                    - `false`: macro was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
    MacroUpdate:
      description: |
        Dedicated request object to update an existing macro.  
        All root properties are optional and only the provided objects are updated in the macro. Omitted objects are
        ignored and not deleted from the macro.

        The `entity_ids` object must be managed by the client and is persisted when updating a macro.

        Notes:
        - Entities can be included in `entity_ids` without being used in `sequence`.  
          This allows to edit the macro in multiple sessions without having to reselect the desired entities.
        - Every referenced entity in `sequence` must be included in `entity_ids`, otherwise the macro cannot be saved.
        - If the client removes a configured entity from the system which is included in a macro, it must make sure to also
          remove all references in the macro. See `available` property in the included entities object when retrieving a macro.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            entity_ids:
              type: array
              items:
                $ref: '#/components/schemas/EntityId'
            sequence:
              $ref: '#/components/schemas/CommandSequence'
    MeasurementUnit:
      type: string
      enum:
        - METRIC
        - US
        - UK
    Name:
      type: string
      minLength: 1
      maxLength: 50
    Page:
      type: object
      properties:
        page_id:
          $ref: '#/components/schemas/SimpleId'
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
        image:
          type: string
          description: Optional image identifier
        items:
          type: array
          description: Page items
          items:
            $ref: '#/components/schemas/PageItem'
        pos:
          type: integer
          format: int32
          minimum: 0
          description: Position of the page within the profile
      required:
        - page_id
        - profile_id
        - name
        - items
        - pos
    PageCreate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        image:
          $ref: '#/components/schemas/ImageIdentifier'
        items:
          type: array
          description: |
            Optional page items.
          items:
            $ref: '#/components/schemas/PageItem'
        pos:
          type: integer
          format: int32
          minimum: 1
          description: |
            Optional 1-based position of the page within the profile. Default: last position
      required:
        - name
    PageItem:
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/EntityId'
        group_id:
          $ref: '#/components/schemas/SimpleId'
        pos:
          type: integer
          format: int32
          minimum: 0
          description: |
            Position of the item within the page. Returned on retrieval, ignored for page updates where the position is taken
            from the page array position.
      oneOf:
        - required:
            - entity_id
        - required:
            - group_id
    PageUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        image:
          $ref: '#/components/schemas/ImageIdentifier'
        items:
          type: array
          description: |
            Changed or re-ordered page items.
            An empty array removes all items.
            If the property is not specified the defined items will not be changed.
          items:
            $ref: '#/components/schemas/PageItem'
    Pages:
      type: array
      items:
        $ref: '#/components/schemas/Page'
    PowerMode:
      type: string
      enum:
        - NORMAL
        - IDLE
        - LOW_POWER
        - SUSPEND
    PowerModeResponse:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/PowerMode'
      required:
        - mode
    Profile:
      type: object
      properties:
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        restricted:
          description: A restricted profile cannot change settings and switching profiles requires the admin PIN.
          type: boolean
        description:
          $ref: '#/components/schemas/Description'
      required:
        - profile_id
        - name
        - restricted
    ProfileRequest:
      type: object
      properties:
        profile_id:
          $ref: '#/components/schemas/SimpleId'
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        restricted:
          description: Create a restricted profile which cannot change settings. Switching profiles requires the admin pin.
          type: boolean
        description:
          $ref: '#/components/schemas/Description'
      required:
        - name
    ProfileUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        restricted:
          description: A restricted profile cannot change settings. Switching profiles requires the admin pin.
          type: boolean
        description:
          $ref: '#/components/schemas/Description'
        pages:
          description: |
            Used for update only: modify page order or delete pages in profile.
            - An empty `pages` array will delete all pages and containing groups!
            - If the property is missing, the existing page configuration will not be changed.
          type: array
          items:
            $ref: '#/components/schemas/SimpleId'
    Profiles:
      type: array
      items:
        $ref: '#/components/schemas/Profile'
    Remote:
      description: |
        The remote entity executes a sequence of commands and at the end displays a user interface (similar to remote entity)
        to the user. If the entity has an off sequence, it can be turned off.
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - remote
            features:
              description: |
                Supported features of the remote. If the remote has an `off` sequence, it supports the common `on_off`
                feature, otherwise only `start`.
              type: array
              items:
                type: string
                enum:
                  - on_off
                  - send
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: remote was created by Remote Two and can be edited.
                    - `false`: remote was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
                kind:
                  $ref: '#/components/schemas/RemoteKind'
                bt:
                  type: object
                  properties:
                    dev_profile_id:
                      description: BT device profile identifier
                      type: boolean
                    peripherals:
                      $ref: '#/components/schemas/BtDevicePeripherals'
                    profile:
                      description: BT peripheral connection profile
                      type: integer
                ir:
                  description: |
                    Infrared settings: codeset name und used infrared emitter to send commands.
                  type: object
                  properties:
                    cmd_delay:
                      description: |
                        Delay in milliseconds between sending IR commands, if a command contains multiple IR codes.
                      type: integer
                      minimum: 0
                    repeat:
                      description: |
                        Repeat each IR command in the dataset n times. Defaults to 0 (no repeat) if not specified.  
                        This setting is intended mainly for PRONTO codes with certain devices requiring the same command being
                        sent twice (e.g. Sony and Epson devices).
                      type: integer
                      minimum: 0
                      maximum: 20
                    codeset:
                      description: "Read-only information about the infrared codeset. \U0001F477 **TODO** Use `/remotes/entities/:entityId/ir`\nendpoints to manage infrared codes.\n"
                      type: object
                      properties:
                        id:
                          description: |
                            Codeset identifier, either a custom codeset id or a manufacturer codeset id depending on `type`.
                          type: string
                        name:
                          description: |
                            User friendly name of the used codeset (custom or manufacturer) to show in a user interface.
                          type: string
                        type:
                          $ref: '#/components/schemas/IrCodeSetType'
                    output:
                      description: |
                        Infrared output device settings. Use `/ir/emitter` endpoints to retrieve further information.
                      type: object
                      properties:
                        device_id:
                          description: |
                            IR emitter device identifier.
                          type: string
                        port_id:
                          description: |
                            IR emitter output port identifier.
                          type: string
                simple_commands:
                  description: |
                    All available commands of the infrared codeset for the button mapping and user interface.  
                    These simple commands relate directly to the `cmd_id` attribute when defining or calling an entity command.

                    The commands are read-only and updated automatically based on the infrared codeset.
                  type: array
                  items:
                    type: string
                button_mapping:
                  $ref: '#/components/schemas/DeviceButtonMappings'
                user_interface:
                  $ref: '#/components/schemas/ActivityUserInterface'
          required:
            - options
    Remotes:
      type: array
      items:
        $ref: '#/components/schemas/RemoteOverview'
    RemoteCreate:
      description: |
        Dedicated request object to create a new remote.
      type: object
      allOf:
        - properties:
            name:
              $ref: '#/components/schemas/LanguageText'
            icon:
              $ref: '#/components/schemas/IconIdentifier'
            description:
              $ref: '#/components/schemas/LanguageText'
        - oneOf:
            - type: object
              properties:
                clone_from:
                  $ref: '#/components/schemas/EntityId'
              required:
                - clone_from
            - type: object
              properties:
                codeset_id:
                  $ref: '#/components/schemas/SimpleId'
              required:
                - codeset_id
            - type: object
              properties:
                custom_codeset:
                  type: object
                  properties:
                    manufacturer_id:
                      type: string
                      default: custom
                    device_name:
                      type: string
                    device_type:
                      $ref: '#/components/schemas/DeviceType'
                  required:
                    - device_name
              required:
                - custom_codeset
            - type: object
              properties:
                kind:
                  $ref: '#/components/schemas/RemoteKind'
                bt:
                  $ref: '#/components/schemas/BtRemoteCreateOptions'
              required:
                - kind
                - bt
      required:
        - name
    RemoteOverview:
      type: object
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            entity_type:
              type: string
              enum:
                - remote
            features:
              description: |
                Supported features of the remote.
              type: array
              items:
                type: string
                enum:
                  - send
            options:
              type: object
              properties:
                editable:
                  description: |
                    - `true` / property missing: remote was created by Remote Two and can be edited.
                    - `false`: remote was provided by an integration and cannot be edited.
                  type: boolean
                  default: true
    RemoteUpdate:
      description: |
        Dedicated request object to update an existing remote.  
        All root properties are optional and only the provided objects are updated in the remote-entity. Omitted objects are
        ignored and not deleted from the remote-entity.
      type: object
      properties:
        name:
          $ref: '#/components/schemas/LanguageText'
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        description:
          $ref: '#/components/schemas/LanguageText'
        options:
          type: object
          properties:
            ir:
              type: object
              properties:
                cmd_delay:
                  description: |
                    Delay in milliseconds between sending IR commands, if a command contains multiple IR codes.
                  type: integer
                  minimum: 0
                repeat:
                  description: |
                    Repeat each IR command in the dataset n times. Defaults to 0 (no repeat) if not specified.  
                    This setting is intended mainly for PRONTO codes with certain devices requiring the same command being
                    sent twice (e.g. Sony and Epson devices).
                  type: integer
                  minimum: 0
                  maximum: 20
                codeset:
                  type: object
                  properties:
                    id:
                      type: string
                  required:
                    - id
                output:
                  type: object
                  properties:
                    device_id:
                      type: string
                    port_id:
                      type: string
                  required:
                    - device_id
                    - port_id
    RemoteIrDataSet:
      type: object
      properties:
        id:
          description: |
            Codeset identifier, either a custom codeset id or a manufacturer codeset id depending on `type`.
          type: string
        name:
          description: User friendly name of the codeset (custom or manufacturer).
          type: string
        type:
          $ref: '#/components/schemas/IrCodeSetType'
        codes:
          type: array
          items:
            $ref: '#/components/schemas/RemoteIrCode'
    RemoteIrCode:
      type: object
      properties:
        cmd_id:
          $ref: '#/components/schemas/SimpleId'
        code:
          description: |
            Custom infrared code. Only set for custom codeset or if a manufacturer codeset has been modified or enhanced.
          type: object
          properties:
            value:
              type: string
            format:
              $ref: '#/components/schemas/IrCodeFormat'
        custom:
          description: |
            Flag indicating if this code is a custom code in a manufacturer codeset. This is a manually added code which
            was not present in the codeset. Custom codes can be deleted or edited by the user. The modified code is
            stored in the `code` object.
          type: boolean
        modified:
          description: |
            Flag indicating if a manufacturer code has been replaced with a user code. The modified code is stored in
            the `code` object. Modified codes can be edited by the user.
          type: boolean
      required:
        - cmd_id
    RemoteKind:
      description: |
        Type of remote-entity:
        - `BT`: Bluetooth remote
        - `IR`: Infrared remote
        - `EXTERNAL`: Remote-entity provided from an integration to control a single device.
      type: string
      enum:
        - BT
        - IR
        - EXTERNAL
      default: IR
    BtRemoteCreateOptions:
      description: Options for creating a Bluetooth peripheral remote-entity.
      type: object
      properties:
        dev_profile_id:
          description: |
            Bluetooth device profile identifier to customize available commands, button mappings and default UI screens.
          type: string
    BtRemoteInfo:
      description: |
        BT-remote information.
      type: object
      properties:
        profile:
          description: BT peripheral connection profile
          type: integer
        dev_profile_id:
          description: Bluetooth device profile identifier.
          type: string
        dev_profile_version:
          description: Bluetooth device profile version.
          type: integer
          minimum: 0
        peer:
          $ref: '#/components/schemas/BtPeer'
        peripherals:
          $ref: '#/components/schemas/BtDevicePeripherals'
      required:
        - profile
    BtRemotePairingInfo:
      description: |
        BT-remote pairing information. The `pairing_request` field is set if a pairing request is active, `peer` is only
        set if the remote has been paired with a central device.
      type: object
      properties:
        pairing_request:
          $ref: '#/components/schemas/BtPairingRequest'
        paired:
          description: Indicates if BT-remote entity peripheral is paired with a central device.
          type: boolean
        pairing_enabled:
          description: Indicates if a central can pair with this BT-remote peripheral.
          type: boolean
        advertisement_name:
          description: Advertisement name of the peripheral. Usually only set when `pairing_enabled` is true.
          type: string
        peer:
          $ref: '#/components/schemas/BtPeer'
      required:
        - paired
        - pairing_enabled
    BtPairingRequest:
      description: |
        A central requests pairing with the peripheral.
        ‼️ Only `kind: PasskeyInput` is currently implemented.
      type: object
      properties:
        id:
          description: Pairing request identifier
          type: integer
        profile:
          description: BT peripheral connection profile to associate the pairing request.
          type: integer
        peer:
          $ref: '#/components/schemas/BtPeer'
        kind:
          $ref: '#/components/schemas/BtSecurityType'
        passkey:
          description: |
            Only set for `kind: DisplayNumber | NumericComparison`
          type: integer
          minimum: 0
      required:
        - profile
        - peer
        - kind
    BtPairingResponse:
      description: |
        Response to a BtPairingRequest.
        - `Passkey` request: either provide the passkey entered by the user, decline it with `confirm: false`.
        - `NumericComparison` request: confirm or decline with `confirm: true | false`.
      type: object
      allOf:
        - properties:
            id:
              description: Pairing request identifier.
              type: integer
          required:
            - id
        - oneOf:
            - type: object
              properties:
                passkey:
                  description: '6-digit passkey displayed on the central, sent as text. Leading zero(s) can be included or omitted.'
                  type: string
                  minLength: 1
                  maxLength: 6
              required:
                - passkey
            - type: object
              properties:
                confirm:
                  description: Confirm or decline a pairing request.
                  type: boolean
              required:
                - confirm
    BtPeer:
      description: Information about the (paired) peer.
      type: object
      properties:
        address:
          description: 'BT address in 00:00:00:00:00:00 format.'
          type: string
        addr_type:
          $ref: '#/components/schemas/BtAddressType'
      required:
        - address
        - addr_type
    BtAddressType:
      description: |
        Address type:
        - `LE_PUBLIC`: Public device address
        - `LE_RANDOM`: Random device address
        - `LE_PUBLIC_IDENTITY`: Public identity address (corresponds to resolved private address)
        - `LE_RANDOM_IDENTITY`: Random (static) identity address (corresponds to resolved private address)
        - `UNKNOWN`: Address could not be determined, or an error occurred
      type: string
      enum:
        - LE_PUBLIC
        - LE_RANDOM
        - LE_PUBLIC_IDENTITY
        - LE_RANDOM_IDENTITY
        - UNKNOWN
    BtSecurityType:
      description: |
        Bonding security type:
        - `JustWorks`: Automatic pairing, peripheral only needs to confirm pairing request from central.
        - `DisplayNumber`: Peripheral must display number for the central to confirm.
        - `NumericComparison`: Peripheral must confirm or declined if the numeric value matches the displayed number on the central.
        - `PasskeyInput`: Peripheral must enter displayed passkey on central.
      type: string
      enum:
        - JUST_WORKS
        - DISPLAY_NUMBER
        - NUMERIC_COMPARISON
        - PASSKEY_INPUT
    BtDeviceProfileInfo:
      description: |
        BT device profile overview information. Contains all required device information to make a device selection.
      type: object
      properties:
        id:
          description: Device profile identifier
          type: string
        user_profile:
          description: System or user provided device profile.
          type: boolean
        name:
          $ref: '#/components/schemas/LanguageText'
        description:
          $ref: '#/components/schemas/LanguageText'
        version:
          type: integer
        peripherals:
          $ref: '#/components/schemas/BtDevicePeripherals'
      required:
        - id
        - name
        - version
        - peripherals
    BtDeviceProfileInfos:
      type: array
      items:
        $ref: '#/components/schemas/BtDeviceProfileInfo'
    BtDeviceProfile:
      description: |
        BT device profile to define available key commands and pre-defined button mappings and UI screens.
      type: object
      properties:
        id:
          description: Device profile identifier
          type: string
        name:
          $ref: '#/components/schemas/LanguageText'
        description:
          $ref: '#/components/schemas/LanguageText'
        version:
          type: integer
        peripherals:
          $ref: '#/components/schemas/BtDevicePeripherals'
        commands:
          type: object
          properties:
            keyboard:
              type: array
              items:
                type: string
            consumer:
              type: array
              items:
                type: string
            system:
              type: array
              items:
                type: string
          required:
            - keyboard
            - consumer
            - system
        command_mapping:
          type: object
          additionalProperties:
            type: string
        button_mapping:
          $ref: '#/components/schemas/DeviceButtonMappings'
        user_interface:
          $ref: '#/components/schemas/ActivityUserInterface'
      required:
        - id
        - name
        - version
        - peripherals
        - commands
        - command_mapping
    BtDevicePeripherals:
      description: Supported device peripherals. A device can support a single mode or act as a composite device.
      type: object
      properties:
        keyboard:
          description: Device is a HID keyboard
          type: boolean
        mouse:
          description: Device is a mouse keyboard
          type: boolean
    ResourceType:
      type: string
      format: '^[a-zA-Z]+$'
      minLength: 1
      maxLength: 32
    ResourceItems:
      type: array
      items:
        $ref: '#/components/schemas/ResourceItem'
    ResourceItem:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          type: string
          description: Resource identifier (normalized filename)
        size:
          type: integer
          format: int32
          description: Size in bytes
    ConfirmationPage:
      description: |
        Confirmation screen.
        - `message1`: Message to display between title and image (if supplied). Supports Markdown formatting.
        - `message2`: Message to display below message1 or image (if supplied). Supports Markdown formatting.
      type: object
      properties:
        title:
          $ref: '#/components/schemas/LanguageText'
        message1:
          $ref: '#/components/schemas/LanguageText'
        image:
          description: |
            Optional base64-encoded image.

            TODO maximum encoded length to avoid WebSocket continuation frames, supported image formats
            (png & svg?), max height & width
          type: string
          format: byte
          maxLength: 32768
        message2:
          $ref: '#/components/schemas/LanguageText'
      required:
        - title
    SettingsPage:
      description: 'Settings definition page, e.g. to configure an integration driver.'
      type: object
      properties:
        title:
          $ref: '#/components/schemas/LanguageText'
        settings:
          description: 'One or multiple input field definitions, with optional pre-set values.'
          type: array
          items:
            $ref: '#/components/schemas/Setting'
      required:
        - title
        - settings
    Setting:
      description: |
        An input setting is of a specific type defined in `field.type` which defines how it is presented to the user.

        Inspired by the [Homey SDK settings](https://apps.developer.homey.app/the-basics/devices/settings) concept.
      type: object
      properties:
        id:
          description: Unique identifier of the setting to be returned with the entered value.
          type: string
          maximum: 50
        label:
          $ref: '#/components/schemas/LanguageText'
        field:
          oneOf:
            - $ref: '#/components/schemas/SettingTypeNumber'
            - $ref: '#/components/schemas/SettingTypeText'
            - $ref: '#/components/schemas/SettingTypeTextArea'
            - $ref: '#/components/schemas/SettingTypePassword'
            - $ref: '#/components/schemas/SettingTypeCheckbox'
            - $ref: '#/components/schemas/SettingTypeDropdown'
            - $ref: '#/components/schemas/SettingTypeLabel'
      required:
        - id
        - label
        - field
    SettingTypeNumber:
      description: |
        Number input with optional `min`, `max`, `steps` and `decimals` properties. The default value must be specified
        in `value`. An optional unit of the number setting can be specified in `unit`, which will be displayed next to
        the input field.
      type: object
      properties:
        number:
          type: object
          properties:
            value:
              description: Default value for input field.
              type: number
            min:
              description: 'Optional validation: minimum allowed value (inclusive).'
              type: number
            max:
              description: 'Optional validation: maximum allowed value (inclusive).'
              type: number
            steps:
              description: |
                Optional validation: allowed step increment between values. Might also be used in the UI for input helpers.
              type: number
            decimals:
              description: Number of decimal places. 0 = integer value
              type: integer
              minimum: 0
              default: 0
            unit:
              $ref: '#/components/schemas/LanguageText'
          required:
            - value
      required:
        - number
    SettingTypeText:
      description: |
        Single line of text input.

        TODO: format specifier for e.g. email, url, date, datetime etc.?
      type: object
      properties:
        text:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
            regex:
              description: Optional regex validation pattern for the input value.
              type: string
      required:
        - text
    SettingTypeTextArea:
      description: 'Multi-line text input, e.g. for providing a description.'
      type: object
      properties:
        textarea:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
      required:
        - textarea
    SettingTypePassword:
      description: |
        Password or pin entry field with the input text hidden from the user. Otherwise the same as text input.
      type: object
      properties:
        password:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
              format: password
            regex:
              description: Optional regex validation pattern for the input value.
              type: string
      required:
        - password
    SettingTypeCheckbox:
      description: Checkbox setting with `true` / `false` values.
      type: object
      properties:
        checkbox:
          type: object
          properties:
            value:
              description: Initial setting.
              type: boolean
          required:
            - value
      required:
        - checkbox
    SettingTypeDropdown:
      description: Dropdown setting to pick a single value from a list. All values must be strings.
      type: object
      properties:
        dropdown:
          type: object
          properties:
            value:
              description: Pre-selected dropdown id
              type: string
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Selection identifier.
                    type: string
                  label:
                    $ref: '#/components/schemas/LanguageText'
                required:
                  - id
                  - label
          required:
            - items
      required:
        - dropdown
    SettingTypeLabel:
      description: |
        Additional read-only text for information purpose between other settings. Supports Markdown formatting.
      type: object
      properties:
        label:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/LanguageText'
          required:
            - value
      required:
        - label
    SettingsValues:
      description: |
        User input result of a SettingsPage as key values.
        - key: id of the field
        - value: entered user value as string. This is either the entered text or number, selected checkbox state or the
          selected dropdown item id.  
          ⚠️ Non native string values as numbers or booleans are represented as string values!
      type: object
      additionalProperties:
        type: string
    Scopes:
      type: array
      items:
        $ref: '#/components/schemas/Scope'
    Scope:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ScopeName'
        description:
          type: string
          description: Permission scope description
      required:
        - name
    ScopeName:
      type: string
      format: '^[a-zA-Z\-:]+$'
      minLength: 1
      maxLength: 36
      description: Permission scope name
    SimpleId:
      type: string
      format: '^[a-zA-Z0-9\-_\.]+$'
      minLength: 1
      maxLength: 36
      description: 'Simple string identifier, also usable as URL parameter or file identifier'
    SupportedResource:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        name:
          $ref: '#/components/schemas/LanguageText'
        description:
          $ref: '#/components/schemas/LanguageText'
        file_formats:
          description: 'Allowed file format extensions, e.g. `png`.'
          type: array
          items:
            type: string
        max_file_size:
          description: Maximum file size in bytes.
          type: integer
        max_count:
          description: Maximum number of custom resources.
          type: integer
        image:
          description: Image specific restrictions. Only set for image resources.
          type: object
          properties:
            sizes:
              description: Allowed image sizes.
              type: array
              items:
                type: object
                properties:
                  width:
                    type: integer
                  height:
                    type: integer
                required:
                  - width
                  - height
          required:
            - sizes
        sound:
          type: object
          description: Sound file specific restrictions. Only set for sound resources.
          properties:
            bits:
              type: array
              items:
                type: integer
            channels:
              type: array
              items:
                type: integer
            sampling_rates:
              type: array
              items:
                type: integer
      required:
        - type
        - name
        - file_formats
        - max_file_size
        - max_count
    SupportedResources:
      type: array
      items:
        $ref: '#/components/schemas/SupportedResource'
    SystemInfo:
      type: object
      properties:
        model_name:
          type: string
        model_number:
          type: string
        serial_number:
          type: string
        hw_revision:
          type: string
    SystemLogBoot:
      type: object
      properties:
        index:
          type: integer
        boot_id:
          description: Boot identifier usable for querying logs.
          type: string
        first_entry:
          type: string
          format: date-time
        last_entry:
          type: string
          format: date-time
    SystemLogService:
      type: object
      properties:
        service:
          description: Service identifier usable for querying logs.
          type: string
        active:
          description: Service is active
          type: boolean
        name:
          description: Human readable service name
          type: string
    SystemLogEntry:
      type: object
      properties:
        ts:
          description: Timestamp of log entry
          type: string
          format: date-time
        service:
          description: Service identifier
          type: string
        prio:
          description: 'Priority, corresponds to [Syslog levels](https://en.wikipedia.org/wiki/Syslog#Severity_level)'
          type: integer
        msg:
          description: Log message
          type: string
    UiId:
      type: string
      format: '^[a-zA-Z0-9\-_]+$'
      minLength: 1
      maxLength: 36
      description: Unique user interface identifier.
    UserInterfaceItem:
      description: |
        A user interface item is either an icon, text or media information from a media-player entity.
        - Icon and text items can be static or linked to a command specified in the `command` field.
        - Default size is 1x1 if not specified.
      type: object
      properties:
        type:
          description: |
            Type of the user interface item:
            - `icon`: show an icon, either a UC icon or a custom icon. Field `icon` must contain the icon identifier.
            - `text`: show text only from field `text`.
            - `media_player`: show media information from the specified media-player entity specified in `media_player_id`.  
              The specified entity_id must be part of the included entities in the activity and of type media-player.
          type: string
          enum:
            - icon
            - text
            - numpad
            - media_player
        icon:
          $ref: '#/components/schemas/IconIdentifier'
        text:
          type: string
        media_player_id:
          $ref: '#/components/schemas/EntityId'
        command:
          $ref: '#/components/schemas/EntityCommand'
        location:
          $ref: '#/components/schemas/GridLocation'
        size:
          $ref: '#/components/schemas/GridItemSize'
      required:
        - type
        - location
    AvailableSystemUpdateResponse:
      type: object
      properties:
        update_in_progress:
          type: boolean
        last_check_date:
          description: Last update check timestamp.
          type: string
          format: date-time
        next_check_date:
          description: Next scheduled update check timestamp.
          type: string
          format: date-time
        update_check_enabled:
          type: boolean
        installed_version:
          description: Installed system version.
          type: string
        available:
          type: array
          items:
            $ref: '#/components/schemas/AvailableSystemUpdate'
      required:
        - update_check_enabled
        - installed_version
        - available
    AvailableSystemUpdate:
      type: object
      properties:
        id:
          description: Update identifier
          type: string
        title:
          type: string
        description:
          $ref: '#/components/schemas/LanguageText'
        version:
          type: string
        channel:
          $ref: '#/components/schemas/UpdateChannel'
        release_date:
          type: string
          format: date
        size:
          type: integer
          format: int64
        release_notes_url:
          type: string
          format: uri
        download:
          $ref: '#/components/schemas/UpdateDownloadState'
      required:
        - id
        - title
        - description
        - version
        - release_date
        - size
    UpdateChannel:
      type: string
      enum:
        - STABLE
        - TESTING
        - DEVELOPMENT
    UpdateDownloadState:
      description: |
        Download status:
        - `PENDING`: update is scheduled to download
        - `DOWNLOADING`: update is currently downloading
        - `DOWNLOADED`: update has been downloaded and is ready to be installed
        - `ERROR`: download failed
      type: string
      enum:
        - PENDING
        - DOWNLOADING
        - DOWNLOADED
        - ERROR
    UploadSystemImageResponse:
      type: object
      properties:
        id:
          description: Update identifier
          type: string
      required:
        - id
    SystemUpdateResponse:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/SystemUpdateState'
        update_id:
          description: Update identifier
          type: string
      required:
        - state
        - update_id
    SystemUpdateProgress:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/SystemUpdateState'
        update_id:
          description: Update identifier
          type: string
        download_percent:
          description: Percent of download
          type: integer
        download_bytes:
          description: Total of bytes to be downloaded
          type: integer
          format: int64
        total_steps:
          description: Total number of update steps
          type: integer
        current_step:
          description: Current installation step index
          type: integer
        current_percent:
          description: Percent in current step
          type: integer
      required:
        - state
        - update_id
    SystemUpdateState:
      type: string
      enum:
        - IDLE
        - START
        - RUN
        - SUCCESS
        - FAILURE
        - DOWNLOAD
        - DONE
        - SUB_PROCESS
        - PROGRESS
    ValidationErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Message describing the validation error. This message is intended for error analysis and should not directly shown to the end user.
        errors:
          description: Optional validation errors
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      properties:
        field:
          description: Field identifier with an invalid value.
          type: string
        field_errors:
          description: |
            Optional field validation error descriptions. A field can have multiple validation rules with an error.
          type: array
          items:
            $ref: '#/components/schemas/FieldValidationError'
      required:
        - field
    FieldValidationError:
      type: object
      properties:
        code:
          description: |
            Validation error code. This can be a custom code or one of the common pre-defined codes:
            - `LENGTH`: String is either too short or too long.
            - `RANGE`: Number is not in valid range.
            - `REGEX`: Regex validation failed.
            - `INVALID_FORMAT`: value is in an invalid format.
          type: string
        message:
          description: Validation rule message.
          type: string
        params:
          description: 'Optional code related parameters. E.g. `min`, `max` for string-length or number-range validation.'
          type: object
      required:
        - message
    VersionInfo:
      type: object
      properties:
        device_name:
          description: Custom name of the remote
          type: string
        hostname:
          description: Hostname of the remote
          type: string
        address:
          description: MAC address of the remote
          type: string
        api:
          description: API version
          type: string
        core:
          description: Core app version
          type: string
        ui:
          description: Frontend app version
          type: string
        os:
          description: Operating system version
          type: string
        integrations:
          description: 'Versions of the available integrations. Map of (integration_name, version).'
          type: object
          additionalProperties:
            type: string
    ApScanStatus:
      type: object
      properties:
        active:
          type: boolean
        scan:
          type: array
          items:
            $ref: '#/components/schemas/AccessPointScan'
      required:
        - active
        - scan
    AccessPointScan:
      type: object
      properties:
        bssid:
          description: MAC physical address of the access point (basic service set identifier)
          type: string
        frequency:
          description: 'Frequency of the channel in MHz (e.g., 2412 = channel 1)'
          type: string
        signal_level:
          description: Signal level (dBm)
          type: integer
        auth:
          description: Authentication method
          type: string
        ssid:
          description: |
            SSID network name as friendly UTF-8 representation. Use this name to present the network to users, but not for
            adding a new network configuration. This is a lossy conversion from the native SSID byte array.
          type: string
        ssid_hex:
          description: |
            Hex encoded string of the native SSID byte array.

            Always use this representation, when connecting to a network from a scan result.
          type: string
      required:
        - bssid
        - ssid
        - ssid_hex
    WifiStatus:
      type: object
      properties:
        wpa_state:
          $ref: '#/components/schemas/WpaState'
        id:
          description: Network identifier
          type: integer
        bssid:
          description: MAC physical address of the access point (basic service set identifier)
          type: string
        ssid:
          description: Network name (service set identifier)
          type: string
        ssid_hex:
          description: Hex encoded string of the native SSID byte array.
          type: string
        freq:
          description: 'Frequency of the channel in MHz (e.g., 2412 = channel 1)'
          type: integer
        address:
          description: MAC physical address of the WiFi adapter
          type: string
        pairwise_cipher:
          type: string
        group_cipher:
          type: string
        key_mgmt:
          type: string
        ip_address:
          description: Client IP address
          type: string
        noise:
          description: Noise level (dBm)
          type: integer
        rssi:
          description: Signal level (dBm)
          type: integer
        avg_rssi:
          description: Average RSSI (dBm)
          type: integer
        est_throughput:
          description: Estimated throughput in kbps
          type: integer
        snr:
          description: Signal-to-noise ratio in dB
          type: integer
        linkspeed:
          description: Link speed (Mbps)
          type: integer
      required:
        - wpa_state
    CreateWifiNetwork:
      type: object
      properties:
        ssid:
          description: |
            Network name (service set identifier).

            Only use for valid UTF-8 names, when creating a new configuration and not from a scan result.    
            Always use `ssid_hex`, when adding a network configuration from a scan result! Otherwise it's not guaranteed,
            that the correct network is configured. The SSID name can contain non-displayable characters.
          type: string
          minLength: 1
          maxLength: 32
        ssid_hex:
          description: |
            Hex encoded string of the native SSID byte array, returned from a network scan.
          minLength: 2
          maxLength: 64
        password:
          type: string
          minLength: 1
          maxLength: 63
    ModifyWifiNetwork:
      type: object
      properties:
        password:
          type: string
          minLength: 1
          maxLength: 63
      required:
        - password
    SavedNetworks:
      type: array
      items:
        $ref: '#/components/schemas/SavedNetwork'
    SavedNetwork:
      description: A saved network configuration (known network)
      type: object
      properties:
        id:
          description: 'Network identification, used for further operations on this network'
          type: integer
        ssid:
          description: Network name (service set identifier)
          type: string
        ssid_hex:
          description: Hex encoded string of the native SSID byte array.
          type: string
        secured:
          description: Secured or unsecured network
          type: boolean
        state:
          type: string
          enum:
            - CONNECTED
            - OUT_OF_RANGE
            - DISABLED
            - TEMPORARY_DISABLED
      required:
        - id
        - ssid
        - ssid_hex
        - secured
    WpaState:
      description: |
        - `UNKNOWN`: Unknown state. The driver returned a state which could not be handled.
        - `ERROR`: Error retrieving state information.
        - `DISCONNECTED`: This state indicates that client is not associated, but is likely to start looking for an access point. This state is entered when a connection is lost.
        - `INTERFACE_DISABLED`: This state is entered if the network interface is disabled. The driver refuses any new operations that would use the radio until the interface has been enabled.
        - `INACTIVE`: This state is entered if there are no enabled networks in the configuration. The driver is not trying to associate with a new network and external interaction (e.g. add or enable a network) is needed to start association.
        - `SCANNING`: Scanning for a network.
        - `AUTHENTICATED`: Trying to authenticate with a BSS/SSID.
        - `ASSOCIATING`: Trying to associate with a BSS/SSID.
        - `ASSOCIATED`: Association completed.
        - `FOUR_WAY_HANDSHAKE`: WPA 4-Way Key Handshake in progress.
        - `GROUP_HANDSHAKE`: WPA Group Key Handshake in progress.
        - `COMPLETED`: All authentication completed.
      type: string
      enum:
        - UNKNOWN
        - ERROR
        - DISCONNECTED
        - INTERFACE_DISABLED
        - INACTIVE
        - SCANNING
        - AUTHENTICATED
        - ASSOCIATING
        - ASSOCIATED
        - FOUR_WAY_HANDSHAKE
        - GROUP_HANDSHAKE
        - COMPLETED
    WifiCmd:
      type: string
      enum:
        - DISCONNECT
        - RECONNECT
        - REASSOCIATE
        - ENABLE_ALL_NETWORKS
        - DISABLE_ALL_NETWORKS
    WifiNetworkCmd:
      type: string
      enum:
        - ENABLE
        - DISABLE
        - SELECT
  responses:
    SuccessMessage:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err400BadRequest:
      description: The server could not understand the request due to invalid syntax or missing data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
    Err401Unauthorized:
      description: Authentication credentials were missing or incorrect. The client must authenticate itself to get the requested response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err403Forbidden:
      description: 'The request is understood, but the client does not have access rights to the content.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err409Conflict:
      description: The request conflicts with the current state of the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err404NotFound:
      description: The resource does not exist or the URI is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err413PayloadTooLarge:
      description: Request entity is too large and not supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err415UnsupportedMediaType:
      description: The media format of the requested data is not supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err422UnprocessableEntity:
      description: The request was well-formed but cannot be processed. Used for already existing data which cannot be re-created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err429TooManyRequests:
      description: The client has sent too many requests in a given amount of time.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err500InternalServerError:
      description: The server has encountered a situation it does not know how to handle. Retrying the same request will most likely result in the same error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err503ServiceUnavailable:
      description: The server is not ready to handle the request. Try again later.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Err507InsufficientStorage:
      description: There is insufficient storage to store the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
  securitySchemes:
    basicAuth:
      type: http
      description: Basic authentication. Please only use for single requests and testing with Swagger / OpenAPI.
      scheme: basic
    cookieAuth:
      type: apiKey
      description: Cookie based session authentication. Does not work with Swagger / OpenAPI testing.
      in: cookie
      name: id
