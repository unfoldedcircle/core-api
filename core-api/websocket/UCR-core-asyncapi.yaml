# TODO split into multiple files and share common models!
# Unfortunately https://github.com/asyncapi/bundler wasn't usable 2022-01 and most AsyncAPI tooling can't handle
# external references! :-(
# This needs to be fixed first: https://github.com/asyncapi/bundler/issues/34
# Otherwise we have to hack together something, since copying and pasting the shared definitions between the different
# APIs makes no sense...
asyncapi: 2.2.0
id: 'urn:com:unfoldedcircle:core'
info:
  title: Remote Two/3 WebSocket Core-API
  version: '0.30.1-beta'
  contact:
    name: API Support
    url: https://github.com/unfoldedcircle/core-api/issues
    email: support@unfoldedcircle.com
  license:
    name: Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
    url: https://creativecommons.org/licenses/by-sa/4.0/
  description: |
    The Unfolded Circle WebSocket Core-API for Remote Two/3 (_UCR WS Core-API_ in short) allows to interact with the
    Unfolded Circle remote-core service and take control of most of its features. It is a subset of the
    [UCR REST Core-API](https://github.com/unfoldedcircle/core-api/tree/main/core-api/rest), but provides additional
    asynchronous event messages.
    
    API message status legend:
    
    | Icon | Description                                                                     |
    |------|---------------------------------------------------------------------------------|
    | üí°   | Idea, not yet official part of API definition.                                  |
    | üöß   | Planned feature and most likely not (fully) implemented in the initial release. |
    | üë∑   | API definition is work in progress, not ready yet for implementation.           |
    | üîç   | API definition review & implementation.                                         |
    | üß™   | API has been implemented in the UC Remote and is currently being tested.        |
    | üöÄ   | Ready to use - feedback welcomed.                                               |
    
    ## Overview

    The Unfolded Circle Remote Core-APIs consist of:
    - this WebSocket API
    - the [UCR REST Core-API](https://github.com/unfoldedcircle/core-api/tree/main/core-api/rest).

    The remote-core service acts as WebSocket server. Whenever the remote enters standby it may choose to disconnect
    client connections.
    
    The focus of the Core-APIs is to provide all functionality for the UI application and the web-configurator.  
    They allow to interact with the Unfolded Circle remote-core service and take full control of its features.
    
    The Core-APIs may also be used by other external systems and integration drivers, if specific configuration or
    interaction features are required, which are not present in the [UCR Integration-API](https://github.com/unfoldedcircle/core-api/tree/main/integration-api).

    ## üöß Missing Features
    
    **This API is a work-in-progress and does not yet contain all functionality of the REST API.**
    
    The following features will be continuously added (in no particular order):
    
    - Matching features of the REST Core-API (except file up & download):
      - Activity management    
      - Infrared code management
    - Static network configuration
    
    Please check the [core-api GitHub issues](https://github.com/unfoldedcircle/core-api/issues) for the current state. 
    
    ## API Versioning
    
    The API is versioned according to [SemVer](https://semver.org/).  
    The initial public release will be `1.0.0` once it is considered stable enough with some initial integration
    implementations and developer examples.
    
    **Any major version zero (`0.y.z`) is for initial development and may change at any time!**  
    I.e. backward compatibility for minor releases is not yet established, anything MAY change at any time!
    We try avoiding it, but it might still happen...

    ## WebSocket Connection
    
    ### Authentication

    Interaction with the API requires an API-key, user account or a session cookie (see login operation in the
    REST Core-API).
    
    If the session cookie is sent with the WebSocket upgrade request, the connection is automatically authenticated.
    This is recommended when using a web browser as client.

    #### Basic authentication
    
    A user account can be used with [basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)
    in the WebSocket upgrade.
    
    - Header name: `Authentication`.
    - Value: `Basic ` + _base64 encoded value of ${username}:${password}_
    
    #### API-key authentication

    If the session based login is not possible or the client needs to use an API-key, then the preferred way to
    establish an authenticated WebSocket connection is to provide the API-key in the header of the WebSocket
    connection.

    - Header name: `API-KEY`.
    - Value: _API key_
    
    API keys can be created with the REST API and the `auth/api_keys` endpoints.

    #### Message based authentication 

    If the client cannot provide the API-key in the connection setup (e.g. a web browser), the server will send the
    `auth_required` message right after the connection is established.

    - The client must reply with the `auth` message containing the API-key.

      - All other messages will be ignored, until the client successfully authenticates itself.
      - The server will close an unauthenticated connection after a timeout of 15 seconds.

    - The server replies with the `authentication` event including the result code of the authentication.

      - `200`: authentication succeeded, API can be used.
      - `401`: invalid authentication and the connection will be closed.

externalDocs:
  description: Find out more about the Remotes
  url: 'https://www.unfoldedcircle.com/'
defaultContentType: application/json

servers:
  test:
    url: localhost:8080
    protocol: ws
    description: |
      Local test server.
    security:
      - token: [ ]
      - basic: [ ]
  test-wss:
    url: localhost:8443
    protocol: wss
    description: |
      Local test server.
    security:
      - token: [ ]
      - basic: [ ]
# TODO enhance tags with `externalDocs` and url links once API is hosted in public repo
tags:
  - name: integration
    description: Device adapter providing entities
  - name: entity
    description: Representation of a controllable device or thing
  - name: profile
    description: User profile handling to group and organize entities in the UI
  - name: dock
    description: Docking station management, discovery and infrared testing functions
  - name: wifi
    description: WiFi network management

channels:
  /ws:
    publish:
      description: |
        Core-API for clients to interact with the remote.

      operationId: pubRemoteMessage
      tags:
        - name: core
      message:
        oneOf:
          # --- common
          - $ref: '#/components/messages/auth'
          - $ref: '#/components/messages/ping'
          # --- system commands
          - $ref: '#/components/messages/version'
          - $ref: '#/components/messages/system'
          - $ref: '#/components/messages/system_cmd'
          - $ref: '#/components/messages/get_factory_reset_token'
          - $ref: '#/components/messages/factory_reset'
          - $ref: '#/components/messages/set_api_access'
          - $ref: '#/components/messages/get_api_access'
          - $ref: '#/components/messages/check_system_update'
          - $ref: '#/components/messages/update_system'
          - $ref: '#/components/messages/get_system_update_progress'
          - $ref: '#/components/messages/get_power_mode'
          - $ref: '#/components/messages/set_power_mode'
          - $ref: '#/components/messages/get_battery_charger'
          - $ref: '#/components/messages/update_battery_charger'
          - $ref: '#/components/messages/get_standby_inhibitors'
          - $ref: '#/components/messages/create_standby_inhibitor'
          - $ref: '#/components/messages/del_standby_inhibitor'
          - $ref: '#/components/messages/del_all_standby_inhibitors'
          - $ref: '#/components/messages/get_ambient_light'

          # --- configuration handling
          - $ref: '#/components/messages/reset_configuration'
          - $ref: '#/components/messages/get_configuration'
          - $ref: '#/components/messages/get_button_cfg'
          - $ref: '#/components/messages/set_button_cfg'
          - $ref: '#/components/messages/get_device_cfg'
          - $ref: '#/components/messages/set_device_cfg'
          - $ref: '#/components/messages/get_display_cfg'
          - $ref: '#/components/messages/set_display_cfg'
          - $ref: '#/components/messages/get_features_cfg'
          - $ref: '#/components/messages/set_features_cfg'
          - $ref: '#/components/messages/get_haptic_cfg'
          - $ref: '#/components/messages/set_haptic_cfg'
          - $ref: '#/components/messages/get_localization_cfg'
          - $ref: '#/components/messages/set_localization_cfg'
          - $ref: '#/components/messages/get_timezone_names'
          - $ref: '#/components/messages/get_localization_countries'
          - $ref: '#/components/messages/get_localization_languages'
          - $ref: '#/components/messages/localization_languages'
          - $ref: '#/components/messages/get_network_cfg'
          - $ref: '#/components/messages/set_network_cfg'
          - $ref: '#/components/messages/get_software_update_cfg'
          - $ref: '#/components/messages/set_software_update_cfg'
          - $ref: '#/components/messages/reset_software_update_cfg'
          - $ref: '#/components/messages/get_power_saving_cfg'
          - $ref: '#/components/messages/set_power_saving_cfg'
          - $ref: '#/components/messages/get_profile_cfg'
          - $ref: '#/components/messages/set_profile_cfg'
          - $ref: '#/components/messages/get_sound_cfg'
          - $ref: '#/components/messages/set_sound_cfg'
          - $ref: '#/components/messages/get_voice_control_cfg'
          - $ref: '#/components/messages/set_voice_control_cfg'
          - $ref: '#/components/messages/get_voice_assistants'

          # - $ref: '#/components/messages/get_log_cfg'
          # - $ref: '#/components/messages/set_log_cfg'
          # --- entity handling
          - $ref: '#/components/messages/get_entity_types'
          - $ref: '#/components/messages/get_entity'
          - $ref: '#/components/messages/get_entities'
          - $ref: '#/components/messages/get_available_entities'
          - $ref: '#/components/messages/get_entity_commands'
          - $ref: '#/components/messages/get_entity_command_metadata'
          - $ref: '#/components/messages/execute_entity_command'
          - $ref: '#/components/messages/update_entity'
          - $ref: '#/components/messages/delete_entity'
          - $ref: '#/components/messages/delete_entities'

          # --- Dock handling
          - $ref: '#/components/messages/get_dock_count'
          - $ref: '#/components/messages/get_docks'
          - $ref: '#/components/messages/create_dock'
          - $ref: '#/components/messages/delete_all_docks'
          - $ref: '#/components/messages/get_dock'
          - $ref: '#/components/messages/update_dock'
          - $ref: '#/components/messages/dock_connection_command'
          - $ref: '#/components/messages/delete_dock'
          - $ref: '#/components/messages/dock_command'
          - $ref: '#/components/messages/get_dock_discovery_status'
          - $ref: '#/components/messages/start_dock_discovery'
          - $ref: '#/components/messages/stop_dock_discovery'
          - $ref: '#/components/messages/get_dock_discovery_device'
          - $ref: '#/components/messages/exec_cmd_on_discovered_dock'
          - $ref: '#/components/messages/get_dock_setup_processes'
          - $ref: '#/components/messages/create_dock_setup'
          - $ref: '#/components/messages/stop_all_dock_setups'
          - $ref: '#/components/messages/get_dock_setup_status'
          - $ref: '#/components/messages/start_dock_setup'
          - $ref: '#/components/messages/stop_dock_setup'

          # --- IR handling
          # - $ref: '#/components/messages/ir_send'
          # - $ref: '#/components/messages/ir_learn'
          # - $ref: '#/components/messages/ir_get_commands'
          # - $ref: '#/components/messages/ir_add_cmd'
          # - $ref: '#/components/messages/ir_update_cmd'
          # - $ref: '#/components/messages/ir_remove_cmd'

          # --- WiFi handling
          - $ref: '#/components/messages/get_wifi_status'
          - $ref: '#/components/messages/wifi_command'
          - $ref: '#/components/messages/wifi_scan_start'
          - $ref: '#/components/messages/wifi_scan_stop'
          - $ref: '#/components/messages/get_wifi_scan_status'
          - $ref: '#/components/messages/get_all_wifi_networks'
          - $ref: '#/components/messages/add_wifi_network'
          - $ref: '#/components/messages/del_all_wifi_networks'
          - $ref: '#/components/messages/get_wifi_network'
          - $ref: '#/components/messages/update_wifi_network'
          - $ref: '#/components/messages/wifi_network_command'
          - $ref: '#/components/messages/del_wifi_network'

          # --- BT handling
          - $ref: '#/components/messages/bt_pairing_response'

    subscribe:
      description: Core-API for clients to receive messages from the remote.
      operationId: subRemoteMessage
      tags:
        - name: core
      message:
        oneOf:
          # --- common
          - $ref: '#/components/messages/auth_required'
          - $ref: '#/components/messages/authentication'
          - $ref: '#/components/messages/pong'
          - $ref: '#/components/messages/result'
          # --- system commands
          - $ref: '#/components/messages/version_info'
          - $ref: '#/components/messages/system_info'
          - $ref: '#/components/messages/factory_reset_token'
          - $ref: '#/components/messages/api_access'
          - $ref: '#/components/messages/system_update_info'
          - $ref: '#/components/messages/power_mode'
          - $ref: '#/components/messages/battery_charger'
          - $ref: '#/components/messages/ambient_light'
          # --- configuration handling
          - $ref: '#/components/messages/configuration'
          - $ref: '#/components/messages/button_cfg'
          - $ref: '#/components/messages/device_cfg'
          - $ref: '#/components/messages/display_cfg'
          - $ref: '#/components/messages/haptic_cfg'
          - $ref: '#/components/messages/localization_cfg'
          - $ref: '#/components/messages/timezone_names'
          - $ref: '#/components/messages/localization_countries'
          - $ref: '#/components/messages/get_localization_languages'
          - $ref: '#/components/messages/localization_languages'
          - $ref: '#/components/messages/network_cfg'
          - $ref: '#/components/messages/software_update_cfg'
          - $ref: '#/components/messages/power_saving_cfg'
          - $ref: '#/components/messages/profile_cfg'
          - $ref: '#/components/messages/sound_cfg'
          - $ref: '#/components/messages/voice_control_cfg'
          - $ref: '#/components/messages/voice_assistants'

          # - $ref: '#/components/messages/log_cfg'
          # --- entity handling
          - $ref: '#/components/messages/entity_types'
          - $ref: '#/components/messages/entities'
          - $ref: '#/components/messages/available_entities'
          - $ref: '#/components/messages/entity_commands'
          - $ref: '#/components/messages/entity'

          # --- Dock handling
          - $ref: '#/components/messages/dock_count'
          - $ref: '#/components/messages/docks'
          - $ref: '#/components/messages/dock'
          - $ref: '#/components/messages/dock_discovery_status'
          - $ref: '#/components/messages/dock_discovery_device'
          - $ref: '#/components/messages/dock_system_info'
          - $ref: '#/components/messages/dock_setup_processes'
          - $ref: '#/components/messages/dock_setup_status'

          # --- IR handling
          # - $ref: '#/components/messages/ir_learned_code'
          # - $ref: '#/components/messages/ir_commands'

          # --- WiFi handling
          - $ref: '#/components/messages/wifi_status'
          - $ref: '#/components/messages/wifi_scan_status'
          - $ref: '#/components/messages/wifi_networks'
          - $ref: '#/components/messages/wifi_network'

          # --- BT handling
          - $ref: '#/components/messages/bt_pairing_started'
          - $ref: '#/components/messages/bt_pairing_auth_request'
          - $ref: '#/components/messages/bt_pairing_complete'

  /intg:
    publish:
      description: |
        Integration driver and instance management.
        
        ‚ö†Ô∏è Attention: this is NOT a different WebSocket endpoint! It is purely used for logical grouping of all
        integration driver and instance related messages in the documentation!
        These messages are all available in the core `/ws` endpoint.
      operationId: pubIntegrationMessage
      tags:
        - name: integrations
      message:
        oneOf:
          # --- integration handling
          - $ref: '#/components/messages/get_integration_status'
          - $ref: '#/components/messages/integration_cmd'
          - $ref: '#/components/messages/integration_driver_cmd'

          - $ref: '#/components/messages/get_integration_driver_count'
          - $ref: '#/components/messages/get_integration_drivers'
          - $ref: '#/components/messages/register_integration_driver'
          - $ref: '#/components/messages/get_integration_driver'
          - $ref: '#/components/messages/update_integration_driver'
          - $ref: '#/components/messages/delete_integration_driver'

          - $ref: '#/components/messages/get_integration_count'
          - $ref: '#/components/messages/get_integrations'
          - $ref: '#/components/messages/create_integration'
          - $ref: '#/components/messages/get_integration'
          - $ref: '#/components/messages/update_integration'
          - $ref: '#/components/messages/delete_integration'

          - $ref: '#/components/messages/configure_entity_from_integration'
          - $ref: '#/components/messages/configure_entities_from_integration'

          # --- integration discovery
          - $ref: '#/components/messages/get_integration_discovery_status'
          - $ref: '#/components/messages/start_integration_discovery'
          - $ref: '#/components/messages/stop_integration_discovery'
          - $ref: '#/components/messages/get_discovered_integration_driver'
          - $ref: '#/components/messages/get_discovered_intg_driver_metadata'
          - $ref: '#/components/messages/configure_discovered_integration_driver'

          # --- integration setup
          - $ref: '#/components/messages/get_integration_setup_processes'
          - $ref: '#/components/messages/setup_integration'
          - $ref: '#/components/messages/stop_all_integration_setups'
          - $ref: '#/components/messages/get_integration_setup_status'
          - $ref: '#/components/messages/set_integration_user_data'
          - $ref: '#/components/messages/stop_integration_setup'

    subscribe:
      description: |
        ‚ö†Ô∏è Attention: this is NOT a different WebSocket endpoint! It is purely used for logical grouping of all
        integration driver and instance related messages in the documentation!
        These messages are all available in the core `/ws` endpoint.
      operationId: subIntegrationMessage
      tags:
        - name: integrations
      message:
        oneOf:
          # --- integration handling
          - $ref: '#/components/messages/integration_status'
          - $ref: '#/components/messages/integration_driver_count'
          - $ref: '#/components/messages/integration_drivers'
          - $ref: '#/components/messages/integration_driver'
          - $ref: '#/components/messages/integration_count'
          - $ref: '#/components/messages/integrations'
          - $ref: '#/components/messages/integration'

          # --- integration discovery and setup
          - $ref: '#/components/messages/integration_discovery_status'
          - $ref: '#/components/messages/discovered_integration_driver'
          - $ref: '#/components/messages/integration_setup_processes'
          - $ref: '#/components/messages/integration_setup_info'

  /profiles:
    publish:
      description: |
        Profile management.
        
        ‚ö†Ô∏è Attention: this is NOT a different WebSocket endpoint! It is purely used for logical grouping of all profile
        related messages in the documentation! These messages are all available in the core `/ws` endpoint.
      operationId: pubProfileMessage
      tags:
        - name: profiles
      message:
        oneOf:
          # --- profile handling
          - $ref: '#/components/messages/get_profiles'
          - $ref: '#/components/messages/get_profile'
          - $ref: '#/components/messages/get_active_profile'
          - $ref: '#/components/messages/switch_profile'
          - $ref: '#/components/messages/add_profile'
          - $ref: '#/components/messages/update_profile'
          - $ref: '#/components/messages/delete_profile'
          - $ref: '#/components/messages/delete_all_profiles'
          # --- page handling
          - $ref: '#/components/messages/get_pages'
          - $ref: '#/components/messages/get_page'
          - $ref: '#/components/messages/add_page'
          - $ref: '#/components/messages/update_page'
          - $ref: '#/components/messages/delete_page'
          - $ref: '#/components/messages/delete_pages_in_profile'
          # --- group handling
          - $ref: '#/components/messages/get_groups'
          - $ref: '#/components/messages/get_group'
          - $ref: '#/components/messages/add_group'
          - $ref: '#/components/messages/update_group'
          - $ref: '#/components/messages/delete_group'
          - $ref: '#/components/messages/delete_groups_in_profile'

    subscribe:
      description: |
        ‚ö†Ô∏è Attention: this is NOT a different WebSocket endpoint! It is purely used for logical grouping of all profile
        related messages in the documentation! These messages are all available in the core `/ws` endpoint.
      operationId: subProfileMessage
      tags:
        - name: profiles
      message:
        oneOf:
          # --- profile handling
          - $ref: '#/components/messages/profile'
          - $ref: '#/components/messages/profiles'
          # --- page handling
          - $ref: '#/components/messages/page'
          - $ref: '#/components/messages/pages'
          # --- group handling
          - $ref: '#/components/messages/group'
          - $ref: '#/components/messages/groups'

  /events:
    publish:
      description: |
        Notification signup for the client to receive event messages.
        
        ‚ö†Ô∏è Attention: this is NOT a different WebSocket endpoint! It is purely used for logical grouping of event
        messages in the documentation! These messages are all available in the core `/ws` endpoint.
      operationId: pubEventMessage
      tags:
        - name: events
      message:
        oneOf:
          # --- event channels
          - $ref: '#/components/messages/get_event_channels'
          - $ref: '#/components/messages/subscribe_events'
          - $ref: '#/components/messages/get_event_subscriptions'
          - $ref: '#/components/messages/unsubscribe_events'
          # TODO any more request messages?

    subscribe:
      description: |
        Event messages for signed up channels.
        
        ‚ö†Ô∏è Attention: this is NOT a different WebSocket endpoint! It is purely used for logical grouping of event
        messages in the documentation! These messages are all available in the core `/ws` endpoint.
      operationId: subEventMessage
      tags:
        - name: events
      message:
        oneOf:
          # --- event channels
          - $ref: '#/components/messages/event_channels'
          - $ref: '#/components/messages/event_subscriptions'
          # --- event notifications
          - $ref: '#/components/messages/warning'
          - $ref: '#/components/messages/entity_change'
          - $ref: '#/components/messages/activity_group_change'
          - $ref: '#/components/messages/wifi_change'
          - $ref: '#/components/messages/integration_driver_change'
          - $ref: '#/components/messages/integration_change'
          - $ref: '#/components/messages/integration_state'
          - $ref: '#/components/messages/active_profile_change'
          - $ref: '#/components/messages/profile_change'
          - $ref: '#/components/messages/configuration_change'
          - $ref: '#/components/messages/ir_learning'
          - $ref: '#/components/messages/dock_change'
          - $ref: '#/components/messages/dock_state'
          - $ref: '#/components/messages/dock_port_mode'
          - $ref: '#/components/messages/dock_discovery'
          - $ref: '#/components/messages/dock_setup_change'
          - $ref: '#/components/messages/dock_update_change'
          - $ref: '#/components/messages/integration_discovery'
          - $ref: '#/components/messages/integration_setup_change'
          - $ref: '#/components/messages/software_update'
          - $ref: '#/components/messages/power_mode_change'
          - $ref: '#/components/messages/battery_status'
          - $ref: '#/components/messages/ambient_light_change'

          # TODO define all events and response messages
#          - $ref: '#/components/messages/log_event'
#          - $ref: '#/components/messages/ui_notification'
#          - $ref: '#/components/messages/log_cfg_change'
#          - $ref: '#/components/messages/ui_cfg_change'
#          # - $ref: '#/components/messages/ui_event'

components:
  securitySchemes:
    token:
      description: |
        The API-key can be provided in header key `API-KEY`.
        - If this header is not provided, the server will send the `auth_required` event after connection and the client
        must authenticate with the `auth` message.
      type: httpApiKey
      in: header
      name: API-KEY
    basic:
      description: |
        To login with a user account, basic authentication can be used for the WebSocket upgrade. As an alternative,
        a session based login with the REST API can be performed. The session cookie will automatically authenticate
        the Websocket connection.
      type: http
      scheme: basic

  # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  messages:
    request:
      summary: üöÄ Generic request message.
      payload:
        $ref: '#/components/schemas/commonReq'
    response:
      summary: üöÄ Generic response message.
      payload:
        $ref: '#/components/schemas/commonResp'
    event:
      summary: üöÄ Generic event message of a subscribed channel.
      payload:
        $ref: '#/components/schemas/commonEvent'
    auth_required:
      summary: üß™ Authentication request event after connection is established.
      description: |
        This event is only sent if the client didn't provide authentication during connection setup.  
        The client must then authenticate with the `auth` request message.
      payload:
        $ref: '#/components/schemas/authRequiredEvent'
    auth:
      summary: üß™ Authenticate a connection.
      description: |
        Sent by the client right after establishing a connection if header authentication cannot be used, or after an 
        `auth_required` request by the server.
      payload:
        $ref: '#/components/schemas/authRequestMsg'
      x-response:
        $ref: '#/components/messages/authentication'
    authentication:
      summary: üß™ Authentication response.
      description: |
        The authentication result is provided in the `code` attribute:
        - `200`: success, API can be used and message requests are accepted.
        - `401`: authentication failed, the provided API-key is not valid. The server will close the connection.
      payload:
        $ref: '#/components/schemas/authMsg'
    ping:
      summary: üöÄ Application level based ping to determine whether connection is alive.
      description: |
        Client can ping the server to determine whether connection is alive. Server responds with pong.
        
        This is an application level ping as opposed to the standard WebSocket ping frames. This is only required if a
        client framework doesn't support WebSocket ping frames!  
        Additional payload data may be included in `msg_data` which will be echoed by the server.
        E.g. a client timestamp to calculate round trip times.
      payload:
        $ref: '#/components/schemas/ping'
      x-response:
        $ref: '#/components/messages/pong'
    pong:
      summary: üöÄ Pong is a response to ping message
      description: |
        Server pong response to a ping to determine whether connection is alive.
        This is an application level pong as opposed to default pong in websockets standard which is sent by client in
        response to a ping.
      payload:
        $ref: '#/components/schemas/pong'
    result:
      summary: üöÄ Command result message
      payload:
        $ref: '#/components/schemas/commonResp'
      examples:
        - payload:
            kind: resp
            req_id: 123
            msg: result
            code: 200
            msg_data: { }
        - payload:
            kind: resp
            req_id: 124
            msg: result
            code: 400
            msg_data:
              code: "INV_ARGUMENT"
              message: "Invalid argument. Foo must be a positive number."

    # =========================================================================
    # CORE-API MESSAGES
    # =========================================================================

    version:
      summary: üöÄ Get version information.
      payload:
        $ref: '#/components/schemas/versionMsg'
      x-response:
        $ref: '#/components/messages/version_info'
    version_info:
      summary: üß™ Version information response.
      payload:
        $ref: '#/components/schemas/versionInfoMsg'

    system:
      summary: üöÄ Get system information.
      description: Get hardware information about the device like serial number, model number and hardware revision.
      payload:
        $ref: '#/components/schemas/getSystemInfoMsg'
      x-response:
        $ref: '#/components/messages/result'
    system_info:
      summary: üß™ System information response.
      payload:
        $ref: '#/components/schemas/systemInfoMsg'
    system_cmd:
      summary: üß™ Perform a system command like reboot or power-off.
      description: |
        The following system commands can be executed:
        
        - `STANDBY`: Put the device into standby mode.
        - `REBOOT`: Reboot the device.
        - `POWER_OFF`: Switch off the device
        - `RESTART`: Restart all applications.
        - `RESTART_UI`: Restart the ui application.
        - `RESTART_CORE`: Restart the core service application.
        
        The server will respond with a `result` message and a status code of the request.  
        For status code 200 the WebSocket connection will be closed and the command executed.
      payload:
        $ref: '#/components/schemas/systemCmdMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_factory_reset_token:
      summary: Get factory reset token.
      description: |
        Get a factory reset token to perform a complete factory reset of the remote.

        The token will be valid for 60 seconds. Afterwards, a new token must be requested.  
        Whenever a new token is requested, any old tokens will be invalidated.
      payload:
        $ref: '#/components/schemas/getFactoryResetTokenMsg'
      x-response:
        $ref: '#/components/messages/factory_reset_token'
    factory_reset_token:
      summary: Factory reset token response.
      payload:
        $ref: '#/components/schemas/factoryResetTokenMsg'
    factory_reset:
      summary: Perform a factory reset.
      description: |
        A factory reset removes all configuration data and puts the device into a clean state.  

        ‚ö†Ô∏è **Warning:** All user data will be erased and won't be recoverable!

        A reset token must be requested first and provided to perform a factory reset.
      payload:
        $ref: '#/components/schemas/factoryResetMsg'
      x-response:
        $ref: '#/components/messages/result'

    set_api_access:
      summary: Enable or disable API access.
      description: |
        Enable / disable API access for web-configurator. If the account gets disabled, all active sessions are closed
        and WebSocket connections disconnected.   
        The server will respond with a `result` message and a status code of the request.
      payload:
        $ref: '#/components/schemas/setApiAccessMsg'
      x-response:
        $ref: '#/components/messages/result'
    get_api_access:
      summary: Get API access status.
      description: |
        The server will respond with an `api_access` message.
      payload:
        $ref: '#/components/schemas/getApiAccessMsg'
      x-response:
        $ref: '#/components/messages/api_access'
    api_access:
      summary: API access status response.
      payload:
        $ref: '#/components/schemas/apiAccessMsg'

    check_system_update:
      summary: üß™ Check if system update is available.
      description: |
        Returns the known available system updates.

        System update checks are run automatically (if not disabled in settings). Use the `force_update` flag to force
        an update check.
      payload:
        $ref: '#/components/schemas/checkSystemUpdateMsg'
      x-response:
        $ref: '#/components/messages/system_update_info'
    system_update_info:
      summary: üß™ Available system update response.
      payload:
        $ref: '#/components/schemas/systemUpdateInfoMsg'
    update_system:
      summary: üß™ Perform system update.
      description: |
        Start a system update with the given `update_id` parameter. Use `latest` to use the latest available system update.

        The system update will be started if:
        - the system update has been downloaded already (`download` state is `DOWNLOADED`).
        - the device has at least 50% battery charge.

        If the system update is started, the response message contains `state: START`. In case there's not enough battery,
        `503 service unavailable` is returned. 
        It is recommended to perform the update while the remote is charging in the docking station.

        The progress of the system update can be retrieved with the `get_system_update_progress` message, or by 
        listening to the `software_update` event messages.

        If the system update hasn't been downloaded yet (`download` state is `PENDING` or `ERROR`), this operation will only
        start the download and return `state: DOWNLOAD`. Once successfully downloaded, it can be installed by this
        request message again.
        
        The download process emits `software_update` progress event messages with `event_type: PROGRESS` and `state: DOWNLOAD`.
        The payload fields `download_bytes`, `download_percent` and `update_id` are set.  

        - A successful download is indicated with `download_percent: 100`, without the `download_bytes` field.
        - The state is set to `FAILURE` if a download fails.
        - Depending on download speed, `download_percent` might skip certain values or report the same value multiple times.
        - The famous last percent will take longer due to image validation.

        Example download progress events:    
        - Download progress event:
        ```json
        {
          "kind": "event",
          "msg": "software_update",
          "cat": "REMOTE",
          "ts": "2024-09-30T16:25:18.668395688Z",
          "msg_data": {
            "event_type": "PROGRESS",
            "progress": {
              "download_bytes": 256734720,
              "download_percent": 97,
              "state": "DOWNLOAD",
              "update_id": "some-id"
            },
            "update_id": "some-id"
          }
        }
        ```
        - Final success event:
        ```json
        {
          "kind": "event",
          "msg": "software_update",
          "cat": "REMOTE",
          "ts": "2024-09-30T16:25:34.229442566Z",
          "msg_data": {
            "event_type": "PROGRESS",
            "progress": {
              "download_percent": 100,
              "state": "DOWNLOAD",
              "update_id": "some-id"
            },
            "update_id": "some-id"
          }
        }
        ```
      payload:
        $ref: '#/components/schemas/updateSystemMsg'
      x-response:
        $ref: '#/components/messages/update_system_result'
    update_system_result:
      summary: üß™ System update response.
      description: |
        Returns the state of the system update request.
      payload:
        $ref: '#/components/schemas/updateSystemResultMsg'
    get_system_update_progress:
      summary: üß™ Get system update progress.
      description: |
        This is a manual request for the update progress if the system update event messages cannot be used.
      payload:
        $ref: '#/components/schemas/getSystemUpdateProgressMsg'
      x-response:
        $ref: '#/components/messages/system_update_progress'
    system_update_progress:
      summary: üß™ System update progress response.
      payload:
        $ref: '#/components/schemas/systemUpdateProgressMsg'

    get_power_mode:
      summary: üß™ Get current power mode and battery information.
      payload:
        $ref: '#/components/schemas/getPowerModeMsg'
      x-response:
        $ref: '#/components/messages/power_mode'
    power_mode:
      summary: üß™ Current power mode response.
      payload:
        $ref: '#/components/schemas/powerModeMsg'
    set_power_mode:
      summary: üß™ Change the current power mode.
      payload:
        $ref: '#/components/schemas/setPowerModeMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_battery_charger:
      summary: üë∑ Get battery charger information.
      description: |
        Device features:
        - `DOCK_CHARGING`: device can be charged in docking station (UCR2, UCR3).
        - `WIRELESS_CHARGING`: device has wireless charging support (UCR3).
      payload:
        $ref: '#/components/schemas/getBatteryChargerMsg'
      x-response:
        $ref: '#/components/messages/battery_charger'
    battery_charger:
      summary: üë∑ Battery charger response.
      payload:
        $ref: '#/components/schemas/batteryChargerMsg'
    update_battery_charger:
      summary: üë∑ Enable or disable wireless charging.
      payload:
        $ref: '#/components/schemas/updateBatteryChargerMsg'
      x-response:
        $ref: '#/components/messages/battery_charger'

    get_standby_inhibitors:
      summary: üß™ Get standby inhibitors.
      description: |
        Automatic system standby can be prevented with "standby inhibitors". For example during integration setup or as
        a user option for activities.

        There are two types of inhibitors:

        - Temporary inhibitors set a delay value for which the device doesn't go into standby. After the delay and the
          idle timeouts have expired, the remote goes into standby and the temporary inhibitor will be removed.
        - Blocking inhibitors will prevent the device to go into standby until the inhibitor is removed by the client.
        
        Note: temporary inhibitors will only be checked and removed during standby events. As long as the device is
        active, they may still appear in the result.
      payload:
        $ref: '#/components/schemas/getStandbyInhibitorsMsg'
      x-response:
        $ref: '#/components/messages/standby_inhibitors'
    standby_inhibitors:
      summary: üß™ Standby inhibitors response.
      payload:
        $ref: '#/components/schemas/inhibitorsMsg'
    create_standby_inhibitor:
      summary: üß™ Create a standby inhibitor.
      payload:
        $ref: '#/components/schemas/createStandbyInhibitorMsg'
      x-response:
        $ref: '#/components/messages/standby_inhibitor'
    standby_inhibitor:
      summary: üß™ Standby inhibitor response.
      payload:
        $ref: '#/components/schemas/inhibitorMsg'
    del_standby_inhibitor:
      summary: üß™ Remove a standby inhibitor.
      payload:
        $ref: '#/components/schemas/delStandbyInhibitorMsg'
      x-response:
        $ref: '#/components/messages/result'
    del_all_standby_inhibitors:
      summary: üß™ Remove all standby inhibitors.
      payload:
        $ref: '#/components/schemas/delAllStandbyInhibitorsMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_ambient_light:
      summary: üîç Get current ambient light intensity.
      payload:
        $ref: '#/components/schemas/getAmbientLightMsg'
      x-response:
        $ref: '#/components/messages/ambient_light'
    ambient_light:
      summary: üîç Current ambient light response.
      payload:
        $ref: '#/components/schemas/ambientLightMsg'

    reset_configuration:
      summary: üß™ Reset all settings to default values.
      payload:
        $ref: '#/components/schemas/resetConfigurationMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_configuration:
      summary: üß™ Get all system settings.
      payload:
        $ref: '#/components/schemas/getConfigurationMsg'
      x-response:
        $ref: '#/components/messages/configuration'
    configuration:
      summary: üß™ All system settings response.
      payload:
        $ref: '#/components/schemas/configurationMsg'

    get_button_cfg:
      summary: üß™ Get button settings.
      payload:
        $ref: '#/components/schemas/getButtonCfgMsg'
      x-response:
        $ref: '#/components/messages/button_cfg'
    set_button_cfg:
      summary: üß™ Modify button settings.
      payload:
        $ref: '#/components/schemas/setButtonCfgMsg'
      x-response:
        $ref: '#/components/messages/button_cfg'
    button_cfg:
      summary: üß™ Button settings response.
      description: |
        Button backlight configuration.

        Device features:
        - `BACKLIGHT`: buttons have backlight (UCR2, UCR3).  
        - `RGB_COLOR`: RGB color backlight support (UCR3).
        - `ZONES`: backlight can be controlled with individual zones (UCR3).

        ‚ö†Ô∏è Individual color per zone is not yet supported.
      payload:
        $ref: '#/components/schemas/buttonCfgMsg'

    get_device_cfg:
      summary: üß™ Get remote device settings.
      payload:
        $ref: '#/components/schemas/getDeviceCfgMsg'
      x-response:
        $ref: '#/components/messages/device_cfg'
    set_device_cfg:
      summary: üß™ Modify remote device settings.
      payload:
        $ref: '#/components/schemas/setDeviceCfgMsg'
      x-response:
        $ref: '#/components/messages/device_cfg'
    device_cfg:
      summary: üß™ Remote device settings response.
      payload:
        $ref: '#/components/schemas/deviceCfgMsg'

    get_display_cfg:
      summary: üß™ Get display settings.
      payload:
        $ref: '#/components/schemas/getDisplayCfgMsg'
      x-response:
        $ref: '#/components/messages/display_cfg'
    set_display_cfg:
      summary: üß™ Modify display settings.
      payload:
        $ref: '#/components/schemas/setDisplayCfgMsg'
      x-response:
        $ref: '#/components/messages/display_cfg'
    display_cfg:
      summary: üß™ Display settings response.
      payload:
        $ref: '#/components/schemas/displayCfgMsg'

    get_features_cfg:
      summary: üß™ Get feature flag settings.
      payload:
        $ref: '#/components/schemas/getFeaturesCfgMsg'
      x-response:
        $ref: '#/components/messages/features_cfg'
    set_features_cfg:
      summary: üß™ Modify a feature flag.
      payload:
        $ref: '#/components/schemas/setFeaturesCfgMsg'
      x-response:
        $ref: '#/components/messages/features_cfg'
    features_cfg:
      summary: üß™ Feature flag settings response.
      payload:
        $ref: '#/components/schemas/featuresCfgMsg'

    get_haptic_cfg:
      summary: üß™ Get haptic settings.
      payload:
        $ref: '#/components/schemas/getHapticCfgMsg'
      x-response:
        $ref: '#/components/messages/haptic_cfg'
    set_haptic_cfg:
      summary: üß™ Modify haptic settings.
      payload:
        $ref: '#/components/schemas/setHapticCfgMsg'
      x-response:
        $ref: '#/components/messages/haptic_cfg'
    haptic_cfg:
      summary: üß™ Haptic settings response.
      payload:
        $ref: '#/components/schemas/hapticCfgMsg'

    get_localization_cfg:
      summary: üß™ Get localization settings.
      payload:
        $ref: '#/components/schemas/getLocalizationCfgMsg'
      x-response:
        $ref: '#/components/messages/localization_cfg'
    set_localization_cfg:
      summary: üß™ Modify localization settings.
      payload:
        $ref: '#/components/schemas/setLocalizationCfgMsg'
      x-response:
        $ref: '#/components/messages/localization_cfg'
    localization_cfg:
      summary: üß™ Localization settings response.
      payload:
        $ref: '#/components/schemas/localizationCfgMsg'
    get_timezone_names:
      summary: üß™ Get all available time zone names.
      payload:
        $ref: '#/components/schemas/getTimezoneNamesMsg'
      x-response:
        $ref: '#/components/messages/timezone_names'
    timezone_names:
      summary: üß™ Available time zone names response.
      payload:
        $ref: '#/components/schemas/timezoneNamesMsg'
    get_localization_countries:
      summary: üß™ Get available countries for the localization configuration.
      payload:
        $ref: '#/components/schemas/getLocalizationCountriesMsg'
      x-response:
        $ref: '#/components/messages/localization_countries'
    localization_countries:
      summary: üß™ Available localization countries response.
      payload:
        $ref: '#/components/schemas/localizationCountriesMsg'
    get_localization_languages:
      summary: üß™ Get stored translations or request available translations from the UI.
      description: |
        The available translations are provided from the UI application.  
        Future UI versions might provide new or updated translations.

        If this request is sent to the UI application, the response is stored in the remote-core until new information
        is available from the UI.
        
        If this request is received, the stored configuration from the UI application is returned. E.g. the
        web-configurator requires the available translations.
      payload:
        $ref: '#/components/schemas/getLocalizationLanguagesMsg'
      x-response:
        $ref: '#/components/messages/localization_languages'
    localization_languages:
      summary: üß™ Available translations response.
      payload:
        $ref: '#/components/schemas/localizationLanguagesMsg'

    get_network_cfg:
      summary: üß™ Get network settings.
      payload:
        $ref: '#/components/schemas/getNetworkCfgMsg'
      x-response:
        $ref: '#/components/messages/network_cfg'
    set_network_cfg:
      summary: üîç Modify network settings.
      description: |
        Change one or multiple network settings.

        ‚ö†Ô∏è The `ws` configuration object is an expert setting intended for support issues. Those settings may not be
        exposed in a user frontend.
        - The `ws` object is only returned, after it has been set manually.
        - Settings stay persisted for PATCH requests not containing the `ws` key.
        - Return and apply current system settings: send a PATCH request with an empty object: `"ws": {}".
        - The `ws` settings can only be removed with a configuration reset: `DELETE /cfg`
        - Modifying any `ws` settings requires a system reboot.
      payload:
        $ref: '#/components/schemas/setNetworkCfgMsg'
      x-response:
        $ref: '#/components/messages/network_cfg'
    network_cfg:
      summary: üîç Network settings response.
      payload:
        $ref: '#/components/schemas/networkCfgMsg'

    get_software_update_cfg:
      summary: üß™ Get software update settings.
      payload:
        $ref: '#/components/schemas/getSoftwareUpdateCfgMsg'
      x-response:
        $ref: '#/components/messages/software_update_cfg'
    set_software_update_cfg:
      summary: üß™ Modify software update settings.
      description: |
        Change one or multiple software update settings.

        If `check_for_updates` is enabled:
        - the device automatically checks for new updates daily. The check happens during a random time within the 
          OTA window time frame `ota_window_start` - `ota_window_end`.
        - if a new update is available, the update metadata is immediately downloaded and the firmware update file is
          scheduled to download.
        - the firmware file will only download if the remote has at least 50% battery charge.
        - if the remote is not in the dock and suspended, the remote will not automatically wake up and the check
          will be skipped.

        If `auto_update` is enabled:
        - once the firmware file is downloaded it will be automatically installed in the next OTA check window.
        - the installation will only start if the remote has at least 50% battery charge.

        OTA window fields:
        - the stored values are used if omitted. 
        - default values are set if not configured.
        - the time of day corresponds to the configured timezone.
        - for changing the update window, both start and end times are required, otherwise a default will be used.
        - if the end time is before the start time, the window will spawn over midnight, e.g. `23:00:00` - `01:00:00`.

        Optional software update channel & token:
        - the default release channel is used if not configured.
        - the stored values are used if omitted. 
        - changing the update channel is intended for closed user groups only.  
          ‚ö†Ô∏è High chance of breaking changes, bugs and loosing data!
        - other channels than `default` might require an access token in `channel_token`.
        - ‚ö†Ô∏è Changing the update channel or token requires a device restart, otherwise the automated updates will not use
             the new channel!
      payload:
        $ref: '#/components/schemas/setSoftwareUpdateCfgMsg'
      x-response:
        $ref: '#/components/messages/software_update_cfg'
    reset_software_update_cfg:
      summary: üß™ Reset software update settings.
      description: |
        Set all software update settings to default values and use the default release update channel.
      payload:
        $ref: '#/components/schemas/resetSoftwareUpdateCfgMsg'
      x-response:
        $ref: '#/components/messages/software_update_cfg'
    software_update_cfg:
      summary: üß™ Software update settings response.
      payload:
        $ref: '#/components/schemas/softwareUpdateCfgMsg'

    get_power_saving_cfg:
      summary: üß™ Get power saving settings.
      payload:
        $ref: '#/components/schemas/getPowerSavingCfgMsg'
      x-response:
        $ref: '#/components/messages/power_saving_cfg'
    set_power_saving_cfg:
      summary: üß™ Modify power saving settings.
      payload:
        $ref: '#/components/schemas/setPowerSavingCfgMsg'
      x-response:
        $ref: '#/components/messages/power_saving_cfg'
    power_saving_cfg:
      summary: üß™ Power saving settings response.
      payload:
        $ref: '#/components/schemas/powerSavingCfgMsg'

    get_profile_cfg:
      summary: üß™ Get profile settings.
      payload:
        $ref: '#/components/schemas/getProfileCfgMsg'
      x-response:
        $ref: '#/components/messages/profile_cfg'
    set_profile_cfg:
      summary: üß™ Modify profile settings.
      payload:
        $ref: '#/components/schemas/setProfileCfgMsg'
      x-response:
        $ref: '#/components/messages/profile_cfg'
    profile_cfg:
      summary: üß™ Profile settings response.
      payload:
        $ref: '#/components/schemas/profileCfgMsg'

    get_sound_cfg:
      summary: üß™ Get sound settings.
      payload:
        $ref: '#/components/schemas/getSoundCfgMsg'
      x-response:
        $ref: '#/components/messages/sound_cfg'
    set_sound_cfg:
      summary: üß™ Modify sound settings.
      payload:
        $ref: '#/components/schemas/setSoundCfgMsg'
      x-response:
        $ref: '#/components/messages/sound_cfg'
    sound_cfg:
      summary: üß™ Sound settings response.
      payload:
        $ref: '#/components/schemas/soundCfgMsg'

    get_voice_control_cfg:
      summary: üîç Get voice control settings.
      payload:
        $ref: '#/components/schemas/getVoiceControlCfgMsg'
      x-response:
        $ref: '#/components/messages/voice_control_cfg'
    set_voice_control_cfg:
      summary: üîç Modify voice control settings.
      payload:
        $ref: '#/components/schemas/setVoiceControlCfgMsg'
      x-response:
        $ref: '#/components/messages/voice_control_cfg'
    voice_control_cfg:
      summary: üîç Voice control settings response.
      payload:
        $ref: '#/components/schemas/voiceControlCfgMsg'
    get_voice_assistants:
      summary: üöß Get available voice assistants.
      payload:
        $ref: '#/components/schemas/getVoiceAssistantsMsg'
      x-response:
        $ref: '#/components/messages/voice_assistants'
    voice_assistants:
      summary: üöß Voice assistants response.
      payload:
        $ref: '#/components/schemas/voiceAssistantsMsg'

    # --- Entity handling

    get_entity_types:
      summary: üß™ Retrieve supported entity types.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/getEntityTypesMsg'
      x-response:
        $ref: '#/components/messages/entity_types'
    entity_types:
      summary: üß™ List of supported entity types response.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/entityTypesMsg'
    get_entity:
      summary: üß™ Retrieve a configured entity.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/getEntityMsg'
      x-response:
        $ref: '#/components/messages/entity'
    get_entities:
      summary: üß™ Search and retrieve configured entities.
      description: |
        Returns all configured entities, optionally filtered by one or multiple entity types or integrations.
        
        The text search searches in the entity name, entity identifier and integration name.
        
        Attention: pagination is active and can be parameterized to return more items per page if required.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/getEntitiesMsg'
      x-response:
        $ref: '#/components/messages/entities'
    entities:
      summary: üß™ List of configured entities response.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/entitiesMsg'
    get_available_entities:
      summary: üß™ Retrieve the available entities provided by an integration.
      description: |
        ‚ö†Ô∏è At the moment it's only possible to retrieve available entities from one integration at a time.
        
        - **`filter.integration_id` must be specified!**
        - available entities can be filtered by one or multiple entity types.
        - the text search searches in the entity name, entity identifier and area.
        
        Attention: pagination is active and can be parameterized to return more items per page if required.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/getAvailableEntitiesMsg'
      x-response:
        $ref: '#/components/messages/available_entities'
    available_entities:
      summary: üß™ List of available entities response.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/availableEntitiesMsg'
    get_entity_commands:
      summary: üß™ Retrieve the available commands of an entity or entity type.
      description: |
        The commands can either be retrieved from a specific entity or from an entity type:
        - `entity_id`: only available commands for the given entity are returned. This depends on the entity's features.
        - `entity_type`: all commands for the given entity type are returned.
        
        The returned command identifiers are **not** the standard command identifiers like `on` or `off`, but _mapping_
        identifiers like `light.on` and `light.color_temperature` for the command structure information returned with
        `get_entity_command_metadata` or `GET /api/cfg/entity/commands`.  
        
        This then allows to build a full command request `execute_entity_command` message with or without parameters.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/getEntityCommandsMsg'
      x-response:
        $ref: '#/components/messages/entity_commands'
    entity_commands:
      summary: üß™ Available commands of an entity response.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/entityCommandsMsg'
    get_entity_command_metadata:
      summary: üîç Get entity command definitions.
      description: |
        Meta-information about the entity commands.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/getEntityCommandMetadataMsg'
      x-response:
        $ref: '#/components/messages/entity_command_metadata'
    entity_command_metadata:
      summary: üîç Entity command definitions.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/entityCommandMetadataMsg'

    execute_entity_command:
      summary: üß™ Execute an entity command.
      description: |
        Optional command data can be provided in attribute `params`.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/executeEntityCommandMsg'
      x-response:
        $ref: '#/components/messages/result'
    entity:
      summary: üß™ Entity information response.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/entityMsg'
    entity_change:
      summary: üß™ Entity change event.
      description: |
        Emitted if an entity has changed, a new entity has been added or a configured entity has been deleted.  
        
        If an entity state or dynamic attribute has changed (through notification of an integration driver), then only
        the `attributes` object is included within `new_state`. This happens after an `entity_command` or if the entity
        is updated manually through a user or an external system, e.g. if it has been switched off.
        
        If the entity definition has changed, e.g. the name, description or icon has been modified with the web
        configurator, the full entity data is included within `new_state`.
        
        If a complete integration is removed then only an `integration_change` event is sent, i.e. there won't be
        individual `entity_change` events for every removed entity!
        
        ‚ö†Ô∏è This event is also used to indicate the client to reload all entities. This is the case if only
        `event_type: change` is set and the `entity_id` field is missing.
      tags:
        - name: entity
        - name: event
      payload:
        $ref: '#/components/schemas/entityChangeEventMsg'
    activity_group_change:
      summary: üß™ Activity group change event.
      description: |
        Emitted if an activity group has changed, a new group has been added or a group has been deleted.  
        
        ‚ö†Ô∏è This event is also used to indicate the client to reload all activity groups. This is the case if only
        `event_type: change` is set and the `group_id` field is missing.
      tags:
        - name: entity
        - name: event
      payload:
        $ref: '#/components/schemas/activityGroupChangeEventMsg'
    update_entity:
      summary: üß™ Update an entity.
      description: |
        Update one or multiple properties of an entity.  

        The updated entity object is returned if the entity could be updated.  
        In case of an error the default `result` message is returned with an error code.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/updateEntityMsg'
      x-response:
        $ref: '#/components/messages/entity'
    delete_entity:
      summary: üß™ Remove a configured entity.
      description: |
        Delete the configured entity and remove it from all profile pages and groups.
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/deleteEntityMsg'
      x-response:
        $ref: '#/components/messages/result'
    delete_entities:
      summary: üß™ Remove configured entities.
      description: |
        Unloads and deletes multiple configured entities, either by integration identifier or by entity identifiers.
        If a deleted entity is still provided from an integration, it can be reused and will show up again as
        available entity from its integration.
        
        ‚ö†Ô∏è An empty request body array will delete all configured entities!
        
        All references to the configured entities will be removed from profile pages and groups.
        
        This is a best effort operation:
        - unknown entity identifiers are ignored, no error is returned

        Deleted entities will trigger an `entity_change` event with `event_type: DELETE`. If a large amount of entities
        are deleted, a single, generic `entity_change` event might be sent instead (without an `entity_id` field).
      tags:
        - name: entity
      payload:
        $ref: '#/components/schemas/deleteEntitiesMsg'
      x-response:
        $ref: '#/components/messages/result'

    # --- Dock handling

    get_dock_count:
      summary: üß™ Get total number of configured docks.
      description: |
        By default only active docks are counted. This can be changed with the `active` query parameter.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/getDockCountMsg'
      x-response:
        $ref: '#/components/messages/dock_count'
    dock_count:
      summary: üß™ Total number of configured docks response.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockCountMsg'
    get_docks:
      summary: üß™ List configured docks and their connection state.
      description: |
        Returns all dock configuration with paging. The configuration data is enriched with current connection information.
        Use the `get_dock_count` operation to retrieve the total number of defined docking stations.

        By default only active docks are returned. This can be changed with the `active` query parameter.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/getDocksMsg'
      x-response:
        $ref: '#/components/messages/docks'
    docks:
      summary: üß™ Configured docks and their connection state response.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/docksMsg'
    create_dock:
      summary: üß™ Create a new dock configuration.
      description: |
        Manually create and persist a new dock configuration. This is a low-level operation without configuring and setting
        up the dock as with the `setup` operations! To establish a session to the dock, the connect operation must be
        called afterwards.  
        - Error `422` is returned if the given service name in `dock_id` already exists.
        - If `custom_ws_url` is not specified, the dock address is resolved through an mDNS service name lookup in `dock_id`.   
        - The `active` flag specifies if the dock will react to connection requests.
        - Non-active docks will not auto-connect and must be enabled first to be used.
        - Non-active docks won't be visible in the web-configurator.
        - If no `token` is provided the default token is used! The token is used to authenticate the WebSocket
          connection once a connection to the dock is established.
        - If `model` is provided it must be one of the known dock model identifiers: `UCD2` or `YIO1DOCK`.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/createDockMsg'
      x-response:
        $ref: '#/components/messages/dock'
    dock:
      summary: üß™ Configured dock response.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockMsg'
    delete_all_docks:
      summary: üß™ Delete all dock configurations.
      description: |
        ‚ö†Ô∏è All defined dock configurations will be irrevocably deleted!

        Active dock sessions will be disconnected and the persisted dock configurations removed.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/deleteAllDocksMsg'
      x-response:
        $ref: '#/components/messages/result'
    get_dock:
      summary: üß™ Get dock configuration.
      description: |
        Returns the dock configuration, enriched with the current session information if a dock connection is established.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/getDockMsg'
      x-response:
        $ref: '#/components/messages/dock'
    update_dock:
      summary: üß™ Change dock configuration like auto-connect or access token.
      description: |
        Update one or more dock fields.

        - If the dock is in an `active` connection state, then the `name`, `token` and `wifi` values are persisted in the
          dock if provided in the request. The request fails with `503` service unavailable if the configuration can't be
          set in the docking station.
        - An empty `custom_ws_url` value will remove the custom URL.
        - If the dock is not active, the values are only stored in the remote. A changed `token` will be used for the next
          connection attempt.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/updateDockMsg'
      x-response:
        $ref: '#/components/messages/dock'
    dock_connection_command:
      summary: üß™ Start or stop a dock connection.
      description: |
        Establish or stop a session to a specific or all active docks.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockConnectionCommandMsg'
      x-response:
        $ref: '#/components/messages/result'
    delete_dock:
      summary: üß™ Delete dock configuration.
      description: |
        ‚ö†Ô∏è The dock configuration will be irrevocably deleted!

        An active dock session will be disconnected and the persisted dock configuration removed.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/deleteDockMsg'
      x-response:
        $ref: '#/components/messages/result'
    dock_command:
      summary: üß™ Send a dock command.
      description: |
        The following `command` values are defined:
        - `SET_LED_BRIGHTNESS`: set the maximum brightness of the front indicator LED. Set the `0..100` percentage as
           string parameter in the `value` field.
        - `SET_VOLUME`: 3Ô∏è‚É£ set the speaker volume. Set the `0..100` percentage as string parameter in the `value` field.
        - `IDENTIFY`: identify the dock with blinking the indicator LED.
        - `REMOTE_LOW_BATTERY`: trigger the low battery status indicator on the dock.
        - `REMOTE_CHARGED`: trigger the remote charged indicator on the dock.
        - `REMOTE_NORMAL`: trigger the normal remote operation mode on the dock.
        - `REBOOT`: reboot the dock.
        - `RESET`: ‚ö†Ô∏è factory reset the dock. Requires administrator privileges.  
           The dock configuration will be deleted from the remote.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockCommandMsg'
      x-response:
        $ref: '#/components/messages/result'
    get_dock_discovery_status:
      summary: üß™ Get docking station discovery status.
      description: |
        Returns the current discovery status and any discovered docks.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/getDockDiscoveryStatusMsg'
      x-response:
        $ref: '#/components/messages/dock_discovery_status'
    dock_discovery_status:
      summary: üß™ Docking station discovery status response.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockDiscoveryStatusMsg'
    start_dock_discovery:
      summary: üß™ Start discovery of new docking stations.
      description: |
        Start device discovery over Bluetooth and mDNS. Bluetooth or network discovery can be disabled with a query
        parameter. By default the discovery automatically stops after 30 seconds. Use the `get_dock_discovery_status`
        status request to check on discovered devices or `stop_dock_discovery` to stop discovery.

        By default only new network devices are returned. If a dock is already configured it will be omitted from the
        results, unless the query parameter `new=false` is set. Docks with Bluetooth enabled are always returned, since
        this usually means that the dock needs to be re-configured.

        - If BT is disabled in the remote, the `bt` parameter is ignored.
        - Emits the WebSocket event `dock_discovery` with `event_type: START` when discovery starts.
        - For each discovered device the WebSocket event `dock_discovery` with `event_type: DISCOVER` is emitted.
        - This operation clears any old discovered devices and won't be accessible anymore with the GET operation.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/startDockDiscoveryMsg'
      x-response:
        $ref: '#/components/messages/result'
    stop_dock_discovery:
      summary: üß™ Stop discovery of new docking stations.
      description: |
        Stops the device discovery. The current discovery status is returned in the response. Already discovered devices
        won't be returned and can still be retrieved with the `get_dock_discovery_status` operation.

        Emits the WebSocket event `dock_discovery` with `event_type: STOP`.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/stopDockDiscoveryMsg'
      x-response:
        $ref: '#/components/messages/dock_discovery_status'
    get_dock_discovery_device:
      summary: üß™ Get docking station discovery device status.
      description: |
        Returns the discovered docking station device.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/getDockDiscoveryDeviceMsg'
      x-response:
        $ref: '#/components/messages/dock_discovery_device'
    dock_discovery_device:
      summary: üß™ Docking station discovery device status response.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockDiscoveryDeviceMsg'
    exec_cmd_on_discovered_dock:
      summary: üß™ Execute command on a discovered docking station.
      description: |
        Perform a WebSocket connection test with a discovered docking station. If the dock requires an API token, it must
        be specified in the request body.  
        The `IDENTIFY` command also blinks the status LED on the dock.

        Response status codes:
        - `200`: successful operation: the connection test was successful and docking station metadata could be retrieved.
        - `404`: discovered dock with `dock_id` not found. Check if the discovery result is still available and has not
                 been deleted. This can happen after a timeout since the discovery, or if the discovery result has been
                 cleared with `DELETE /docks/discover`.
        - `503`: docking station connection could not be established.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/execCmdOnDiscoveredDockMsg'
      x-response:
        $ref: '#/components/messages/dock_system_info'
    dock_system_info:
      summary: üß™ Dock system information response.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockSystemInfoMsg'
    get_dock_setup_processes:
      summary: üß™ Get current dock setup processes.
      description: |
        Return a list of all active setup process identifiers.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/getDockSetupProcessesMsg'
      x-response:
        $ref: '#/components/messages/dock_setup_processes'
    dock_setup_processes:
      summary: üß™ Current dock setup processes response.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockSetupProcessesMsg'
    create_dock_setup:
      summary: üß™ Start setting up a new docking station.
      description: |
        Create a new setup process from a discovered dock or from a manually provided dock address.

        - If there's already a setup process running for the given dock id, status code `409` is returned.
        - Emits the WebSocket event `dock_setup_change` with `event_type: START` when this operation returns `201`.

        Start setup from dock discovery:
        - The required request data can be obtained from the `/api/docks/discover` endpoints when searching for docking
          stations over Bluetooth or Ethernet. Simply provide the returned `DockDiscovery` data object (which is a super
          set of the required data to start a setup process).
        - The returned `id` in the `DockSetupInfo` response will be the identifier for the next `PUT /docks/setup/:id`
          call to provide additional data.

        Manual setup:
        - A dock identifier will automatically be created and returned in `DockSetupInfo`.
        - The dock must be reachable on the network with the provided `custom_ws_url` and optional `token`. Otherwise,
          status code `503` is returned.
        - The setup process is automatically started after a successful POST request, no call to `PUT /docks/setup/:id`
          is required.

        Response status codes:
        - `201`: setup process successfully started. Use `GET /docks/setup/:id` to poll for status updates, or listen to
           WebSocket `dock_setup_change` event messages.
        - `400`: invalid data in request body.
        - `409`: a setup process is already running. Either wait until finished, or abort it.
        - `503`: service not available to setup docking station.  
           E.g. Bluetooth is disabled and therefore the docking station cannot be setup over Bluetooth. Either enable
           Bluetooth or setup the dock over Ethernet.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/createDockSetupMsg'
      x-response:
        $ref: '#/components/messages/dock_setup_status'
    dock_setup_status:
      summary: üß™ Dock setup information response.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/dockSetupStatusMsg'
    stop_all_dock_setups:
      summary: üß™ Abort and remove all setup processes.
      description: |
        Stop all setup processes at the next possible operation and remove all setup process information.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/stopAllDockSetupsMsg'
      x-response:
        $ref: '#/components/messages/result'
    get_dock_setup_status:
      summary: üß™ Get docking station setup status.
      description: |
        Poll operation to retrieve the current docking station setup state. See the `state` and `error` fields in the
        response message. There are also WebSocket `dock_setup_change` event messages for state changes to avoid polling.

        Defined setup states:
        - `NEW`: setup has not yet been started. Use the `PUT` operation to provide the required data and to start setting up the dock.
        - `CONFIGURING`: setup data is currently being transferred to the dock.
        - `RESTARTING`: dock has been configured and is restarting to integrate into the network.
        - `OK`: setup process has been completed successfully, the dock can now be used.
        - `ERROR`: the setup process failed. Check the `error` field for more information.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/getDockSetupStatusMsg'
      x-response:
        $ref: '#/components/messages/dock_setup_status'
    start_dock_setup:
      summary: üß™ Setup docking station.
      description: |
        Set required data to start the setup process and configure the docking station.
        When using Bluetooth the WiFi network name and credentials must be provided to connect the dock to the WiFi network.

        The `state` field in the response message indicate the current state of the setup process. Use the `GET` operation
        to poll for state updates or listen to the corresponding WebSocket `dock_setup_change` event messages with
        `event_type: SETUP`.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/startDockSetupMsg'
      x-response:
        $ref: '#/components/messages/dock_setup_status'
    stop_dock_setup:
      summary: üß™ Abort the dock setup process.
      description: |
        Stop the setup process at the next possible operation and remove the setup process information.  
        To start a new setup process, use the `POST /docks/setup` operation again.
        
        Emits the WebSocket event `dock_setup_change` with `event_type: STOP`.
      tags:
        - name: dock
      payload:
        $ref: '#/components/schemas/stopDockSetupMsg'
      x-response:
        $ref: '#/components/messages/result'

    # --- WiFi handling

    get_wifi_status:
      summary: üß™ Get WiFi status.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiGetStatusMsg'
      x-response:
        $ref: '#/components/messages/wifi_status'
    wifi_status:
      summary: üß™ WiFi status.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiStatusMsg'

    wifi_command:
      summary: üß™ WiFi connection handling.
      description: |
        Perform one of the following commands on the WLAN interface:

        - `DISCONNECT`: Disconnect and wait for `REASSOCIATE` or `RECONNECT` command before connecting again.
        - `RECONNECT`: Connect if disconnected (i.e. like `REASSOCIATE`, but only connect if in disconnected state).
        - `REASSOCIATE`: Force reassociation.
        - `ENABLE_ALL_NETWORKS`: Enable all network connections and start connecting to a network if in disconnected state.
        - `DISABLE_ALL_NETWORKS`: Disable all network connections and disconnect if in connected state.

        ‚ö†Ô∏èAttention: `ENABLE_ALL_NETWORKS` and `DISABLE_ALL_NETWORKS` will persist the state! I.e. if all networks are 
        disabled and the device is restarted afterwards, no WiFi connection will be established.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiCommandMsg'
      x-response:
        $ref: '#/components/messages/result'

    wifi_scan_start:
      summary: üß™ Start discovery of WiFi access points.
      description: |
        Request a new BSS scan. A scan usually takes a few seconds and the current state is returned with the
        `get_wifi_scan_status` operation, together with the already found access points.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiScanStartMsg'
      x-response:
        $ref: '#/components/messages/result'

    wifi_scan_stop:
      summary: üß™ Stop discovery of WiFi access points.
      description: |
        Stops the access point discovery. The current discovery status is returned in the response.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiScanStopMsg'
      x-response:
        $ref: '#/components/messages/wifi_scan_status'

    get_wifi_scan_status:
      summary: üß™ Get discovered WiFi access points.
      description: |
        Returns the current discovery status and any discovered access points.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiGetScanStatusMsg'
      x-response:
        $ref: '#/components/messages/wifi_scan_status'
    wifi_scan_status:
      summary: üß™ Discovered WiFi access points.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiScanStatusMsg'

    get_all_wifi_networks:
      summary: üß™ Get configured WiFi networks.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiGetAllNetworksMsg'
      x-response:
        $ref: '#/components/messages/wifi_networks'
    wifi_networks:
      summary: üß™ Configured WiFi networks.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiNetworksMsg'

    add_wifi_network:
      summary: üß™ Create a new WiFi network configuration.
      description: |
        Add a new network configuration for the given SSID.  
        For an open network without password the `password` field must be omitted (do not send an empty password value).

        ‚ö†Ô∏è Only WPA-PSK (pre shared keys) and open networks are supported!
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiAddNetworkMsg'
      x-response:
        $ref: '#/components/messages/wifi_network'

    del_all_wifi_networks:
      summary: üß™ Delete all configured WiFi networks.
      description: |
        Disconnects the WiFi network and removes all network configurations.

        ‚ö†Ô∏è Attention: the network configuration is automatically persisted and the network configuration cannot
        be retrieved anymore!
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiDelAllNetworksMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_wifi_network:
      summary: üß™ Get WiFi network configuration.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiGetNetworkMsg'
      x-response:
        $ref: '#/components/messages/wifi_network'
    wifi_network:
      summary: üß™ WiFi network configuration.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiNetworkMsg'

    update_wifi_network:
      summary: üß™ Change WiFi network configuration.
      description: |
        Set a new WiFi network password.
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiUpdateNetworkMsg'
      x-response:
        $ref: '#/components/messages/result'

    wifi_network_command:
      summary: üß™WiFi network connection handling.
      description: |
        Perform one of the following commands on a network configuration:
        - `ENABLE`: Enable a network. If no network is connected, it will be tried to connect to this network.
        - `DISABLE`: Disable a network. If the network is currently connected it will be disconnected.
        - `SELECT`: Select the given network and disable all others.

        ‚ö†Ô∏è Attention: all network changes (enabled or disabled) are persisted!
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiNetworkCommandMsg'
      x-response:
        $ref: '#/components/messages/result'

    del_wifi_network:
      summary: üß™ Delete a configured WiFi network.
      description: |
        The given network is removed from the configuration and disconnected if currently connected.

        ‚ö†Ô∏è Attention: the network configuration is automatically persisted and the removed network configuration cannot
        be retrieved anymore!
      tags:
        - name: wifi
      payload:
        $ref: '#/components/schemas/wifiDelNetworkMsg'
      x-response:
        $ref: '#/components/messages/result'

    wifi_change:
      summary: üß™ WiFi change event.
      description: |
        Emitted if the WiFi status changed, e.g. connected or disconnected to an access point, or if a WiFi network
        scan finished.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/wifiChangeEventMsg'

    # --- BT handling
    bt_pairing_started:
      summary: üîç Inform user that pairing has started.
      description: |
        Emitted if a central started pairing with the Remote.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/btPairingStartedEventMsg'

    bt_pairing_auth_request:
      summary: üîç Request pairing authorization from the user.
      description: |
        Depending on authentication requirements, IO capabilities, etc. a different type of authentication is requested.
        The client must respond with the `bt_pairing_response` event.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/btPairingAuthRequestEventMsg'

    bt_pairing_complete:
      summary: üîç Bonding process has finished.
      description: |
        This event is emitted after the bonding process, either with a success state or an error code if bonding failed.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/btPairingCompleteEventMsg'

    bt_pairing_response:
      summary: üîç Action to bt_pairing_auth_request event.
      description: |
        This request needs to be sent for a bt_pairing_auth_request event:
        - `Passkey` request: either provide the passkey entered by the user, or decline it with `confirm: false`.
        - `NumericComparison` request: confirm or decline with `confirm: true | false`.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/btPairingResponseMsg'
      x-response:
        $ref: '#/components/messages/result'

    # --- Profile handling

    get_profiles:
      summary: üß™ Retrieve all profiles.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/getProfilesMsg'
      x-response:
        $ref: '#/components/messages/profiles'
    profiles:
      summary: üß™ List of available profiles response.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/profilesMsg'
    get_profile:
      summary: üß™ Retrieve the specified profile.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/getProfileMsg'
      x-response:
        $ref: '#/components/messages/profile'
    profile:
      summary: üß™ Profile data response.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/profileMsg'
    get_active_profile:
      summary: üß™ Retrieve the active profile.
      description: |
        If no profile exists, or no profile is set active, 404 is returned.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/getActiveProfileMsg'
      x-response:
        $ref: '#/components/messages/profile'
    switch_profile:
      summary: üß™ Switch active profile.
      description: |
        The administrator PIN in `admin_pin` is required to switch from a restricted to a normal profile.
        If the current profile is a restricted profile and the pin is missing, error `401` is returned.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/switchProfileMsg'
      x-response:
        $ref: '#/components/messages/result'
    add_profile:
      summary: üß™ Add a new profile.
      description: |
        There are two different types of profiles:

        - Normal profile (default): can do anything, change settings, add pages, entities, integrations, etc.
        - Restricted profile: intended for guests or children, who can only use the remote, but cannot change settings.
        
        The admin PIN is required to switch from a restricted to a normal profile. It can be defined in settings.
        
        - Switching away from a restricted profile will prompt the user to enter the admin PIN.
        - Switching to a restricted profile can be done without entering the admin PIN.
        
        Profile request object:
        
        - `profile_id` is optional and auto-generated if not specified. Otherwise it needs to be a unique profile identifier.
        - `name` is mandatory and must be unique.
        - if the first profile is added, it is automatically set as the active profile.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/addProfileMsg'
      x-response:
        $ref: '#/components/messages/result'
    update_profile:
      summary: üß™ Update a profile.
      description: |
        Update one or multiple properties of a profile. A missing property will not update its current value.  
        - `profile_id` is mandatory and can't be changed.
        - an empty `icon` value removes an existing icon identifier.
        - a missing `pages` property will not change the page order.
        - ‚ö†Ô∏è an empty `pages` array removes all pages and groups in the profile!
        - ‚ö†Ô∏è missing page identifiers in the `pages` array will remove the page configuration!
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/updateProfileMsg'
      x-response:
        $ref: '#/components/messages/profile'
    delete_profile:
      summary: üß™ Delete the specified profile.
      description: All profile related pages and groups are also deleted.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/deleteProfileMsg'
      x-response:
        $ref: '#/components/messages/result'
    delete_all_profiles:
      summary: üß™ Delete all profiles.
      description: This also deletes all pages and groups.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/deleteAllProfilesMsg'
      x-response:
        $ref: '#/components/messages/result'

    active_profile_change:
      summary: üß™ Active profile change event.
      description: |
        Emitted if the active profile changed.
      tags:
        - name: profile
        - name: event
      payload:
        $ref: '#/components/schemas/activeProfileChangeEventMsg'

    profile_change:
      summary: üß™ Profile change event.
      description: |
        Emitted if a profile configuration, related profile page or group has been changed, added or deleted.
      tags:
        - name: profile
        - name: event
      payload:
        $ref: '#/components/schemas/profileChangeEventMsg'

    # --- page handling

    get_pages:
      summary: üß™ Retrieve all UI pages of a profile.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/getPagesMsg'
      x-response:
        $ref: '#/components/messages/pages'
    pages:
      summary: üß™ List of defined UI pages response.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/pagesMsg'
    get_page:
      summary: üß™ Retrieve the specified UI page.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/getPageMsg'
      x-response:
        $ref: '#/components/messages/page'
    page:
      summary: üß™ UI page data response.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/pageMsg'
    add_page:
      summary: üß™ Create a new UI page and add to profile.
      tags:
        - name: profile
      description: |
        - `profile_id` is mandatory.
        - `page_id` is not required and is created automatically.
        - `name` is mandatory and must be unique within the profile.
      payload:
        $ref: '#/components/schemas/addPageMsg'
      x-response:
        $ref: '#/components/messages/result'
    update_page:
      summary: üß™ Update a UI page.
      tags:
        - name: profile
      description: |
        - `profile_id` and `page_id` are mandatory.
      payload:
        $ref: '#/components/schemas/updatePageMsg'
      x-response:
        $ref: '#/components/messages/page'
    delete_page:
      summary: üß™ Delete a UI page.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/deletePageMsg'
      x-response:
        $ref: '#/components/messages/result'
    delete_pages_in_profile:
      summary: üß™ Delete all pages of a profile
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/deletePagesInProfileMsg'
      x-response:
        $ref: '#/components/messages/result'

    # --- group handling

    get_groups:
      summary: üß™ Retrieve all UI groups of a profile.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/getGroupsMsg'
      x-response:
        $ref: '#/components/messages/groups'
    groups:
      summary: üß™ List of defined UI groups response.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/groupsMsg'
    get_group:
      summary: üß™ Retrieve the specified UI group.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/getGroupMsg'
      x-response:
        $ref: '#/components/messages/group'
    group:
      summary: üß™ UI group data response.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/groupMsg'
    add_group:
      summary: üß™ Create a new UI group and add to profile.
      description: |
        - `profile_id` is mandatory.
        - `group_id` is not required and is created automatically.
        - `name` is mandatory and must be unique within the profile.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/addGroupMsg'
      x-response:
        $ref: '#/components/messages/result'
    update_group:
      summary: üß™ Update a UI group.
      description: |
        - `profile_id` and `group_id` are mandatory.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/updateGroupMsg'
      x-response:
        $ref: '#/components/messages/group'
    delete_group:
      summary: üß™ Delete a UI group.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/deleteGroupMsg'
      x-response:
        $ref: '#/components/messages/result'
    delete_groups_in_profile:
      summary: üß™ Delete all groups in a profile.
      tags:
        - name: profile
      payload:
        $ref: '#/components/schemas/deleteGroupsInProfileMsg'
      x-response:
        $ref: '#/components/messages/result'

    # --- integration handling

    get_integration_status:
      summary: üß™ Retrieve an overview of the integration instances and their current connection state.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationStatusMsg'
      x-response:
        $ref: '#/components/messages/integration_status'
    integration_status:
      summary: üß™ Summary information of the integration instances.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationStatusMsg'

    integration_cmd:
      summary: üß™ Execute an integration command.
      description: |
        Connect or disconnect integration instances.
        
        If `integration_id` is specified, then the command only applies to the given integration, otherwise to all
        integration instances.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationCmdMsg'
      x-response:
        $ref: '#/components/messages/result'

    integration_driver_cmd:
      summary: üß™ Execute an integration driver command.
      description: |
        Start or stop integration drivers.
        
        If `driver_id` is specified, then the command only applies to the given driver, otherwise to all
        integration drivers.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationDriverCmdMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_integration_driver_count:
      summary: üß™ Get total number of registered integration drivers.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationDriverCountMsg'
      x-response:
        $ref: '#/components/messages/integration_driver_count'
    integration_driver_count:
      summary: üß™ Total number of registered integration drivers response.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationDriverCountMsg'

    get_integration_drivers:
      summary: üß™ Retrieve all registered integration drivers.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationDriversMsg'
      x-response:
        $ref: '#/components/messages/integration_drivers'
    integration_drivers:
      summary: üß™ List of registered integration drivers response.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationDriversMsg'

    register_integration_driver:
      summary: üß™ Register a new integration driver.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/registerIntegrationDriverMsg'
      x-response:
        $ref: '#/components/messages/integration_driver'

    get_integration_driver:
      summary: üß™ Retrieve detail information of an integration driver.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationDriverMsg'
      x-response:
        $ref: '#/components/messages/integration_driver'
    integration_driver:
      summary: üß™ Detail information of an integration driver response.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationDriverMsg'

    update_integration_driver:
      summary: üß™ Modify a configured integration driver.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/updateIntegrationDriverMsg'
      x-response:
        $ref: '#/components/messages/integration_driver'

    delete_integration_driver:
      summary: üß™ Remove an integration driver.
      description: |
        Unloads and deletes an integration driver with all instances and provided entities.
        
        **Attention: all references to the integration driver will be removed! This includes all driver instances,
        provided entities and their references in profile pages and groups.**
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/deleteIntegrationDriverMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_integration_count:
      summary: üß™ Get total number of integration instances.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationCountMsg'
      x-response:
        $ref: '#/components/messages/integration_driver_count'
    integration_count:
      summary: üß™ Total number of integration instances response.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationCountMsg'

    get_integrations:
      summary: üß™ Retrieve all loaded integrations.
      description: |
        Returns all integration instances, optionally filtered by `type` or `enabled` state.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationsMsg'
      x-response:
        $ref: '#/components/messages/integrations'
    integrations:
      summary: üß™ List of loaded integrations response.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationsMsg'

    create_integration:
      summary: üß™ Create a new integration instance from driver.
      description: |
        Create an integration driver instance and associate it with the driver.
        For simple integration drivers there's a 1:1 relationship only between an instance and driver.
        For multi-device drivers, each device corresponds to an integration instance.
        
        - the `integration_id` is automatically created by the system to make it unique over all integrations.
        - for multi-device drivers the `device_id` must be specified and may not already exist in another instance of the
          same driver.
        - the driver's name is used by default if `name` isn't specified.
        - the instance is active by default if `enabled` isn't specified.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/createIntegrationMsg'
      x-response:
        $ref: '#/components/messages/integration'
    integration:
      summary: üß™ Integration instance information response.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationMsg'

    get_integration:
      summary: üß™ Get an integration instance.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationMsg'
      x-response:
        $ref: '#/components/messages/integration'

    update_integration:
      summary: üß™ Modify a configured integration instance.
      description: |
        Modify one or several properties of an integration instance.  
        See update model description on how to update or delete an existing property.
        
        The integration driver of an instance cannot be changed and will be ignored if provided in the request.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/updateIntegrationMsg'
      x-response:
        $ref: '#/components/messages/integration'

    delete_integration:
      summary: üß™ Remove an integration instance.
      description: |
        Unloads and deletes an integration instance.
        
        **Attention: all references to the integration instance will be removed! This includes configured entities and 
        their references in profile pages and groups.**
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/deleteIntegrationMsg'
      x-response:
        $ref: '#/components/messages/result'

    configure_entity_from_integration:
      summary: üß™ Configure an available entity.
      description: |
        Configure a new UC Remote entity from an available integration entity. Once configured, the entity will no
        longer show up as available entity (unless the `all` filter is set).
        
        The entity `name`, `icon` and `description` fields may be changed. If not specified in the request the values from
        the available entity are used.
        
        In case of an error the default `result` message is returned with an error code.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/configureEntityFromIntegrationMsg'
      x-response:
        $ref: '#/components/messages/entity'

    configure_entities_from_integration:
      summary: üß™ Configure multiple available entities.
      description: |
        Configure multiple new UC Remote entities from available integration entities. Once configured, the entities will
        no longer show up as an available entity (unless the `filter=ALL` query parameter is set).
        
        If `entity_ids` is not provided or is empty, all entities from the integration are configured.
        
        Use message `configure_entity_from_integration` to configure a single entity and optionally rename it
        or change its icon.
        
        This is a best effort operation:
        - if an entity is already configured, it is ignored and not returned in the response.
        - unknown entity identifiers are ignored, no error is returned.

        Every newly configured entity will trigger an `entity_change` event.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/configureEntitiesFromIntegrationMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_integration_discovery_status:
      summary: üß™ Get external integration driver discovery status.
      description: |
        Returns the current discovery status and the discovered integration drivers.
        
        Use `start_integration_discovery` to clear old results and start a new discovery.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationDiscoveryStatusMsg'
      x-response:
        $ref: '#/components/messages/integration_discovery_status'
    integration_discovery_status:
      summary: üß™ External integration driver discovery status response.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationDiscoveryStatusMsg'

    start_integration_discovery:
      summary: üß™ Start discovery of external integration drivers.
      description: |
        Start integration driver discovery on the network with mDNS. By default the discovery automatically stops after
        30 seconds. Use the `get_integration_discovery_status` request to check on discovered devices or
        `stop_integration_discovery` to stop discovery.

        By default only new integration drivers are returned. If a driver is already configured it will be omitted from the
        results, unless the query parameter `new=false` is set.

        - Previously discovered integrations are removed, only newly discovered integrations will be returned.
        - Emits the WebSocket event `integration_discovery` with `event_type: START` when discovery starts.
        - For each discovered driver the WebSocket event `integration_discovery` with `event_type: DISCOVER` is emitted.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/startIntegrationDiscoveryMsg'
      x-response:
        $ref: '#/components/messages/result'

    stop_integration_discovery:
      summary: üß™ Stop discovery of external integration drivers.
      description: |
        Stops the driver discovery and returns the current discovery status in the response.

        Emits the WebSocket event `integration_discovery` with `event_type: STOP`.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/stopIntegrationDiscoveryMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_discovered_integration_driver:
      summary: üß™ Get integration driver discovery information.
      description: |
        Returns the discovered integration driver.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getDiscoveredIntegrationDriverMsg'
      x-response:
        $ref: '#/components/messages/discovered_integration_driver'
    discovered_integration_driver:
      summary: üß™ Integration driver discovery information.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/discoveredIntegrationDriverMsg'

    get_discovered_intg_driver_metadata:
      summary: üë∑ Execute connection test and fetch metadata from discovered integration driver.
      description: |
        Perform a driver connection test with a discovered driver. If the driver requires a token, it must be specified in
        the request data.

        Response status codes:
        - `200`: successful operation: the connection test was successful and driver metadata could be retrieved.
        - `404`: discovered driver with `driver_id` not found. Check if the discovery result is still available and has not
                 been deleted. This can happen after a timeout since the discovery, or if the discovery result has been
                 cleared with starting a new discovery.
        - `503`: integration driver connection could not be established.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getDiscoveredIntgDriverMetadataMsg'
      x-response:
        $ref: '#/components/messages/integration_driver'

    configure_discovered_integration_driver:
      summary: üß™ Register a discovered integration driver.
      description: |
        Register a discovered integration driver:
        - establish communication with the driver.
          - if the driver requires a password, it must be provided in the request.
          - the discovered driver name and url can be overridden.
        - fetch metadata from the driver.
        - check compatability.
        - register the driver and connection parameters in the remote.

        After a successful registration the setup process of the driver can be started to configure the integration.
        The required setup data is described in the returned `setup_data_schema` and the provided values by the user must
        be passed to the `setup_integration` request.

        Response status codes:
        - `400`: invalid data in request body.
        - `404`: no discovered driver found for given `driver_id`.
        - `409`: integration driver is already registered.
        - `503`: integration driver communication error. Either driver is not reachable or communication failed.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/configureDiscoveredIntegrationDriverMsg'
      x-response:
        $ref: '#/components/messages/integration_driver'

    get_integration_setup_processes:
      summary: üß™ Get current integration setup processes.
      description: |
        Return a list of all active setup process identifiers. The returned ids can be used with the
        `set_integration_user_data` and `stop_integration_setup` messages to continue or abort a setup process.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationSetupProcessesMsg'
      x-response:
        $ref: '#/components/messages/integration_setup_processes'
    integration_setup_processes:
      summary: üß™ Current integration setup processes response.
      description: |
        Return a list of all active setup process identifiers.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationSetupProcessesMsg'

    setup_integration:
      summary: üß™ Start setting up a new integration driver.
      description: |
        Start a new setup process for the given integration driver and provided setup data, or reconfigure an existing
        driver.

        - This operation immediately starts the driver communication and setup process.
        - There may only be one active setup process per driver, otherwise status code `409` is returned.

        The returned `id` in the `IntegrationSetupInfo` response will be the identifier for the further setup operations
        with the `set_integration_user_data` and `stop_integration_setup` requests. Once the setup process is
        successfully finished, an integration instance is created. A setup process can be simple and fully automatic,
        but may also require user interaction and further communication with the `set_integration_user_data` message.

        Emits the WebSocket event `integration_setup_change` with `event_type: START`.

        Request body:
        - `name`: optional integration name. If not specified the name of the integration driver is used.
        - `setup_data`: optional driver setting values corresponding to the driver's `setup_data_schema` object.
        - `reconfigure`: set to true to reconfigure an already configured driver. The configuration options and behaviour
          is driver dependent.

        Response status codes:
        - `400`: invalid data in request body. E.g. setting the reconfigure flag for a new driver which is not yet configured.
        - `404`: specified `driver_id` in request body does not exist.
        - `409`: a setup process for the given `driver_id` already exists. Either continue or abort existing process.
        - `422`: the setup process cannot be used: either the integration is already configured or doesn't allow to be
                 set up again.  
        - `503`: integration driver communication error. Either driver is not reachable or communication failed.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/setupIntegrationMsg'
      x-response:
        $ref: '#/components/messages/integration_setup_info'
    integration_setup_info:
      summary: üß™ Integration setup information response.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/integrationSetupInfoMsg'

    stop_all_integration_setups:
      summary: üß™ Abort and remove all setup processes.
      description: |
        Stop all setup processes at the next possible operation and remove all setup process information.  
        Depending on the integration driver, a started setup process cannot be aborted.

        ‚ö†Ô∏è This stops all setup processes, not just for the current session!
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/stopAllIntegrationSetupsMsg'
      x-response:
        $ref: '#/components/messages/result'

    get_integration_setup_status:
      summary: üß™ Get integration driver setup status.
      description: |
        Poll operation to retrieve the current integration driver setup state. See the `state` and `error` fields in the
        response message. There are also WebSocket `integration_setup_change` event messages for state changes to avoid
        polling.

        Defined setup states:
        - `SETUP`: setup is running and configuring the integration. 
        - `WAIT_USER_ACTION`: user input is required to continue the setup process. See `require_user_action` in response
           for the required user input. Provide the requested data with the `PUT` operation.
        - `OK`: setup process has been completed successfully, the integration driver can now be used.
        - `ERROR`: the setup process failed. Check the `error` field for more information.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/getIntegrationSetupStatusMsg'
      x-response:
        $ref: '#/components/messages/integration_setup_info'

    set_integration_user_data:
      summary: üß™ Provide requested integration setup data.
      description: |
        Set required data to configure the integration driver or continue the setup process.

        Defined user actions to set in the request body `action` field:
        - `input_values`: if the user was requested to enter settings, e.g. connection or credential parameters to a device
          or service.
        - `confirm`: response to the user action `confirmation`. Set to `true` if the user had to perform an action like
          pressing a button on a device and then confirms the action with continuing the setup process.  
          The `false` value is prepared for yes / no choices.

        The `state` field in the response message indicate the current state of the setup process. Use the
        `get_integration_setup_status` message to poll for state updates or listen to the corresponding WebSocket
        `integration_setup_change` event messages with `event_type: SETUP`.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/setIntegrationUserDataMsg'
      x-response:
        $ref: '#/components/messages/integration_setup_info' # TODO just result?

    stop_integration_setup:
      summary: üß™ Abort the integration driver setup process.
      description: |
        Stop the setup process at the next possible operation and remove the setup process information.  
        To start a new setup process, use the `setup_integration` request again.

        Depending on the integration driver, a started setup process cannot be aborted.

        Emits the WebSocket event `integration_setup_change` with `event_type: STOP`.
      tags:
        - name: integration
      payload:
        $ref: '#/components/schemas/stopIntegrationSetupMsg'
      x-response:
        $ref: '#/components/messages/result'

    # =========================================================================
    # NOTIFICATIONS API MESSAGES
    # =========================================================================

    get_event_channels:
      summary: üß™ Retrieve available event channels for the current session.
      description: |
        Depending on the security role not all event subscriptions may be available.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/getEventChannelsMsg'
      x-response:
        $ref: '#/components/messages/event_channels'
    event_channels:
      summary: üß™ Available subscriptions for the current session.
      description: |
        Returns all subscribed event channels.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/eventChannelsMsg'
    subscribe_events:
      summary: üß™ Subscribe to event channels.
      description: |
        Subscribe to one or multiple event channels.
        
        - The special `all` channel will deliver all available events and clear all other subscriptions for the session.
        - If the session is already subscribed to the `all` channel, any other channels are ignored.
        - The special `entities` channel will deliver all entity and activity-group related events. This includes all
          entity-type channels (`entity_###`) and the `activity_group` channel.
        - Depending on the security role not all event subscriptions may be available.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/subscribeEventsMsg'
      x-response:
        $ref: '#/components/messages/event_subscriptions'
    get_event_subscriptions:
      summary: üß™ Retrieve the active event channel subscriptions.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/getEventSubscriptionsMsg'
      x-response:
        $ref: '#/components/messages/event_subscriptions'
    unsubscribe_events:
      summary: üß™ Unsubscribe from event channels.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/unsubscribeEventsMsg'
      x-response:
        $ref: '#/components/messages/event_subscriptions'
    event_subscriptions:
      summary: üß™ Event channel subscription status.
      description: |
        Response to `subscribe_events`, `unsubscribe_events` and `get_event_subscriptions`.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/eventSubscriptionsMsg'

    warning:
      summary: üîç System warning event.
      description: |
        Emitted for important system events like low battery or shutdown events.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/warningEventMsg'

    integration_driver_change:
      summary: üß™ Integration driver change event.
      description: |
        Emitted if an integration driver has changed, a new driver has been added or a configured driver has been
        deleted.
      tags:
        - name: integration
        - name: event
      payload:
        $ref: '#/components/schemas/integrationDriverChangeEventMsg'
    integration_change:
      summary: üß™ Integration change event.
      description: |
        Emitted if an integration instance has changed, a new instance has been added or a configured instance has been
        deleted.
      tags:
        - name: integration
        - name: event
      payload:
        $ref: '#/components/schemas/integrationChangeEventMsg'
    integration_state:
      summary: üß™ Integration state event.
      description: |
        Emitted if the connection state of an integration driver or instance has changed.
      tags:
        - name: integration
        - name: event
      payload:
        $ref: '#/components/schemas/integrationStateEventMsg'

    configuration_change:
      summary: üß™ System configuration change event.
      description: |
        Emitted if a system setting has changed.
        
        The `msg_data.new_state` object only contains the configuration object of the setting that has changed and not
        the full system configuration.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/configurationChangeEventMsg'

    ir_learning:
      summary: üß™ IR code learn event.
      description: |
        Emitted if learning mode is started, stopped or a new IR code was learned from an IR emitter device.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/irLearningEventMsg'

    dock_change:
      summary: üß™ Dock change event.
      description: |
        Emitted if a dock configuration has changed.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/dockChangeEventMsg'
    dock_state:
      summary: üß™ Dock state event.
      description: |
        Emitted if the connection state of a dock has changed.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/dockStateEventMsg'

    dock_port_mode:
      summary: üß™ Dock port mode change event.
      description: |
        Emitted if the external port mode of a dock has changed.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/dockPortModeEventMsg'

    dock_discovery:
      summary: üß™ Docking station discovery event.
      description: |
        Emitted if dock discovery is started, stopped or a new dock was discovered on the network or via Bluetooth.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/dockDiscoveryEventMsg'

    dock_setup_change:
      summary: üß™ Docking station setup state change event.
      description: |
        Emitted for all dock setup flow state changes.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/dockSetupChangeEventMsg'

    dock_update_change:
      summary: üß™ Docking station firmware update change event.
      description: |
        Emitted for firmware update and progress state changes.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/dockUpdateChangeEventMsg'

    integration_discovery:
      summary: üß™ Integration discovery event.
      description: |
        Emitted if integration discovery is started, stopped or a new integration was discovered on the network.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/integrationDiscoveryEventMsg'

    integration_setup_change:
      summary: üß™ Integration setup state change event.
      description: |
        Emitted for all integration setup flow state changes.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/integrationSetupChangeEventMsg'

    software_update:
      summary: üß™ Software update event.
      description: |
        Emitted during a system update to receive start, stop and progress events.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/softwareUpdateEventMsg'

    power_mode_change:
      summary: üß™ Power mode change event.
      description: |
        Emitted when the power saving mode changes.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/powerModeChangeEventMsg'

    battery_status:
      summary: üß™ Battery status event.
      description: |
        Emitted when the battery status changes.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/batteryStatusEventMsg'

    ambient_light_change:
      summary: üîç Ambient light change event.
      description: |
        Emitted when the ambient light changes during normal power mode.
      tags:
        - name: event
      payload:
        $ref: '#/components/schemas/ambientLightChangeEventMsg'

  # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  schemas:
    # =========================================================================
    # Common message schemas
    # =========================================================================
    commonReq:
      description: Common request message properties.
      type: object
      properties:
        kind:
          description: Request message identifier.
          type: string
          const: req
        id:
          description: Request ID which must be increased for every new request. This ID will be returned in the response message.
          type: integer
          minimum: 0
          default: 0
        msg:
          description: One of the defined API request message types.
          type: string
          minLength: 1
          maxLength: 32
      required:
        - id
        - msg
    commonResp:
      description: Common response message properties.
      type: object
      properties:
        kind:
          description: Response message identifier.
          type: string
          const: resp
        req_id:
          $ref: '#/components/schemas/msgId'
        msg:
          description: One of the defined API response message types.
          type: string
          minLength: 1
          maxLength: 32
        code:
          description: Response code of the operation according to HTTP status codes.
          type: integer
          default: 200
        msg_data:
          description: Wrapper for response data object. Not returned for error responses with code != 200.
          type: object
      required:
        - kind
        - req_id
        - msg
        - code
    commonEvent:
      description: Common event message properties.
      type: object
      properties:
        kind:
          description: Event message identifier.
          type: string
          const: event
        msg:
          description: One of the defined API event message types.
          type: string
          minLength: 1
          maxLength: 32
        cat:
          description: Event category.
          type: string
        ts:
          type: string
          format: date-time
          description: Optional timestamp when the event was generated.
        msg_data:
          description: Wrapper for event data object.
          type: object
      required:
        - kind
        - msg
        - msg_data
    authRequiredEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: auth_required
            msg_data:
              type: object
              properties:
                api:
                  type: object
                  properties:
                    name:
                      description: API name
                      type: string
                    version:
                      description: API version
                      type: string
          required:
            - msg
    authRequestMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: auth
            msg_data:
              type: object
              properties:
                token:
                  type: string
          required:
            - msg
            - msg_data
    authMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: authentication
            msg_data:
              type: object
              properties:
                core:
                  description: Core version
                  type: string
          required:
            - msg

    # =========================================================================
    # Core message schemas
    # =========================================================================
    versionMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: version
          required:
            - msg
    versionInfoMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: version_info
            msg_data:
              $ref: '#/components/schemas/versionInfo'
          required:
            - msg

    systemCmdMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: service_cmd
            msg_data:
              properties:
                command:
                  type: string
                  enum:
                    - STANDBY
                    - REBOOT
                    - POWER_OFF
                    - RESTART
                    - RESTART_UI
                    - RESTART_CORE
              required:
                - command
          required:
            - msg
            - msg_data
    getSystemInfoMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: system
          required:
            - msg
    systemInfoMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: system_info
            msg_data:
              $ref: '#/components/schemas/systemInfo'
          required:
            - msg

    getFactoryResetTokenMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_factory_reset_token
          required:
            - msg
    factoryResetTokenMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: factory_reset_token
            msg_data:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
          required:
            - msg
    factoryResetMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: factory_reset
            msg_data:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
          required:
            - msg
            - msg_data

    setApiAccessMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_api_access
            msg_data:
              properties:
                web_configurator:
                  type: object
                  properties:
                    enabled:
                      description: Enable or disable access for the web-configurator.
                      type: boolean
                    pin:
                      description: Set a new access pin.
                      type: string
                      minLength: 4
                    valid_to:
                      description: |
                        Optional timestamp when the access automatically expires. If not set the access is allowed until
                        the account is disabled.
                      type: string
                      format: date-time
                  required:
                    - enabled
              required:
                - web_configurator
          required:
            - msg
            - msg_data
    getApiAccessMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_api_access
          required:
            - msg
    apiAccessMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: api_access
            msg_data:
              properties:
                web_configurator:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    valid_to:
                      description: |
                        Optional timestamp when the access automatically expires. If not set the access is allowed until
                        the account is disabled.
                      type: string
                      format: date-time
                  required:
                    - enabled
              required:
                - web_configurator
          required: # msg_data is not required to reply with error code for invalid request
            - msg

    checkSystemUpdateMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: check_system_update
            msg_data:
              type: object
              properties:
                force_update:
                  type: boolean
          required:
            - msg
    systemUpdateInfoMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: system_update_info
            msg_data:
              $ref: '#/components/schemas/AvailableSystemUpdateResponse'
          required:
            - msg
    updateSystemMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_system
            msg_data:
              type: object
              properties:
                update_id:
                  description: Update image identification
                  type: string
              required:
                - update_id
          required:
            - msg
            - msg_data
    updateSystemResultMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: update_system_result
            msg_data:
              $ref: '#/components/schemas/SystemUpdateResponse'
          required:
            - msg
            - msg_data
    getSystemUpdateProgressMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_system_update_progress
            msg_data:
              type: object
              properties:
                update_id:
                  description: Update image identification
                  type: string
              required:
                - update_id
          required:
            - msg
            - msg_data
    systemUpdateProgressMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: system_update_progress
            msg_data:
              $ref: '#/components/schemas/SystemUpdateProgress'
          required:
            - msg

    getPowerModeMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_power_mode
          required:
            - msg
    powerModeMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: power_mode
            msg_data:
              type: object
              properties:
                mode:
                  $ref: '#/components/schemas/PowerMode'
                battery:
                  $ref: '#/components/schemas/batteryStatus'
              required:
                - mode
          required:
            - msg
            - msg_data
    setPowerModeMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_power_mode
            msg_data:
              type: object
              properties:
                mode:
                  $ref: '#/components/schemas/PowerMode'
              required:
                - mode
          required:
            - msg
            - msg_data

    getBatteryChargerMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_battery_charger
          required:
            - msg
    batteryChargerMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: battery_charger
            msg_data:
              $ref: '#/components/schemas/BatteryCharger'
          required:
            - msg
            - msg_data
    updateBatteryChargerMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_battery_charger
            msg_data:
              $ref: '#/components/schemas/BatteryChargerUpdate'
          required:
            - msg
            - msg_data

    getStandbyInhibitorsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_standby_inhibitors
          required:
            - msg
    inhibitorsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: standby_inhibitors
            msg_data:
              $ref: '#/components/schemas/Inhibitors'
          required:
            - msg
            - msg_data
    createStandbyInhibitorMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: create_standby_inhibitor
            msg_data:
              $ref: '#/components/schemas/CreateStandbyInhibitor'
          required:
            - msg
            - msg_data
    inhibitorMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: standby_inhibitor
            msg_data:
              type: string
              properties:
                id:
                  type: string
              required:
                - id
          required:
            - msg
            - msg_data
    delStandbyInhibitorMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: del_standby_inhibitor
            msg_data:
              type: object
              properties:
                id:
                  type: string
              required:
                - id
          required:
            - msg
            - msg_data
    delAllStandbyInhibitorsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: del_all_standby_inhibitors
          required:
            - msg

    getAmbientLightMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_ambient_light
          required:
            - msg
    ambientLightMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: ambient_light
            msg_data:
              $ref: '#/components/schemas/AmbientLight'
          required:
            - msg
            - msg_data

    resetConfigurationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: reset_configuration
          required:
            - msg

    getConfigurationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_configuration
          required:
            - msg
    configurationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: configuration
            msg_data:
              $ref: '#/components/schemas/configuration'
          required:
            - msg

    getButtonCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_button_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setButtonCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_button_cfg
            msg_data:
              $ref: '#/components/schemas/cfgButtonUpdate'
          required:
            - msg
            - msg_data
    buttonCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: button_cfg
            msg_data:
              $ref: '#/components/schemas/cfgButton'
          required:
            - msg

    getDeviceCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_device_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setDeviceCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_device_cfg
            msg_data:
              $ref: '#/components/schemas/cfgDevice'
          required:
            - msg
            - msg_data
    deviceCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: device_cfg
            msg_data:
              $ref: '#/components/schemas/cfgDevice'
          required:
            - msg

    getDisplayCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_display_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setDisplayCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_display_cfg
            msg_data:
              $ref: '#/components/schemas/cfgDisplay'
          required:
            - msg
            - msg_data
    displayCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: display_cfg
            msg_data:
              $ref: '#/components/schemas/cfgDisplay'
          required:
            - msg

    getFeaturesCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_features_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setFeaturesCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_features_cfg
            msg_data:
              $ref: '#/components/schemas/cfgFeatureUpdate'
          required:
            - msg
            - msg_data
    featuresCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: features_cfg
            msg_data:
              $ref: '#/components/schemas/cfgFeatures'
          required:
            - msg

    getHapticCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_haptic_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setHapticCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_haptic_cfg
            msg_data:
              $ref: '#/components/schemas/cfgHaptic'
          required:
            - msg
            - msg_data
    hapticCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: haptic_cfg
            msg_data:
              $ref: '#/components/schemas/cfgHaptic'
          required:
            - msg

    getLocalizationCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_localization_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setLocalizationCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_localization_cfg
            msg_data:
              $ref: '#/components/schemas/cfgLocalization'
          required:
            - msg
            - msg_data
    localizationCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: localization_cfg
            msg_data:
              $ref: '#/components/schemas/cfgLocalization'
          required:
            - msg
    getTimezoneNamesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_timezone_names
          required:
            - msg
    timezoneNamesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: timezone_names
            msg_data:
              type: array
              items:
                type: string
          required:
            - msg
    getLocalizationCountriesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_localization_countries
          required:
            - msg
    localizationCountriesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg_data:
              type: array
              items:
                type: object
                properties:
                  code:
                    $ref: '#/components/schemas/countryCode'
                  name_en:
                    description: |
                      Country name in english. Native country names will be provided in additional `name_<language_code>`
                      properties.
                    type: string
                additionalProperties: true
                required:
                  - code
                  - name_en
          required:
            - msg
    getLocalizationLanguagesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_localization_languages
          required:
            - msg
    localizationLanguagesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg_data:
              type: object
              properties:
                version:
                  type: string
                translations:
                  type: array
                  items:
                    type: object
                    properties:
                      code:
                        $ref: '#/components/schemas/languageCode'
                      name:
                        type: string
                    required:
                      - code
                      - name
              required:
                - version
                - translations
          required:
            - msg
    getNetworkCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_network_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setNetworkCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_network_cfg
            msg_data:
              $ref: '#/components/schemas/cfgNetworkUpdate'
          required:
            - msg
            - msg_data
    networkCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: network_cfg
            msg_data:
              $ref: '#/components/schemas/cfgNetwork'
          required:
            - msg
            - msg_data

    getSoftwareUpdateCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_software_update_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setSoftwareUpdateCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_software_update_cfg
            msg_data:
              $ref: '#/components/schemas/cfgSoftwareUpdate'
          required:
            - msg
            - msg_data
    resetSoftwareUpdateCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: reset_software_update_cfg
          required:
            - msg
    softwareUpdateCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: software_update_cfg
            msg_data:
              $ref: '#/components/schemas/cfgSoftwareUpdate'
          required:
            - msg

    getPowerSavingCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_power_saving_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setPowerSavingCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_power_saving_cfg
            msg_data:
              $ref: '#/components/schemas/cfgPowerSaving'
          required:
            - msg
            - msg_data
    powerSavingCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: power_saving_cfg
            msg_data:
              $ref: '#/components/schemas/cfgPowerSaving'
          required:
            - msg

    getProfileCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_profile_cfg
          required:
            - msg
    setProfileCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_profile_cfg
            msg_data:
              $ref: '#/components/schemas/cfgProfileUpdate'
          required:
            - msg
            - msg_data
    profileCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: profile_cfg
            msg_data:
              $ref: '#/components/schemas/cfgProfile'
          required:
            - msg

    getSoundCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_sound_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setSoundCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_sound_cfg
            msg_data:
              $ref: '#/components/schemas/cfgSound'
          required:
            - msg
            - msg_data
    soundCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: sound_cfg
            msg_data:
              $ref: '#/components/schemas/cfgSound'
          required:
            - msg

    getVoiceControlCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_voice_control_cfg
            msg_data:
              $ref: '#/components/schemas/getConfigurationOptions'
          required:
            - msg
    setVoiceControlCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_voice_control_cfg
            msg_data:
              $ref: '#/components/schemas/cfgVoiceControl'
          required:
            - msg
            - msg_data
    voiceControlCfgMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: voice_control_cfg
            msg_data:
              $ref: '#/components/schemas/cfgVoiceControl'
          required:
            - msg
    getVoiceAssistantsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_voice_assistants
          required:
            - msg
    voiceAssistantsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: voice_assistants
            msg_data:
              type: array
              items:
                type: string
          required:
            - msg

    # --- Entity handling

    getEntityTypesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_entity_types
          required:
            - msg
    entityTypesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: entity_types
            msg_data:
              type: array
              items:
                type: string
          required:
            - msg
    getEntityMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_entity
            msg_data:
              type: object
              properties:
                entity_id:
                  $ref: '#/components/schemas/entityId'
              required:
                - entity_id
          required:
            - msg
            - msg_data
    getEntitiesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_entities
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/entityFilter'
                paging:
                  $ref: '#/components/schemas/paging'
          required:
            - msg
    entitiesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: entities
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/entityFilter'
                paging:
                  $ref: '#/components/schemas/pagination'
                entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/entity'
              required:
                - entities
          required:
            - msg
    getAvailableEntitiesMsg:
      description: |
        Retrieve the available entities provided by the integration instance.
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_available_entities
            msg_data:
              type: object
              properties:
                force_reload:
                  description: Don't use cached entities and re-request available entities from integrations
                  type: boolean
                filter:
                  $ref: '#/components/schemas/availableEntityFilter'
                paging:
                  $ref: '#/components/schemas/paging'
          required:
            - msg
    availableEntitiesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: available_entities
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/availableEntityFilter'
                paging:
                  $ref: '#/components/schemas/pagination'
                available_entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/available_entity'
              required:
                - available_entities
          required:
            - msg
    getEntityCommandsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_entity_commands
            msg_data:
              type: object
              properties:
                entity_id:
                  type: string
                entity_type:
                  type: string
          required:
            - msg
            - msg_data
    entityCommandsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: entity_commands
            msg_data:
              type: object
              properties:
                entity_id:
                  type: string
                entity_type:
                  type: string
                commands:
                  type: array
                  items:
                    $ref: '#/components/schemas/entityCommand'
              required:
                - commands
          required:
            - msg
    getEntityCommandMetadataMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_entity_command_metadata
          required:
            - msg
    entityCommandMetadataMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: entity_command_metadata
            msg_data:
              type: array
              description: See REST API for EntityCommandMetadata object definition
              items:
                type: object
          required:
            - msg
            - msg_data
    executeEntityCommandMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: execute_entity_command
            msg_data:
              type: object
              properties:
                entity_id:
                  $ref: '#/components/schemas/entityId'
                cmd_id:
                  $ref: '#/components/schemas/entityCommand'
                params:
                  description: |
                    Optional key/value command parameters if required. See entity documentation for more information.
                  type: object
              required:
                - entity_id
                - cmd_id
          required:
            - msg
            - msg_data
    entityMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: entity
            msg_data:
              $ref: '#/components/schemas/entity'
          required:
            - msg
    entityChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: entity_change
            cat:
              type: string
              const: ENTITY
            msg_data:
              $ref: '#/components/schemas/entityChange'
          required:
            - msg
            - msg_data
    activityGroupChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: activity_group_change
            cat:
              type: string
              const: ENTITY
            msg_data:
              $ref: '#/components/schemas/ActivityGroup'
          required:
            - msg
            - msg_data
    updateEntityMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_entity
            msg_data:
              $ref: '#/components/schemas/entityUpdate'
          required:
            - msg
            - msg_data
    deleteEntityMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_entity
            msg_data:
              type: object
              properties:
                entity_id:
                  $ref: '#/components/schemas/entityId'
              required:
                - entity_id
          required:
            - msg
            - msg_data
    deleteEntitiesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_entities
            msg_data:
              type: object
              properties:
                integration_id:
                  type: string
                entity_ids:
                  type: array
                  items:
                    type: string
          required:
            - msg
            - msg_data

    # --- Dock handling

    getDockCountMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_dock_count
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/dockFilter'
          required:
            - msg
    dockCountMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: dock_count
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/dockFilter'
                count:
                  type: integer
              required:
                - count
          required:
            - msg
    getDocksMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_docks
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/dockFilter'
                paging:
                  $ref: '#/components/schemas/paging'
          required:
            - msg
    docksMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: docks
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/dockFilter'
                paging:
                  $ref: '#/components/schemas/paging'
                docks:
                  type: array
                  items:
                    $ref: '#/components/schemas/dockConfiguration'
              required:
                - paging
                - docks
          required:
            - msg
    createDockMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: create_dock
            msg_data:
              $ref: '#/components/schemas/dockConfigurationRequest'
          required:
            - msg
            - msg_data
    dockMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: dock
          required:
            - msg
    deleteAllDocksMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_all_docks
          required:
            - msg
    getDockMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_dock
            msg_data:
              type: object
              properties:
                dock_id:
                  type: string
              required:
                - dock_id
          required:
            - msg
            - msg_data
    updateDockMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_dock
            msg_data:
              $ref: '#/components/schemas/dockUpdateRequest'
          required:
            - msg
            - msg_data
    dockConnectionCommandMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: dock_connection_command
            msg_data:
              type: object
              properties:
                dock_id:
                  description: Optional dock_id, if omitted the command is applied to all docks.
                  type: string
                cmd:
                  type: string
                  enum:
                    - CONNECT
                    - DISCONNECT
              required:
                - cmd
          required:
            - msg
            - msg_data
    deleteDockMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_dock
            msg_data:
              type: object
              properties:
                dock_id:
                  type: string
              required:
                - dock_id
          required:
            - msg
            - msg_data
    dockCommandMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: dock_command
            msg_data:
              type: object
              properties:
                dock_id:
                  type: string
                command:
                  type: string
                  enum:
                    - SET_LED_BRIGHTNESS
                    - SET_VOLUME
                    - IDENTIFY
                    - REMOTE_LOW_BATTERY
                    - REMOTE_CHARGED
                    - REMOTE_NORMAL
                    - REBOOT
                    - RESET
                value:
                  description: Command parameter value. Required for `SET_LED_BRIGHTNESS`.
                  type: string
                token:
                  description: Optional token if dock uses a custom password.
                  type: string
              required:
                - dock_id
                - command
          required:
            - msg
            - msg_data
    getDockDiscoveryStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_dock_discovery_status
          required:
            - msg
    dockDiscoveryStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: dock_discovery_status
          required:
            - msg
    startDockDiscoveryMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: start_dock_discovery
            msg_data:
              type: object
              properties:
                timeout:
                  description: Timeout in seconds.
                  type: integer
                  format: int32
                  default: 30
                  minimum: 1
                  maximum: 300
                bt:
                  description: Use Bluetooth to discover new docks.
                  type: boolean
                  default: true
                net:
                  description: Query network to discover new docks.
                  type: boolean
                  default: true
                new:
                  description: Only return new devices, filter out already configured docks.
                  type: boolean
                  default: true
          required:
            - msg
    stopDockDiscoveryMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: stop_dock_discovery
          required:
            - msg
    getDockDiscoveryDeviceMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_dock_discovery_device
            msg_data:
              type: object
              properties:
                dock_id:
                  type: string
              required:
                - dock_id
          required:
            - msg
            - msg_data
    dockDiscoveryDeviceMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: dock_discovery_device
          required:
            - msg
    execCmdOnDiscoveredDockMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: exec_cmd_on_discovered_dock
            msg_data:
              type: object
              properties:
                dock_id:
                  type: string
                cmd:
                  description: Command to execute.
                  type: string
                  enum:
                    - CONNECTION_TEST
                    - IDENTIFY
                timeout:
                  description: Timeout in seconds.
                  type: integer
                  format: int32
                  default: 30
                  minimum: 1
                  maximum: 300
                token:
                  description: Optional token if dock uses a custom password.
                  type: string
              required:
                - dock_id
                - cmd
          required:
            - msg
            - msg_data
    dockSystemInfoMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: dock_system_info
            msg_data:
              $ref: '#/components/schemas/dockSystemInfo'
          required:
            - msg
    getDockSetupProcessesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_dock_setup_processes
          required:
            - msg
    dockSetupProcessesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: dock_setup_processes
            msg_data:
              type: object
              properties:
                sessions:
                  type: array
                  items:
                    type: string
              required:
                - sessions
          required:
            - msg
    createDockSetupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: create_dock_setup
            msg_data:
              $ref: '#/components/schemas/createDockSetup'
          required:
            - msg
            - msg_data
    dockSetupStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: dock_setup_status
            msg_data:
              $ref: '#/components/schemas/dockSetupInfo'
          required:
            - msg
    stopAllDockSetupsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: stop_all_dock_setups
          required:
            - msg
    getDockSetupStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_dock_setup_status
            msg_data:
              type: object
              properties:
                dock_id:
                  type: string
          required:
            - msg
            - msg_data
    startDockSetupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: start_dock_setup
            msg_data:
              $ref: '#/components/schemas/dockSetup'
          required:
            - msg
            - msg_data
    stopDockSetupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: stop_dock_setup
            msg_data:
              type: object
              properties:
                dock_id:
                  type: string
          required:
            - msg
            - msg_data

    # --- WiFi handling

    wifiGetStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_wifi_status
          required:
            - msg
    wifiStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: wifi_status
            msg_data:
              $ref: '#/components/schemas/WifiStatus'
          required:
            - msg

    wifiCommandMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: wifi_command
            msg_data:
              type: object
              properties:
                cmd:
                  $ref: '#/components/schemas/WifiCmd'
              required:
                - cmd
          required:
            - msg
            - msg_data

    wifiScanStartMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: wifi_scan_start
          required:
            - msg

    wifiScanStopMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: wifi_scan_stop
          required:
            - msg

    wifiGetScanStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_wifi_scan_status
          required:
            - msg
    wifiScanStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: wifi_scan_status
            msg_data:
              $ref: '#/components/schemas/ApScanStatus'
          required:
            - msg

    wifiGetAllNetworksMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_all_wifi_networks
          required:
            - msg
    wifiNetworksMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: wifi_networks
            msg_data:
              $ref: '#/components/schemas/SavedNetworks'
          required:
            - msg

    wifiAddNetworkMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: add_wifi_network
            msg_data:
              $ref: '#/components/schemas/CreateWifiNetwork'
          required:
            - msg
            - msg_data

    wifiDelAllNetworksMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: del_all_wifi_networks
          required:
            - msg

    wifiGetNetworkMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_wifi_network
            msg_data:
              type: object
              properties:
                id:
                  type: integer
                  minimum: 0
              required:
                - id
          required:
            - msg
            - msg_data
    wifiNetworkMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: wifi_network
            msg_data:
              $ref: '#/components/schemas/SavedNetwork'
          required:
            - msg

    wifiUpdateNetworkMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_wifi_network
            msg_data:
              $ref: '#/components/schemas/ModifyWifiNetwork'
          required:
            - msg
            - msg_data

    wifiNetworkCommandMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: wifi_network_command
            msg_data:
              type: object
              properties:
                id:
                  type: integer
                  minimum: 0
                cmd:
                  $ref: '#/components/schemas/WifiNetworkCmd'
              required:
                - id
                - cmd
          required:
            - msg
            - msg_data

    wifiDelNetworkMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: del_wifi_network
            msg_data:
              type: object
              properties:
                id:
                  type: integer
                  minimum: 0
              required:
                - id
          required:
            - msg
            - msg_data

    wifiChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: wifi_change
            cat:
              type: string
              const: REMOTE
            msg_data:
              $ref: '#/components/schemas/WifiChange'
          required:
            - msg
            - msg_data

    # --- BT handling
    btPairingStartedEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: bt_pairing_started
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/BtPairingStarted'
          required:
            - msg
            - msg_data

    btPairingAuthRequestEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: bt_pairing_auth_request
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/BtPairingAuthRequest'
          required:
            - msg
            - msg_data

    btPairingCompleteEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: bt_pairing_complete
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/BtPairingComplete'
          required:
            - msg
            - msg_data

    btPairingResponseMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: bt_pairing_response
            msg_data:
              $ref: '#/components/schemas/BtPairingResponse'
          required:
            - msg
            - msg_data

    # --- Profile handling

    getProfilesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_profiles
          required:
            - msg
    profilesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: profiles
            msg_data:
              $ref: '#/components/schemas/profiles'
          required:
            - msg
    getProfileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_profile
            msg_data:
              properties:
                profile_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - profile_id
          required:
            - msg
            - msg_data
    profileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: profile
            msg_data:
              $ref: '#/components/schemas/profile'
          required:
            - msg
    getActiveProfileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_active_profile
          required:
            - msg
    switchProfileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: switch_profile
            msg_data:
              type: object
              properties:
                profile_id:
                  $ref: '#/components/schemas/simpleId'
                admin_pin:
                  type: string
                  description: Optional administrator pin to switch away from a restricted profile.
              required:
                - profile_id
          required:
            - msg
            - msg_data
    addProfileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: add_profile
            msg_data:
              $ref: '#/components/schemas/profileData'
          required:
            - msg
            - msg_data
    updateProfileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_profile
            msg_data:
              $ref: '#/components/schemas/profileData'
          required:
            - msg
            - msg_data
    deleteProfileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_profile
            msg_data:
              type: object
              properties:
                profile_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - profile_id
          required:
            - msg
            - msg_data
    deleteAllProfilesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_all_profiles
          required:
            - msg
    activeProfileChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: active_profile_change
            cat:
              type: string
              const: UI
            msg_data:
              $ref: '#/components/schemas/activeProfileChange'
          required:
            - msg
            - msg_data
    profileChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: profile_change
            cat:
              type: string
              const: UI
            msg_data:
              $ref: '#/components/schemas/profileChange'
          required:
            - msg
            - msg_data

    # --- page handling

    getPagesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_pages
            msg_data:
              properties:
                profile_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - profile_id
          required:
            - msg
            - msg_data
    pagesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: pages
            msg_data:
              $ref: '#/components/schemas/pages'
          required:
            - msg
    getPageMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_page
            msg_data:
              properties:
                page_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - page_id
          required:
            - msg
            - msg_data
    pageMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: page
            msg_data:
              $ref: '#/components/schemas/page'
          required:
            - msg
    addPageMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: add_page
            msg_data:
              $ref: '#/components/schemas/pageData'
          required:
            - msg
            - msg_data
    updatePageMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_page
            msg_data:
              $ref: '#/components/schemas/pageData'
          required:
            - msg
            - msg_data
    deletePageMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_page
            msg_data:
              type: object
              properties:
                page_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - page_id
          required:
            - msg
            - msg_data
    deletePagesInProfileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_pages_in_profile
            msg_data:
              type: object
              properties:
                profile_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - profile_id
          required:
            - msg
            - msg_data

    # --- group handling

    getGroupsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_groups
            msg_data:
              type: object
              properties:
                profile_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - profile_id
          required:
            - msg
            - msg_data
    groupsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: groups
            msg_data:
              $ref: '#/components/schemas/groups'
          required:
            - msg
    getGroupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_group
            msg_data:
              type: object
              properties:
                group_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - group_id
          required:
            - msg
            - msg_data
    groupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: group
            msg_data:
              $ref: '#/components/schemas/group'
          required:
            - msg
    addGroupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: add_group
            msg_data:
              $ref: '#/components/schemas/groupData'
          required:
            - msg
            - msg_data
    updateGroupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_group
            msg_data:
              $ref: '#/components/schemas/groupData'
          required:
            - msg
            - msg_data
    deleteGroupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_group
            msg_data:
              type: object
              properties:
                group_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - group_id
          required:
            - msg
            - msg_data
    deleteGroupsInProfileMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_group
            msg_data:
              type: object
              properties:
                profile_id:
                  $ref: '#/components/schemas/simpleId'
              required:
                - profile_id
          required:
            - msg
            - msg_data

    # --- integration handling

    getIntegrationStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration_status
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/enabledFilter'
                paging:
                  $ref: '#/components/schemas/paging'
          required:
            - msg
    integrationStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration_status
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/enabledFilter'
                paging:
                  $ref: '#/components/schemas/pagination'
                status:
                  type: array
                  items:
                    $ref: '#/components/schemas/integrationStatus'
              required:
                - drivers
          required:
            - msg

    integrationCmdMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: integration_cmd
            msg_data:
              type: object
              properties:
                cmd_id:
                  type: string
                  enum:
                    - CONNECT
                    - DISCONNECT
                integration_id:
                  $ref: '#/components/schemas/integrationId'
              required:
                - cmd_id
          required:
            - msg
            - msg_data

    integrationDriverCmdMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: integration_driver_cmd
            msg_data:
              type: object
              properties:
                cmd_id:
                  type: string
                  enum:
                    - START
                    - STOP
                driver_id:
                  $ref: '#/components/schemas/driverId'
              required:
                - cmd_id
          required:
            - msg
            - msg_data

    getIntegrationDriverCountMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration_driver_count
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/intgDriverFilter'
          required:
            - msg
    integrationDriverCountMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration_driver_count
            msg_data:
              type: object
              properties:
                # TODO return request filter in response?
                count:
                  type: integer
              required:
                - count
          required:
            - msg

    getIntegrationDriversMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration_drivers
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/intgDriverFilter'
                paging:
                  $ref: '#/components/schemas/paging'
          required:
            - msg
    integrationDriversMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration_drivers
            msg_data:
              type: object
              properties:
                paging:
                  $ref: '#/components/schemas/pagination'
                drivers:
                  type: array
                  items:
                    $ref: '#/components/schemas/integrationDriverInfo'
              required:
                - drivers
          required:
            - msg

    registerIntegrationDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: register_integration_driver
            msg_data:
              $ref: '#/components/schemas/integrationDriverUpdate'
          required:
            - msg
            - msg_data

    getIntegrationDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration_driver
            msg_data:
              type: object
              properties:
                driver_id:
                  $ref: '#/components/schemas/driverId'
              required:
                - driver_id
          required:
            - msg
            - msg_data
    integrationDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration_driver
            msg_data:
              $ref: '#/components/schemas/integrationDriver'
          required:
            - msg

    updateIntegrationDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_integration_driver
            msg_data:
              $ref: '#/components/schemas/integrationDriverUpdate'
          required:
            - msg
            - msg_data

    deleteIntegrationDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_integration_driver
            msg_data:
              type: object
              properties:
                driver_id:
                  $ref: '#/components/schemas/driverId'
              required:
                - driver_id
          required:
            - msg
            - msg_data

    getIntegrationCountMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration_count
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/enabledFilter'
          required:
            - msg
    integrationCountMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration_count
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/enabledFilter'
                count:
                  type: integer
              required:
                - count
          required:
            - msg

    getIntegrationsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integrations
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/enabledFilter'
                paging:
                  $ref: '#/components/schemas/paging'
          required:
            - msg
    integrationsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integrations
            msg_data:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/enabledFilter'
                paging:
                  $ref: '#/components/schemas/pagination'
                integrations:
                  type: array
                  items:
                    $ref: '#/components/schemas/integration'
              required:
                - integrations
          required:
            - msg

    createIntegrationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: create_integration
            msg_data:
              $ref: '#/components/schemas/integrationUpdate'
          required:
            - msg
            - msg_data
    integrationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration
            msg_data:
              $ref: '#/components/schemas/integration'
          required:
            - msg
            - msg_data

    getIntegrationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration
            msg_data:
              type: object
              properties:
                integration_id:
                  $ref: '#/components/schemas/integrationId'
              required:
                - integration_id
          required:
            - msg
            - msg_data

    updateIntegrationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: update_integration
            msg_data:
              $ref: '#/components/schemas/integrationUpdate'
          required:
            - msg
            - msg_data

    deleteIntegrationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: delete_integration
            msg_data:
              type: object
              properties:
                integration_id:
                  $ref: '#/components/schemas/integrationId'
              required:
                - integration_id
          required:
            - msg
            - msg_data

    configureEntityFromIntegrationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: configure_entity_from_integration
            msg_data:
              type: object
              properties:
                integration_id:
                  type: string
                entity_id:
                  description: Entity identifier from integration.
                  type: string
                name:
                  $ref: '#/components/schemas/languageText'
                icon:
                  $ref: '#/components/schemas/iconIdentifier'
                description:
                  $ref: '#/components/schemas/languageText'
              required:
                - integration_id
                - entity_id
          required:
            - msg
            - msg_data

    configureEntitiesFromIntegrationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: configure_entities_from_integration
            msg_data:
              type: object
              properties:
                integration_id:
                  type: string
                entity_ids:
                  description: |
                    Entity identifiers from integration. Omitted or an empty array will configure all entities.
                  type: array
                  items:
                    type: string
              required:
                - integration_id
          required:
            - msg
            - msg_data

    getIntegrationDiscoveryStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration_discovery_status
          required:
            - msg
    integrationDiscoveryStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration_discovery_status
            msg_data:
              $ref: '#/components/schemas/IntegrationDiscoveryStatus'
          required:
            - msg
            - msg_data

    startIntegrationDiscoveryMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: start_integration_discovery
            msg_data:
              type: object
              properties:
                timeout:
                  description: Timeout in seconds.
                  type: integer
                  format: int32
                  default: 30
                  minimum: 1
                  maximum: 300
                new:
                  description: Only return new devices, filter out already configured integrations.
                  type: boolean
                  default: true
          required:
            - msg

    stopIntegrationDiscoveryMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: stop_integration_discovery
          required:
            - msg

    getDiscoveredIntegrationDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_discovered_integration_driver
            msg_data:
              type: object
              properties:
                driver_id:
                  type: string
              required:
                - driver_id
          required:
            - msg
            - msg_data
    discoveredIntegrationDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: discovered_integration_driver
            msg_data:
              $ref: '#/components/schemas/integrationDiscoveryInformation'
          required:
            - msg
            - msg_data

    getDiscoveredIntgDriverMetadataMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_discovered_integration_driver_metadata
            msg_data:
              type: object
              properties:
                driver_id:
                  type: string
                timeout:
                  description: Timeout in seconds.
                  type: integer
                  format: int32
                  default: 5
                  minimum: 3
                  maximum: 60
                connection:
                  type: object
                  properties:
                    driver_url:
                      type: string
                    token:
                      description: |
                        Optional driver authentication token.
                      type: string
                      maxLength: 2048
              required:
                - driver_id
          required:
            - msg
            - msg_data

    configureDiscoveredIntegrationDriverMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: configure_discovered_integration_driver
            msg_data:
              type: object
              properties:
                driver_id:
                  type: string
                name:
                  $ref: '#/components/schemas/languageText'
                driver_url:
                  description: Custom WebSocket URL of the driver, otherwise the discovered driver address is used.
                  type: string
                  format: uri
                  maxLength: 2048
                token:
                  description: |
                    Optional driver authentication token.
                  type: string
                  maxLength: 2048
              required:
                - driver_id
          required:
            - msg
            - msg_data

    getIntegrationSetupProcessesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration_setup_processes
          required:
            - msg
    integrationSetupProcessesMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration_setup_processes
            msg_data:
              type: array
              items:
                type: string
          required:
            - msg
            - msg_data

    setupIntegrationMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: setup_integration
            msg_data:
              $ref: '#/components/schemas/CreateIntegrationSetup'
          required:
            - msg
            - msg_data
    integrationSetupInfoMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: integration_setup_info
            msg_data:
              $ref: '#/components/schemas/IntegrationSetupInfo'
          required:
            - msg
            - msg_data

    stopAllIntegrationSetupsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: stop_all_integration_setups
          required:
            - msg

    getIntegrationSetupStatusMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_integration_setup_status
            msg_data:
              type: object
              properties:
                driver_id:
                  type: string
              required:
                - driver_id
          required:
            - msg
            - msg_data

    setIntegrationUserDataMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: set_integration_user_data
            msg_data:
              type: object
              properties:
                driver_id:
                  type: string
                data:
                  type: object
                  oneOf:
                    - type: object
                      properties:
                        input_values:
                          $ref: '#/components/schemas/SettingsValues'
                      required:
                        - input_values
                    - type: object
                      properties:
                        confirm:
                          type: boolean
                      required:
                        - confirm
              required:
                - driver_id
                - data
          required:
            - msg
            - msg_data

    stopIntegrationSetupMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: stop_integration_setup
            msg_data:
              type: object
              properties:
                driver_id:
                  type: string
              required:
                - driver_id
          required:
            - msg
            - msg_data

    getEventChannelsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_event_channels
          required:
            - msg
    eventChannelsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: event_channels
            msg_data:
              type: object
              properties:
                channels:
                  type: array
                  items:
                    $ref: '#/components/schemas/eventChannel'
              required:
                - events
          required:
            - msg
    subscribeEventsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: subscribe_events
            msg_data:
              type: object
              properties:
                channels:
                  type: array
                  items:
                    $ref: '#/components/schemas/eventChannel'
              required:
                - events
          required:
            - msg
            - msg_data
    getEventSubscriptionsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: get_event_subscriptions
          required:
            - msg
    unsubscribeEventsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: unsubscribe_events
            msg_data:
              type: object
              properties:
                channels:
                  type: array
                  items:
                    $ref: '#/components/schemas/eventChannel'
              required:
                - events
          required:
            - msg
            - msg_data
    eventSubscriptionsMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: event_subscriptions
            msg_data:
              type: object
              properties:
                channels:
                  type: array
                  items:
                    $ref: '#/components/schemas/eventChannel'
              required:
                - events
          required:
            - msg
    eventChannel:
      type: string
      description: The name of the event channel.
      anyOf:
        - enum:
            - all
            - configuration
            - entities
            - entity_button
            - entity_switch
            - entity_climate
            - entity_cover
            - entity_light
            - entity_media_player
            - entity_sensor
            - entity_activity
            - entity_macro
            - entity_remote
            - activity_groups
            - integrations
            - profiles
            - emitters
            - docks
            - software_update
            - battery_status
            - ambient_light
            # TODO define all event channels. Suggestions:
            # - cfg_log
            # - cfg_ui
            # - log
            # - notification
            # - gui
            # - wifi
        - { }  # extensible enum: there might be more event channels than defined above

    warningEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: warning
            cat:
              type: string
              const: REMOTE
            msg_data:
              $ref: '#/components/schemas/warningEvent'
          required:
            - msg
            - msg_data

    integrationDriverChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: integration_driver_change
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/integrationDriverChange'
          required:
            - msg
            - msg_data
    integrationChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: integration_change
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/integrationChange'
          required:
            - msg
            - msg_data
    integrationStateEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: integration_state
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/integrationStateData'
          required:
            - msg
            - msg_data

    configurationChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: configuration_change
            cat:
              type: string
              const: REMOTE
            msg_data:
              $ref: '#/components/schemas/configurationChange'
          required:
            - msg
            - msg_data

    irLearningEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: ir_learning
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/irLearning'
          required:
            - msg
            - msg_data

    dockChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: dock_change
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/dockChangeData'
          required:
            - msg
            - msg_data
    dockStateEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: dock_state
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/dockStateData'
          required:
            - msg
            - msg_data

    dockPortModeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: dock_port_mode
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/dockPortMode'
          required:
            - msg
            - msg_data

    dockDiscoveryEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: dock_discovery
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/dockDiscovery'
          required:
            - msg
            - msg_data

    dockSetupChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: dock_setup_change
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/dockSetupChange'
          required:
            - msg
            - msg_data

    dockUpdateChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: dock_update_change
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/dockUpdateChange'
          required:
            - msg
            - msg_data

    integrationDiscoveryEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: integration_discovery
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/integrationDiscoveryEvent'
          required:
            - msg
            - msg_data

    integrationSetupChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: integration_setup_change
            cat:
              type: string
              const: DEVICE
            msg_data:
              $ref: '#/components/schemas/integrationSetupChange'
          required:
            - msg
            - msg_data

    softwareUpdateEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: software_update
            cat:
              type: string
              const: REMOTE
            msg_data:
              $ref: '#/components/schemas/softwareUpdateEvent'
          required:
            - msg
            - msg_data

    powerModeChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: power_mode_change
            cat:
              type: string
              const: REMOTE
            msg_data:
              $ref: '#/components/schemas/powerModeChangeEvent'
          required:
            - msg
            - msg_data

    batteryStatusEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: battery_status
            cat:
              type: string
              const: REMOTE
            msg_data:
              $ref: '#/components/schemas/batteryStatus'
          required:
            - msg
            - msg_data

    ambientLightChangeEventMsg:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: ambient_light_change
            cat:
              type: string
              const: REMOTE
            msg_data:
              $ref: '#/components/schemas/AmbientLight'
          required:
            - msg
            - msg_data

    # =========================================================================
    # Event message schemas
    # =========================================================================

    error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    ping:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonReq'
        - properties:
            msg:
              type: string
              const: ping
            msg_data:
              type: object
          required:
            - msg
    pong:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonResp'
        - properties:
            msg:
              type: string
              const: pong
            msg_data:
              type: object
          required:
            - msg

    warningEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/commonEvent'
        - properties:
            msg:
              type: string
              const: warning
            cat:
              type: string
              const: DEVICE
            msg_data:
              type: object
              properties:
                event:
                  type: string
                  enum:
                    - LOW_BATTERY
                    - OPEN_CASE
                    - BATTERY_UNDERVOLT
                shutdown:
                  description: System initiated forced shutdown
                  type: boolean
                message:
                  description: debug message
                  type: string
              required:
                - event
          required:
            - msg
            - msg_data

    # =========================================================================
    # Common schemas
    # =========================================================================

    msgId:
      description: Request message ID which is reflected in response message.
      type: integer
      minimum: 0
      default: 0

    paging:
      description: Paging information for returned items.
      type: object
      properties:
        limit:
          description: Number of returned items per page.
          type: integer
          format: int32
          default: 10
          minimum: 10
        page:
          description: Current page number. 1-based.
          type: integer
          format: int32
          default: 1
          minimum: 1

    pagination:
      description: Returned pagination information.
      type: object
      properties:
        count:
          description: Total number of items.
          type: integer
          format: int32
          minimum: 0
        limit:
          description: Number of returned items.
          type: integer
          format: int32
          minimum: 0
        page:
          description: Current page number. 1-based.
          type: integer
          format: int32
          minimum: 1

    versionInfo:
      type: object
      properties:
        model:
          description: |
            Short model identifier of the remote (UCR2 for Remote Two, UCR3 for Remote 3).
          type: string
        device_name:
          description: Custom name of the remote
          type: string
        hostname:
          description: Hostname of the remote
          type: string
        address:
          description: MAC address of the remote
          type: string
        api:
          description: API version
          type: string
        core:
          description: Core service version
          type: string
        ui:
          description: Frontend app version
          type: string
        os:
          description: Operating system version
          type: string
        integrations: # untyped Map<string,string>
          description: Versions of the available integrations. Map of (integration_name, version).
          type: object
          additionalProperties:
            type: string

    systemInfo:
      type: object
      properties:
        model_name:
          description: Friendly name of the device model.
          type: string
        model_number:
          description: |
            Full model number of the remote:
            - `ucr2` for Remote Two
            - `ucr3-##` for Remote 3, ## suffix indicates color variant
          type: string
        serial_number:
          type: string
        hw_revision:
          type: string

    enabledFilter:
      description: Simple filter by enabled flag.
      type: object
      properties:
        filter:
          type: object
          properties:
            enabled:
              type: boolean

    intgDriverFilter:
      description: Filter for integration drivers.
      type: object
      properties:
        filter:
          type: object
          properties:
            enabled:
              type: boolean
            instantiable:
              description: |
                Filter if a driver is instantiable or not:
                - true = only consider drivers which allow new integration instances to be created from. Either single-device drivers
                  without an instance, or multi-device drivers.
                - false = only drivers which allow no more instances
                - NONE = any.
              type: boolean
            single_device:
              description: |
                true = only consider single-device drivers, false = only multi-device drivers, NONE = all.
              type: boolean
            has_instances:
              description: |
                Filter if a driver has integration instances or not:
                - true = only consider drivers which have at least one integration instance,
                - false = drivers without instances
                - NONE = any.
              type: boolean

    availableEntityFilter:
      description: Optional filters
      type: object
      properties:
        integration_id:
          $ref: '#/components/schemas/integrationId'
        entity_types:
          type: array
          items:
            $ref: '#/components/schemas/entityType'
        entities:
          $ref: '#/components/schemas/availEntitiesFilter'
        text_search:
          type: string
          minLength: 1
          maxLength: 50

    availEntitiesFilter:
      description: Filter available entities
      type: string
      enum:
        - NEW
        - CONFIGURED
        - ALL
    entityFilter:
      description: Optional filters
      type: object
      properties:
        integration_ids:
          type: array
          items:
            $ref: '#/components/schemas/integrationId'
        entity_types:
          type: array
          items:
            $ref: '#/components/schemas/entityType'
        text_search:
          type: string
          minLength: 1
          maxLength: 50

    entity: # YIO v1: loaded_entity
      description: |
        Configured entity in the remote to be used in one or more profiles.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        entity_type:
          $ref: '#/components/schemas/entityType'
        integration_id:
          $ref: '#/components/schemas/integrationId'
        device_class:
          description: |
            Optional device type. This can be used by the UI to represent the entity with a different
            icon, behaviour etc. See entity documentation for available device classes.
          type: string
        name:
          description: |
            Display name of the entity in the UI. An english text should always be provided as fallback option.
          $ref: '#/components/schemas/languageText'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        features:
          $ref: '#/components/schemas/entityFeatures'
        options:
          description: |
            Feature options. See entity documentation for available options.
          type: object
        description:
          $ref: '#/components/schemas/languageText'
        attributes:
          description: |
            Dynamic entity attributes set by the integration driver. These are key/value pairs, see [integration entity
            documentation](https://github.com/unfoldedcircle/core-api/tree/main/doc/entities) for detailed information.
          type: object
      required:
        - entity_id
        - entity_type
        - integration_id
        - name

    entityUpdate:
      description: |
        Entity update data.
        
        If used in an update operation:
        - Omitted properties will not change the configured value.
        - An empty `icon` value will remove the icon identifier.
        - `entity_id`, `entity_type` and `integration_id` cannot be changed.
        
        If returned in an `entity_change` event:
        - Additional properties from the regular `entity` object might be included as well.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        name:
          $ref: '#/components/schemas/languageText'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        # we had this in v1, but it's probably a risky feature allowing to change / disable features
        #        features:
        #          $ref: '#/components/schemas/entityFeatures'
        description:
          $ref: '#/components/schemas/languageText'
      required:
        - entity_id

    available_entity:
      description: Provided entity from an integration which can be configured to be used in the remote.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        entity_type:
          $ref: '#/components/schemas/entityType'
        integration_id:
          $ref: '#/components/schemas/integrationId'
        name:
          $ref: '#/components/schemas/languageText'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        features:
          $ref: '#/components/schemas/entityFeatures'
        area:
          description: Optional area if supported by the integration. E.g. `Living room`
          type: string
      required:
        - entity_id
        - entity_type
        - integration_id
        - name

    entityFeatures:
      type: array
      items:
        $ref: '#/components/schemas/entityFeature'
    entityFeature:
      type: string
    entityCommand:
      description: |
        Entity command identifier, as returned in the entity command metadata.
        
        This identifier may change at any time and may not be used for logic decisions in a client!
        If entity specific information is required, the entity object must be loaded from the `entity_id`.
      type: string
    entityType:
      description: Entity type.
      type: string
      enum:
        - button
        - climate
        - cover
        - light
        - media_player
        - sensor
        - switch
        - activity
        - macro
        - remote
        - ir_emitter

    ActivityGroup:
      description: |
        An activity group creates a dependency between multiple activities. Switching between activities will consider
        the current state of the included entities and only turn-on or -off the required entities.
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/entityId'
        name:
          $ref: '#/components/schemas/languageText'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        description:
          $ref: '#/components/schemas/languageText'
        options:
          $ref: '#/components/schemas/ActivityGroupOptions'
        activities:
          description: Included activities in the group.
          type: array
          items:
            $ref: '#/components/schemas/IncludedActivity'

    IncludedActivity:
      description: |
        Minimal activity object to show the activity in a user interface with it's friendly name and icon.
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        name:
          $ref: '#/components/schemas/languageText'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        state:
          $ref: '#/components/schemas/SequenceState'
      required:
        - entity_id
        - name

    SequenceState:
      description: |
        State of an Activity or Macro sequence:
        - `RUNNING`: Sequence is currently running
        - `COMPLETED`: Final state for a macro
        - `ON`: Final activity state for the `on` sequence
        - `OFF`: Final activity state for the `off` sequence
        - `STOPPED`: The sequence was aborted with a stop request
        - `TIMEOUT`: The sequence timed out and was aborted
        - `ERROR`: There was an error running the sequence and did not complete
      type: string
      enum:
        - RUNNING
        - COMPLETED
        - ON
        - OFF
        - STOPPED
        - TIMEOUT
        - ERROR

    ActivityGroupOptions:
      description: |
        üë∑Not yet finalized!

        Activity group specific options, e.g. how delays are handled when switching between activities.
      type: object
      properties:
        remove_turn_on_delays:
          description: |
            - `previous_cmd_skipped`: Only remove delay steps if the previous step is skipped, because the entity is in a
               power-on state.
            - `between_skipped_cmds`: Only remove delay steps if the previous and next power-on steps are skipped, because
               the entity is already in a power-on state.
            - `never`: Never remove delay steps in the on-sequence of the new activity.
          type: string
          enum:
            - previous_cmd_skipped
            - between_skipped_cmds
            - never
        turn_off_unused_entities:
          description: |
            - `always`: Always turn off unused entities in the previous activity.
            - `in_off_sequence`: Only turn off unused entities which are included in the off-sequence of the previous activity.
            - `never`: Never turn off entities in the previous activity.
          type: string
          enum:
            - always
            - in_off_sequence
            - never

    languageCode:
      description: |
        Language culture code: starting with the two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
        code, followed by an optional [ISO-3166 country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes),
        separated by an underscore.
        Examples: `en`, `en_UK`, `en_US`, `de`, `de_DE`, `de_CH` etc.
      type: string
      pattern: '^[a-z]{2}(_\w+)?$'

    countryCode:
      description: Two letter country code according to [ISO-3166-1-alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
      type: string
      format: iso-3166

    languageText: # untyped Map<string,string>
      type: object
      description: Display text in the UI. An english text should always be provided as fallback option.
      patternProperties:
        ^[a-z]{2}(_\w+)?$: # TODO make culture code pattern more strict or more open?
          type: string
          description: |
            Key value pairs of language texts. Key: ISO 639-1 code with optional country suffix to represent a `culture
            code`. Examples: `en`, `en_UK`, `en_US`, `de`, `de_CH`.   
            If we need to support more regional differences within a country, then the
            [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) might be a solution. This would even
            support the various Swiss German dialects!
      additionalProperties: false

    getConfigurationOptions:
      description: Optional request parameters.
      type: object
      properties:
        default:
          description: |
            Get default values instead of configured values. Intended for a "default settings" function in the UI.
          type: boolean
          default: false

    # =========================================================================
    # from OpenAPI
    # TODO use shared json schema! -> check if supported by new releases of the bundle & doc generation tools
    # =========================================================================

    configuration:
      type: object
      properties:
        button:
          $ref: '#/components/schemas/cfgButton'
        device:
          $ref: '#/components/schemas/cfgDevice'
        display:
          $ref: '#/components/schemas/cfgDisplay'
        features:
          $ref: '#/components/schemas/cfgFeatures'
        haptic:
          $ref: '#/components/schemas/cfgHaptic'
        localization:
          $ref: '#/components/schemas/cfgLocalization'
        network:
          $ref: '#/components/schemas/cfgNetwork'
        power_saving:
          $ref: '#/components/schemas/cfgPowerSaving'
        profile:
          $ref: '#/components/schemas/cfgProfile'
        software_update:
          $ref: '#/components/schemas/cfgSoftwareUpdate'
        sound:
          $ref: '#/components/schemas/cfgSound'
        voice_control:
          $ref: '#/components/schemas/cfgVoiceControl'
        restart_required:
          description: A configuration change requires a restart.
          type: boolean

    cfgButton:
      type: object
      properties:
        brightness:
          description: Button backlight brightness. 0 = off, 100 = max.
          type: integer
          minimum: 0
          maximum: 100
        static_color:
          $ref: '#/components/schemas/staticButtonColor'
        auto_brightness:
          description: When enabled, button backlight will automatically turn on in a dark room.
          type: boolean
        features:
          description: Supported features by the device.
          type: array
          items:
            type: string
      required:
        - brightness
        - auto_brightness

    cfgButtonUpdate:
      description: Button configuration model to update settings. Missing properties are not changed.
      type: object
      properties:
        brightness:
          description: Overall button backlight brightness. 0 = off, 100 = max.
          type: integer
          minimum: 0
          maximum: 100
        static_color:
          $ref: '#/components/schemas/staticButtonColor'
        auto_brightness:
          description: When enabled, button backlight will automatically turn on in a dark room.
          type: boolean

    staticButtonColor:
      description: Static color settings for all zones, if supported by the device.
      type: object
      properties:
        rgb:
          description: The overall rgb color value for the specified zones [int, int, int].
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 255
          minItems: 3
          maxItems: 3
        zones:
          description: The enabled backlight zones. All zones are enabled if no zones are set.
          type: array
          items:
            type: string
            minimum: 1
            maximum: 50
          maxItems: 32
      required:
        - rgb_color

    cfgDevice:
      type: object
      properties:
        name:
          description: Custom name of the remote
          type: string
          minimum: 1
          maximum: 50
      required:
        - name

    cfgDisplay:
      type: object
      properties:
        brightness:
          description: Display brightness.
          type: integer
          minimum: 0
          maximum: 100
        auto_brightness:
          description: Automatically adjust the display brightness based on ambient lighting conditions.
          type: boolean
      required:
        - brightness
        - auto_brightness

    cfgFeatures:
      type: array
      items:
        $ref: '#/components/schemas/cfgFeature'

    cfgFeature:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
        title:
          $ref: '#/components/schemas/languageText'
        description:
          $ref: '#/components/schemas/languageText'
        help_url:
          type: string
          format: url
      required:
        - id
        - enabled
        - title
        - description

    cfgFeatureUpdate:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
      required:
        - id
        - enabled

    cfgHaptic:
      type: object
      properties:
        enabled:
          description: Haptic feedback enabled.
          type: boolean
      required:
        - enabled

    cfgLocalization:
      type: object
      properties:
        language_code:
          $ref: '#/components/schemas/languageCode'
        country_code:
          $ref: '#/components/schemas/countryCode'
        time_zone:
          description: Time zone name according to IANA <https://www.iana.org/time-zones>, e.g. `Europe/Copenhagen`.
          type: string
        time_format_24h:
          type: boolean
        measurement_unit:
          $ref: '#/components/schemas/measurementUnit'
      required:
        - language_code
        - country_code
        - time_zone
        - time_format_24h
        - measurement_unit

    measurementUnit:
      type: string
      enum:
        - METRIC
        - US
        - UK

    cfgNetwork:
      type: object
      properties:
        bt_enabled:
          description: Enable Bluetooth.
          type: boolean
        wifi_enabled:
          description: Enable WiFi.
          type: boolean
        wake_on_wlan:
          $ref: '#/components/schemas/cfgNetworkWoWlan'
        bt:
          description: Temporary read-only Bluetooth information until dedicated BT management endpoint is provided.
          type: object
          properties:
            address:
              description: Bluetooth MAC address
              type: string
        ws:
          $ref: '#/components/schemas/cfgNetworkWs'
      required:
        - bt_enabled
        - wifi_enabled

    cfgNetworkUpdate:
      type: object
      properties:
        bt_enabled:
          description: Enable Bluetooth.
          type: boolean
        wifi_enabled:
          description: Enable WiFi.
          type: boolean
        wake_on_wlan:
          $ref: '#/components/schemas/cfgNetworkWoWlan'
        ws:
          $ref: '#/components/schemas/cfgNetworkWs'

    cfgNetworkWs:
      description: |
        Optional expert settings for WebSocket (re-)connection handling.  
        These settings are only intended for support issues and might change any time. Changed values are not supported
        and might make the system unstable!
      type: object
      properties:
        dock:
          type: object
        integration:
          type: object

    cfgNetworkWoWlan:
      description: Wake on WLAN settings
      type: object
      properties:
        enabled:
          description: Enable Wake on WLAN.
          type: boolean
      required:
        - enabled

    cfgPowerSaving:
      type: object
      properties:
        wakeup_sensitivity:
          description: Amount of movement needed to wake up the remote. 0 = disabled, 1 = min, 2 = medium, 3 = max.
          type: integer
          minimum: 0
          maximum: 3
        display_off_sec:
          type: integer
          minimum: 0
          maximum: 60
          description: Turn off display after given seconds.
        standby_sec:
          type: integer
          minimum: 0
          maximum: 10800
          description: Activate standby after given seconds. 0 disables standby mode.
      required:
        - wakeup_sensitivity
        - display_off_sec
        - standby_sec

    cfgProfile:
      type: object
      properties:
        has_admin_pin:
          description: An administrator pin has been set to use restricted profiles.
          type: boolean
      required:
        - has_admin_pin

    cfgProfileUpdate:
      type: object
      properties:
        admin_pin:
          $ref: '#/components/schemas/adminPin'

    cfgSoftwareUpdate:
      type: object
      properties:
        check_for_updates:
          description: |
            Automatically check for updates. If `auto_update` is enabled, the updates are automatically installed,
            otherwise the user is only notified about the updates.

            The time window when to check for new updates can be specified in `ota_window_start` and `ota_window_end`.
            Update checks are performed daily.
          type: boolean
        auto_update:
          description: |
            Automatically update the remote when new software is available. Requires `check_for_updates` to be enabled.

            Auto-installation of new firmwares will usually happen over 2 update checks: the first check finds a new
            update, downloads the metadata and schedules the firmware file to be downloaded. The next check will find the
            downloaded firmware file and installs it.
          type: boolean
        ota_window_start:
          description: |
            OTA update window start time: automatic update checks will only be performed during this time window.  
            Furthermore, the remote needs to be in the docking station and have enough battery charge.

            Format: time of day - as defined by `partial-time` in RFC3339
          type: string
          pattern: "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
        ota_window_end:
          description: |
            OTA update window end time.

            - If the end time is before the start time, the window will spawn over midnight, e.g. `23:00:00` - `01:00:00`.
            - Both start and end times are required, otherwise a default will be used.
          type: string
          pattern: "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$"
        channel:
          description: |
            Software update channels:
            - `DEFAULT`: release channel
            - `TESTING`: new test and beta versions which might become the next release if successfully tested.
            - `DEVELOPMENT`: untested alpha versions from the developers.  
               ‚ö†Ô∏è High chance of breaking changes, bugs and loosing data!

            Other channels than `DEFAULT` might require an access token in `channel_token`, since they are intended for
            a closed user group.
          type: string
          anyOf:
            - enum:
                - DEFAULT
                - TESTING
                - DEVELOPMENT
            - { }  # extensible enum: there might be more channels than defined above
        channel_token:
          description: |
            Optional access token which might be required for non-default software update channels.
            - This token is write only and cannot be retrieved anymore.
            - If omitted when updating settings: the stored token will be used.
            - If the `default` channel is selected when updating settings: the token will be ignored.
          type: string
          pattern: "^[-a-zA-Z0-9._~+/]{1,256}=?$"
        restart_required:
          description: "Optional response field only: a configuration change requires a restart."
          type: boolean
      required:
        - check_for_updates
        - auto_update

    cfgSound:
      type: object
      properties:
        enabled:
          description: Sound effects enabled.
          type: boolean
        volume:
          description: Sound effects volume.
          type: integer
          minimum: 0
          maximum: 100
      required:
        - enabled
        - volume

    cfgVoiceControl:
      type: object
      properties:
        microphone:
          description: |
            Enable microphone. Disabling the microphone will completely turn it off. Voice control and dictation won't work
            with the remote or integrations.
          type: boolean
        enabled:
          description: |
            Enable voice control. Disabling voice control will still let you use voice dictation with integrations. 
            Disable the microphone to completely switch off any microphone related functionality.
          type: boolean
        voice_assistant:
          $ref: '#/components/schemas/voiceAssistant'
      required:
        - microphone
        - enabled
        - voice_assistant

    voiceAssistant:
      description: üöß Supported voice assistants. TODO not yet implemented.
      type: string
      enum:
        - None

    integrationStatus:
      type: object
      description: |
        Integration instance status information. Intended to be used in a general overview of the integration drivers.
      properties:
        integration_id:
          $ref: '#/components/schemas/integrationId'
        name:
          $ref: '#/components/schemas/languageText'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        device_state:
          $ref: '#/components/schemas/deviceState'
        driver_state:
          $ref: '#/components/schemas/driverState'
        state:
          $ref: '#/components/schemas/integrationState'
        enabled:
          type: boolean

    deviceState:
      type: string
      enum:
        - UNKNOWN
        - CONNECTING
        - CONNECTED
        - DISCONNECTED
        - ERROR

    driverState:
      type: string
      enum:
        - NOT_CONFIGURED
        - IDLE
        - CONNECTING
        - ACTIVE
        - RECONNECTING
        - ERROR

    integrationState:
      type: string
      enum:
        - NOT_CONFIGURED
        - UNKNOWN
        - IDLE
        - CONNECTING
        - CONNECTED
        - DISCONNECTED
        - RECONNECTING
        - ACTIVE
        - ERROR

    integrationDriverType:
      type: string
      enum:
        - LOCAL
        - EXTERNAL

    integrationDriverInfo:
      description: |
        Summary data of an integration driver intended for overview screens.
      type: object
      properties:
        driver_id:
          $ref: '#/components/schemas/driverId'
        name:
          $ref: '#/components/schemas/languageText'
        developer_name:
          type: string
        driver_type:
          $ref: '#/components/schemas/integrationDriverType'
        driver_url:
          description: WebSocket URL of the driver
          type: string
          format: uri
          maxLength: 2048
        version:
          type: string
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        enabled:
          type: boolean
        driver_state:
          $ref: "#/components/schemas/driverState"
      required:
        - driver_id
        - name
        - driver_type
        - version
        - enabled

    integrationDriver: # YIO v1: supported_integration
      description: |
        Integration driver model.
        
        A driver represents the communication aspect of an integration. E.g. how one can connect to it
        and which API version it supports.
        
        One driver can provide multiple `Integration` instances. In the integration API they are
        referred to as `multi-device integrations` and use the optional `device_id` property where
        required. If a driver only provides a single instance, which is usually the default use case,
        then the `device_id` is not used (or set to the default value `main`).
      type: object
      properties:
        driver_id:
          $ref: '#/components/schemas/driverId'
        name:
          $ref: '#/components/schemas/languageText'
        driver_type:
          $ref: '#/components/schemas/integrationDriverType'
        driver_url:
          description: WebSocket URL of the driver. Only optional for integration driver metadata.
          type: string
          format: uri
          maxLength: 2048
        token:
          description: |
            Optional driver authentication token.
            
            Note: the token will not be returned to external clients!
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/intgAuthMethod'
        version:
          description: Driver version, [SemVer](https://semver.org/) preferred.
          type: string
          maxLength: 20
        min_core_api:
          description: |
            Optional version check: minimum required Core-API version in the remote.
          type: string
          maxLength: 20
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication.  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
        description:
          $ref: '#/components/schemas/languageText'
        developer:
          $ref: '#/components/schemas/driverDeveloper'
        home_page:
          description: Optional home page url for more information.
          type: string
          format: uri
          maxLength: 255
        device_discovery:
          description: Driver supports multi-device discovery. **Not yet supported**.
          type: boolean
        setup_data_schema:
          description: |
            Driver configuration metadata describing configuration parameters for the web-configurator.
            
            **Not yet finalized**.
          type: object
          #$ref: '#/components/schemas/settingsPage'
        release_date:
          description: Release date of the driver.
          type: string
          format: date
        driver_state:
          $ref: "#/components/schemas/driverState"
      required:
        - driver_id
        - name
        - version

    driverDeveloper:
      type: object
      description: Optional information about the integration developer.
      properties:
        name:
          description: Optional developer information to display in UI / web-configurator.
          type: string
          maxLength: 50
        url:
          description: Optional developer home page.
          type: string
          format: uri
          maxLength: 255
        email:
          description: Optional developer contact email.
          type: string
          format: email
          maxLength: 100

    integrationDriverUpdate:
      type: object
      description: |
        Integration driver update model. This model corresponds to the `IntegrationDriver` model except there are no required
        properties to allow patch updates. 

        - Specified properties will update the current values.
        - An empty value will delete the currently set property.
        - For the create operation, the `driver_id` identifier can be specified by the client, but it needs to be unique among
          all drivers. If omitted, a UUID will be assigned.  
          A manually assigned, short, human-readable identifier is recommended for better recognizability.
      properties:
        driver_id:
          $ref: '#/components/schemas/driverId'
        name:
          $ref: '#/components/schemas/languageText'
        driver_url:
          description: WebSocket URL of the driver
          type: string
          format: uri
          maxLength: 2048
        token:
          description: |
            Optional driver authentication token.
            
            Note: the token will not be returned to external clients!
          type: string
          maxLength: 2048
        auth_method:
          $ref: '#/components/schemas/intgAuthMethod'
        version:
          description: Driver version, [SemVer](https://semver.org/) preferred.
          type: string
          maxLength: 20
        min_core_api:
          description: |
            Optional version check: minimum required Core-API version in the remote.
          type: string
          maxLength: 20
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        enabled:
          description: |
            Enables or disables driver communication.  
            If disabled, all integration instances won't be activated, even if the instance is enabled.
          type: boolean
        description:
          $ref: '#/components/schemas/languageText'
        developer:
          $ref: '#/components/schemas/driverDeveloper'
        home_page:
          description: Optional home page url for more information.
          type: string
          format: uri
          maxLength: 255
        device_discovery:
          description: Driver supports multi-device discovery. **Not yet supported**.
          type: boolean
        setup_data_schema:
          description: |
            Driver configuration metadata describing configuration parameters for the web-configurator.
            
            **TODO Not yet finalized**.
          type: object
          #$ref: '#/components/schemas/settingsPage'
        release_date:
          description: Release date of the driver.
          type: string
          format: date
      required:
        - driver_id

    integration: # YIO v1: loaded_integration
      description: |
        An integration instance represents a configured integration driver.
        
        TODO add connection state?
      type: object
      properties:
        integration_id:
          $ref: '#/components/schemas/integrationId'
        driver_id:
          $ref: '#/components/schemas/driverId'
        device_id:
          $ref: '#/components/schemas/deviceId'
        name:
          $ref: '#/components/schemas/languageText'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        enabled:
          type: boolean
        setup_data:
          description: Optional configuration data if supported or required by the driver.
          type: object
        device_state:
          $ref: "#/components/schemas/deviceState"
      required:
        - integration_id
        - driver_id
        - name
        - enabled

    integrationUpdate:
      type: object
      description: |
        Integration instance update model. This model corresponds to the `Integration` model except there are no required
        properties to allow patch updates. 

        - Specified properties will update the current values.
        - An empty value will delete a set property.
        - `device_id` is only required for multi-device integrations.
      properties:
        integration_id:
          $ref: '#/components/schemas/integrationId'
        driver_id:
          $ref: '#/components/schemas/driverId'
        device_id:
          $ref: '#/components/schemas/deviceId'
        name:
          $ref: '#/components/schemas/languageText'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        enabled:
          description: Enable / disable flag. For development use only!
          type: boolean
        setup_data:
          description: Instance configuration object.
          type: object
      required:
        - integration_id

    IntegrationDiscoveryStatus:
      type: object
      properties:
        active:
          description: |
            Integration discovery still active or not.
          type: boolean
        integrations:
          type: array
          items:
            $ref: "#/components/schemas/integrationDiscoveryInformation"
      required:
        - discovery_active
        - integrations

    CreateIntegrationSetup:
      type: object
      properties:
        driver_id:
          $ref: '#/components/schemas/driverId'
        name:
          $ref: '#/components/schemas/languageText'
        setup_data:
          $ref: '#/components/schemas/SettingsValues'
        reconfigure:
          description: Reconfigure an already configured integration.
          type: boolean
      required:
        - driver_id

    IntegrationSetupInfo:
      type: object
      description: Integration setup state
      properties:
        id:
          type: string
        state:
          $ref: '#/components/schemas/integrationSetupState'
        error:
          $ref: '#/components/schemas/integrationSetupError'
        require_user_action:
          description: If set, the setup process waits for the specified user action.
          oneOf:
            - type: object
              properties:
                input:
                  type: object
                  $ref: '#/components/schemas/SettingsPage'
              required:
                - input
            - type: object
              properties:
                confirmation:
                  type: object
                  $ref: '#/components/schemas/ConfirmationPage'
              required:
                - confirmation
      required:
        - id
        - state

    entityChange:
      type: object
      description: |
        The `new_state` property is omitted for `event_type` = `delete`.  
        The client should reload all entity data, if only `event_type` is present.
      properties:
        event_type:
          $ref: '#/components/schemas/defaultChangeEventType'
        entity_id:
          $ref: '#/components/schemas/entityId'
        entity_type:
          $ref: '#/components/schemas/entityType'
        new_state:
          $ref: '#/components/schemas/entityUpdate'
      required:
        - event_type

    activityGroupChange:
      type: object
      description: |
        The `new_state` property is omitted for `event_type` = `delete`.  
        The client should reload all activity group data, if only `event_type` is present.
      properties:
        event_type:
          $ref: '#/components/schemas/defaultChangeEventType'
        group_id:
          $ref: '#/components/schemas/entityId'
        new_state:
          $ref: '#/components/schemas/ActivityGroup'
      required:
        - event_type

    activeProfileChange:
      type: object
      description: |
        The `new_state.profile` object contains additional profile data of the new active `profile_id`.
      properties:
        profile_id:
          $ref: '#/components/schemas/simpleId'
        new_state:
          type: object
          properties:
            profile:
              $ref: '#/components/schemas/profileData'
      required:
        - profile_id

    profileChange:
      type: object
      description: |
        The `new_state` property is omitted for `event_type` = `delete`.
      properties:
        event_type:
          $ref: '#/components/schemas/defaultChangeEventType'
        profile_id:
          $ref: '#/components/schemas/simpleId'
        page_id:
          $ref: '#/components/schemas/simpleId'
        group_id:
          $ref: '#/components/schemas/simpleId'
        new_state:
          type: object
          properties:
            profile:
              $ref: '#/components/schemas/profileData'
            page:
              $ref: '#/components/schemas/pageData'
            group:
              $ref: '#/components/schemas/groupData'
      required:
        - event_type
        - profile_id

    integrationDriverChange:
      type: object
      description: |
        The `new_state` property is omitted for `event_type` = `delete`.
      properties:
        event_type:
          $ref: '#/components/schemas/defaultChangeEventType'
        driver_id:
          $ref: '#/components/schemas/driverId'
        new_state:
          $ref: '#/components/schemas/integrationDriverUpdate'
      required:
        - event_type
        - driver_id

    integrationChange:
      type: object
      description: |
        The `new_state` property is omitted for `event_type` = `delete`.
      properties:
        event_type:
          $ref: '#/components/schemas/defaultChangeEventType'
        integration_id:
          $ref: '#/components/schemas/integrationId'
        new_state:
          $ref: '#/components/schemas/integrationUpdate'
      required:
        - event_type
        - integration_id

    integrationStateData:
      type: object
      properties:
        driver_id:
          $ref: '#/components/schemas/driverId'
        device_state:
          $ref: '#/components/schemas/deviceState'
        driver_state:
          $ref: '#/components/schemas/driverState'
      required:
        - driver_id

    defaultChangeEventType:
      type: string
      enum:
        - change
        - new
        - delete

    configurationChange:
      type: object
      properties:
        new_state:
          $ref: '#/components/schemas/configuration'
      required:
        - new_state

    irLearning:
      type: object
      properties:
        device_id:
          description: IR emitter device identifier.
          type: string
        event_type:
          type: string
          enum:
            - START
            - STOP
            - CODE
        code:
          $ref: '#/components/schemas/irLearningCode'
      required:
        - device_id
        - event_type

    irLearningCode:
      type: object
      properties:
        format:
          description: IR format of learned IR code data.
          type: string
          enum:
            - HEX
            - PRONTO
        value:
          description: Learned IR code data.
          type: string
      required:
        - format
        - value

    dockId:
      type: string
      format: "^[a-zA-Z0-9\\-\\.]+$"
      minLength: 1
      maxLength: 64
      description: Dock identifier

    dockName:
      type: string
      minLength: 1
      maxLength: 40
      description: User assignable friendly name to use instead of dock_id (service name).

    dockUrl:
      type: string
      maxLength: 64
      description: Dock WebSocket URL to override auto-discovery from the service name in `dock_id`.

    dockToken:
      type: string
      format: password
      minLength: 1
      maxLength: 40
      description: Access token

    dockFilter:
      description: Optional filters
      type: object
      properties:
        active:
          type: boolean

    dockChangeData:
      type: object
      description: |
        The `new_state` property is omitted for `event_type` = `delete`.
      properties:
        event_type:
          $ref: '#/components/schemas/defaultChangeEventType'
        dock_id:
          $ref: '#/components/schemas/entityId'
        new_state:
          $ref: '#/components/schemas/dockConfiguration'
      required:
        - event_type
        - dock_id

    dockConfiguration:
      type: object
      properties:
        dock_id:
          type: string
        name:
          type: string
        custom_ws_url:
          type: string
        resolved_ws_url:
          type: string
          maxLength: 64
          description: Resolved WebSocket URL from the service name in `dock_id` if no `custom_ws_url` is used.
        active:
          type: boolean
          description: |
            Enable flag: active docks are automatically connected when network is available.
        model:
          type: string
          description: Dock model number.
        revision:
          type: string
          description: Dock revision.
        serial:
          type: string
          description: Dock serial number.
        led_brightness:
          type: integer
          minimum: 0
          maximum: 100
        eth_led_brightness:
          type: integer
          minimum: 0
          maximum: 100
        connection_type:
          type: string
          description: |
            Network connection of the dock: `Ethernet` or `WiFi`.
        version:
          type: string
          description: Firmware version
        state:
          $ref: '#/components/schemas/dockState'
        learning_active:
          type: boolean
          description: Dock is in IR learning mode.
        port_count:
          type: integer
          minimum: 0
        ports:
          description: 3Ô∏è‚É£ External port mode configuration.
          type: array
          items:
            $ref: '#/components/schemas/ExternalPortConfiguration'
        volume:
          description: 3Ô∏è‚É£ Speaker volume.
          type: integer
          minimum: 0
          maximum: 100
        description:
          $ref: '#/components/schemas/description'
      required:
        - dock_id
        - active

    dockConfigurationRequest: # from OpenAPI
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/dockId'
        name:
          $ref: '#/components/schemas/dockName'
        custom_ws_url:
          $ref: '#/components/schemas/dockUrl'
        token:
          $ref: '#/components/schemas/dockToken'
        active:
          type: boolean
          description: |
            Enable flag: active docks are automatically connected when network is available.
        model:
          type: string
          description: Dock model number.
        description:
          $ref: '#/components/schemas/description'
      required:
        - dock_id
        - active

    dockUpdateRequest:
      type: object
      properties:
        dock_id:
          $ref: '#/components/schemas/dockId'
        name:
          type: string
          maxLength: 40
          description: User assignable friendly name to use instead of dock_id (service name).
        custom_ws_url:
          $ref: '#/components/schemas/dockUrl'
        token:
          type: string
          maxLength: 40
          description: Access token to connect to the dock.
        active:
          type: boolean
          description: Auto connect to dock when network is available.
        description:
          type: string
          description: Optional description.
        wifi:
          type: object
          properties:
            ssid:
              description: Network name (service set identifier)
              type: string
              maxLength: 32
            password:
              type: string
              maxLength: 63
      required:
        - dock_id

    dockSystemInfo:
      type: object
      properties:
        name:
          type: string
        hostname:
          type: string
        model:
          type: string
        revision:
          type: string
        version:
          type: string
        serial:
          type: string
        ir_learning:
          type: boolean
        ethernet:
          type: boolean
        wifi:
          type: boolean
        ssid:
          description: Network name (service set identifier)
          type: string

    dockStateData:
      type: object
      properties:
        dock_id:
          type: string
        state:
          $ref: '#/components/schemas/dockState'
      required:
        - dock_id
        - state

    dockState:
      type: string
      enum:
        - IDLE
        - CONNECTING
        - ACTIVE
        - RECONNECTING
        - ERROR

    dockPortMode:
      type: object
      properties:
        dock_id:
          type: string
        port:
          $ref: '#/components/schemas/ExternalPortConfiguration'
      required:
        - dock_id
        - port

    dockDiscovery:
      type: object
      properties:
        event_type:
          type: string
          enum:
            - START
            - STOP
            - DISCOVER
        dock:
          $ref: '#/components/schemas/dockDiscoveryInformation'
      required:
        - event_type

    dockDiscoveryInformation:
      type: object
      properties:
        id:
          type: string
        configured:
          type: boolean
        friendly_name:
          type: string
        address:
          description: Resolved device network address.
          type: string
        model:
          description: Detected dock model.
          type: string
        version:
          description: Detected firmware version.
          type: string
        discovery_type:
          $ref: '#/components/schemas/discoveryType'
        timestamp:
          description: Timestamp of dock discovery.
          type: string
          format: date-time
        bt:
          type: object
          description: Optional Bluetooth discovery information. Not present for network device.
          properties:
            signal:
              description: Bluetooth signal strength. 0 = min, 5 = max.
              type: integer
              minimum: 0
              maximum: 5
            last_seen_sec:
              description: |
                Last time the device was seen on a Bluetooth scan. Values over 15 sec indicate that the device is no longer
                reachable.
              type: integer
              format: int32
      required:
        - id
        - configured
        - discovery_type

    discoveryType:
      type: string
      description: |
        Device discovery type:
        - `BT`: Bluetooth
        - `NET`: LAN or WAN network
      enum:
        - BT
        - NET

    createDockSetup:
      type: object
      oneOf:
        - type: object
          properties:
            discovery:
              $ref: "#/components/schemas/dockSetupFromDiscovery"
          required:
            - discovery
        - type: object
          properties:
            manually:
              $ref: "#/components/schemas/dockSetup"
          required:
            - manual

    dockSetup:
      type: object
      description: Dock setup data
      properties:
        dock_id:
          $ref: "#/components/schemas/dockId"
        name:
          $ref: '#/components/schemas/dockName'
        token:
          $ref: '#/components/schemas/dockToken'
        custom_ws_url:
          $ref: '#/components/schemas/dockUrl'
        description:
          $ref: '#/components/schemas/description'
        wifi:
          description: |
            Optional WiFi information if the dock should connect to (or be prepared for) WiFi instead of Ethernet.
          type: object
          properties:
            ssid:
              description: Network name (service set identifier)
              type: string
            password:
              type: string
              format: password
          required:
            - ssid
            - password
      required:
        - name

    dockSetupFromDiscovery: # subset of DockDiscovery
      type: object
      properties:
        id:
          $ref: "#/components/schemas/dockId"
        friendly_name:
          $ref: "#/components/schemas/dockName"
        address:
          description: Resolved device network address.
          type: string
        model:
          description: Detected dock model.
          type: string
        version:
          description: Detected firmware version.
          type: string
        discovery_type:
          $ref: "#/components/schemas/discoveryType"
      required:
        - id
        - discovery_type

    dockSetupInfo:
      type: object
      description: Dock setup state
      properties:
        id:
          type: string
        name:
          $ref: "#/components/schemas/dockName"
        discovery_type:
          $ref: "#/components/schemas/discoveryType"
        state:
          $ref: "#/components/schemas/dockSetupState"
        error:
          $ref: "#/components/schemas/dockSetupError"
      required:
        - id
        - state

    dockSetupChange:
      type: object
      properties:
        event_type:
          type: string
          enum:
            - START
            - SETUP
            - STOP
        dock_id:
          type: string
        state:
          $ref: '#/components/schemas/dockSetupState'
        error:
          $ref: '#/components/schemas/dockSetupError'
      required:
        - event_type
        - dock_id
        - state

    dockSetupState:
      type: string
      enum:
        - NEW
        - CONFIGURING
        - UPLOADING
        - RESTARTING
        - OK
        - ERROR

    dockSetupError:
      type: string
      enum:
        - NONE
        - NOT_FOUND
        - CONNECTION_ERROR
        - CONNECTION_REFUSED
        - AUTHORIZATION_ERROR
        - TIMEOUT
        - ABORT
        - PERSISTENCE_ERROR
        - OTHER

    dockUpdateChange:
      type: object
      properties:
        event_type:
          type: string
          enum:
            - START
            - UPDATE
            - STOP
        dock_id:
          type: string
        update_id:
          description: Update identifier
          type: string
        version:
          description: Firmware version being installed
          type: string
        progress:
          description: Update progress in percent
          type: integer
          format: int32
          minimum: 0
          maximum: 100
        state:
          $ref: '#/components/schemas/dockSetupState'
        error:
          $ref: '#/components/schemas/dockSetupError'
      required:
        - event_type
        - dock_id
        - state

    AvailableSystemUpdateResponse:
      type: object
      properties:
        update_in_progress:
          type: boolean
        last_check_date:
          description: Last update check timestamp.
          type: string
          format: date-time
        next_check_date:
          description: Next scheduled update check timestamp.
          type: string
          format: date-time
        update_check_enabled:
          type: boolean
        installed_version:
          description: Installed system version.
          type: string
        available:
          type: array
          items:
            $ref: '#/components/schemas/AvailableSystemUpdate'
      required:
        - update_check_enabled
        - installed_version
        - available

    AvailableSystemUpdate:
      type: object
      properties:
        id:
          description: Update identifier
          type: string
        title:
          type: string
        description:
          $ref: '#/components/schemas/languageText'
        version:
          type: string
        channel:
          $ref: '#/components/schemas/UpdateChannel'
        release_date:
          type: string
          format: date
        size:
          type: integer
          format: int64
        release_notes_url:
          type: string
          format: uri
        download:
          $ref: '#/components/schemas/UpdateDownloadState'
      required:
        - id
        - title
        - description
        - version
        - release_date
        - size

    UpdateChannel:
      type: string
      enum:
        - STABLE
        - TESTING
        - DEVELOPMENT

    UpdateDownloadState:
      description: |
        Download status:
        - `PENDING`: update is scheduled to download
        - `DOWNLOADING`: update is currently downloading
        - `DOWNLOADED`: update has been downloaded and is ready to be installed
        - `ERROR`: download failed
      type: string
      enum:
        - PENDING
        - DOWNLOADING
        - DOWNLOADED
        - ERROR

    SystemUpdateResponse:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/SystemUpdateState'
        update_id:
          description: Update identifier
          type: string
      required:
        - state
        - update_id

    softwareUpdateEvent:
      type: object
      properties:
        event_type:
          type: string
          enum:
            - START
            - PROGRESS
            - STOP
        update_id:
          description: Update identifier
          type: string
        progress:
          $ref: '#/components/schemas/SystemUpdateProgress'
      required:
        - event_type
        - update_id

    powerModeChangeEvent:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/PowerMode'
      required:
        - mode

    batteryStatus:
      type: object
      properties:
        capacity:
          description: Current battery charge in %
          type: integer
          minimum: 0
          maximum: 100
        status:
          $ref: '#/components/schemas/PowerStatus'
        power_supply:
          description: Power supply online
          type: boolean
      required:
        - capacity
        - status

    SystemUpdateProgress:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/SystemUpdateState'
        update_id:
          description: Update identifier
          type: string
        download_percent:
          description: Percent of download
          type: integer
        download_bytes:
          description: Total of bytes to be downloaded
          type: integer
          format: int64
        total_steps:
          description: Total number of update steps
          type: integer
        current_step:
          description: Current installation step index
          type: integer
        current_percent:
          description: Percent in current step
          type: integer
      required:
        - state
        - update_id

    SystemUpdateState:
      type: string
      enum:
        - IDLE
        - START
        - RUN
        - SUCCESS
        - FAILURE
        - DOWNLOAD
        - DONE
        - SUB_PROCESS
        - PROGRESS

    integrationDiscoveryEvent:
      type: object
      properties:
        event_type:
          type: string
          enum:
            - START
            - STOP
            - DISCOVER
        integration:
          $ref: '#/components/schemas/integrationDiscoveryInformation'
      required:
        - event_type

    integrationDiscoveryInformation:
      type: object
      properties:
        id:
          type: string
        configured:
          description: |
            Integration configuration flag:
            - true: driver has already been configured
            - false: driver has not yet been configured
          type: boolean
        name:
          type: string
        icon:
          type: string
        developer_name:
          type: string
        driver_url:
          description: Resolved driver url.
          type: string
        pwd_protected:
          description: Driver requires a connection password.
          type: boolean
        version:
          description: Detected driver version.
          type: string
        timestamp:
          description: Timestamp of driver discovery.
          type: string
          format: date-time
      required:
        - id
        - configured
        - name
        - driver_url
        - timestamp

    integrationSetupChange: # TODO finalize object
      type: object
      properties:
        event_type:
          description: |
            - `START`: setup started
            - `SETUP`: setup in progress. See `state` enum for current setup state.
            - `STOP`: setup finished, either with: `state: OK` for successful setup, or `state: ERROR` if setup 
                      didn't completed successfully.
          type: string
          enum:
            - START
            - SETUP
            - STOP
        driver_id:
          type: string
        state:
          $ref: '#/components/schemas/integrationSetupState'
        error:
          $ref: '#/components/schemas/integrationSetupError'
        require_user_action:
          description: If set, the setup process waits for the specified user action.
          type: object
          oneOf:
            - type: object
              properties:
                input:
                  type: object
                  $ref: '#/components/schemas/SettingsPage'
              required:
                - input
            - type: object
              properties:
                confirmation:
                  type: object
                  $ref: '#/components/schemas/ConfirmationPage'
              required:
                - confirmation
      required:
        - event_type
        - driver_id
        - state

    integrationSetupState:
      description: |
        - `SETUP`: setup in progress
        - `WAIT_USER_ACTION`: setup flow is waiting for user input. See `require_user_action` for requested input.
        - `OK`: setup finished successfully
        - `ERROR`: setup error
      type: string
      enum:
        - SETUP
        - WAIT_USER_ACTION
        - OK
        - ERROR

    integrationSetupError:
      description: |
        More detailed error reason for `state: ERROR` condition.
      type: string
      enum:
        - NONE
        - NOT_FOUND
        - CONNECTION_REFUSED
        - AUTHORIZATION_ERROR
        - TIMEOUT
        - OTHER
    
    ConfirmationPage:
      description: Confirmation screen
      type: object
      properties:
        title:
          $ref: '#/components/schemas/languageText'
        message1:
          description: Message to display between title and image (if supplied). Supports Markdown formatting.
          $ref: '#/components/schemas/languageText'
        image:
          description: |
            Optional base64-encoded image.

            TODO maximum encoded length to avoid WebSocket continuation frames, supported image formats
            (png & svg?), max height & width
          type: string
          format: byte
          maxLength: 32768
        message2:
          description: Message to display below message1 or image (if supplied). Supports Markdown formatting.
          $ref: '#/components/schemas/languageText'
      required:
        - title

    SettingsPage:
      description: Settings definition page, e.g. to configure an integration driver.
      type: object
      properties:
        title:
          $ref: '#/components/schemas/languageText'
        settings:
          description: One or multiple input field definitions, with optional pre-set values.
          type: array
          items:
            $ref: '#/components/schemas/Setting'
      required:
        - title
        - settings

    Setting:
      description: |
        An input setting is of a specific type defined in `field.type` which defines how it is presented to the user.

        Inspired by the [Homey SDK settings](https://apps.developer.homey.app/the-basics/devices/settings) concept.
      type: object
      properties:
        id:
          description: Unique identifier of the setting to be returned with the entered value.
          type: string
          maxLength: 50
        label:
          $ref: '#/components/schemas/languageText'
        field:
          oneOf:
            - $ref: '#/components/schemas/SettingTypeNumber'
            - $ref: '#/components/schemas/SettingTypeText'
            - $ref: '#/components/schemas/SettingTypeTextArea'
            - $ref: '#/components/schemas/SettingTypePassword'
            - $ref: '#/components/schemas/SettingTypeCheckbox'
            - $ref: '#/components/schemas/SettingTypeDropdown'
            - $ref: '#/components/schemas/SettingTypeLabel'
      required:
        - id
        - label
        - field

    SettingTypeNumber:
      description: |
        Number input with optional `min`, `max`, `steps` and `decimals` properties. The default value must be specified
        in `value`. An optional unit of the number setting can be specified in `units`, which will be displayed next to
        the input field.
      type: object
      properties:
        number:
          type: object
          properties:
            value:
              description: Default value for input field.
              type: number
            min:
              description: "Optional validation: minimum allowed value (inclusive)."
              type: number
            max:
              description: "Optional validation: maximum allowed value (inclusive)."
              type: number
            steps:
              description: |
                Optional validation: allowed step increment between values. Might also be used in the UI for input helpers.
              type: number
            decimals:
              description: "Number of decimal places. 0 = integer value"
              type: integer
              minimum: 0
              default: 0
            unit:
              $ref: '#/components/schemas/languageText'
          required:
            - value
      required:
        - number

    SettingTypeText:
      description: |
        Single line of text input.

        TODO: format specifier for e.g. email, url, date, datetime etc.?
      type: object
      properties:
        text:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
            regex:
              description: Optional regex validation pattern for the input value.
              type: string
      required:
        - text

    SettingTypeTextArea:
      description: Multi-line text input, e.g. for providing a description.
      type: object
      properties:
        textarea:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
      required:
        - textarea

    SettingTypePassword:
      description: |
        Password or pin entry field with the input text hidden from the user. Otherwise the same as text input.
      type: object
      properties:
        password:
          type: object
          properties:
            value:
              description: Optional default value.
              type: string
              format: password
            regex:
              description: Optional regex validation pattern for the input value.
              type: string
      required:
        - password

    SettingTypeCheckbox:
      description: Checkbox setting with `true` / `false` values.
      type: object
      properties:
        checkbox:
          type: object
          properties:
            value:
              description: Initial setting.
              type: boolean
          required:
            - value
      required:
        - checkbox

    SettingTypeDropdown:
      description: Dropdown setting to pick a single value from a list. All values must be strings.
      type: object
      properties:
        dropdown:
          type: object
          properties:
            value:
              description: Pre-selected dropdown id
              type: string
            items:
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Selection identifier.
                    type: string
                  label:
                    $ref: '#/components/schemas/languageText'
                required:
                  - id
                  - label
          required:
            - items
      required:
        - dropdown

    SettingTypeLabel:
      description: |
        Additional read-only text for information purpose between other settings. Supports Markdown formatting.
      type: object
      properties:
        label:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/languageText'
          required:
            - value
      required:
        - label

    SettingsValues:
      description: |
        User input result of a SettingsPage as key values.
        - key: id of the field
        - value: entered user value as string. This is either the entered text or number, selected checkbox state or the
          selected dropdown item id.  
          ‚ö†Ô∏è Non native string values as numbers or booleans are represented as string values!
      type: object
      additionalProperties:
        type: string

    description:
      type: string
      maxLength: 255
      description: Optional description

    groups:
      type: array
      items:
        $ref: '#/components/schemas/group'

    group:
      type: object
      description: |
        The shown group switch in the UI is automatically determined by the capabilities of the group's entities.
      properties:
        group_id:
          $ref: '#/components/schemas/simpleId'
        profile_id:
          $ref: '#/components/schemas/simpleId'
        name:
          $ref: '#/components/schemas/name'
          description: Group name. Must be unique within the profile.
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        entities:
          type: array
          description: Entity identifiers belonging to the group
          items:
            $ref: '#/components/schemas/simpleId'
        description:
          $ref: '#/components/schemas/description'
      required:
        - group_id
        - profile_id
        - name
        - entities

    groupData:
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/simpleId'
        profile_id:
          $ref: '#/components/schemas/simpleId'
        name:
          $ref: '#/components/schemas/name'
          description: Group name
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        entities:
          type: array
          description: |
            Changed or re-ordered group entities.
            An empty array remove all entities.
            If the property is not specified the defined entities will not be changed.
          items:
            $ref: '#/components/schemas/simpleId'
        description:
          $ref: '#/components/schemas/description'

    iconIdentifier:
      type: string
      format: "^[a-z][a-z0-9]+:[a-zA-Z0-9\\-_\\.]+$"
      maxLength: 255
      description: |
        Optional icon identifier. The identifier consists of a prefix and a resource identifier, separated by `:`.  
        Available prefixes:
        - `uc:` - integrated icon font 
        - `custom:` - custom icon resource
        - `ctv:` - custom TV icon resource

        Other prefixes might be rejected by the service.

        An empty identifier, while updating the object, removes the existing icon.

    imageIdentifier:
      type: string
      format: "^[a-z][a-z0-9]+:[a-zA-Z0-9\\-_\\.]+$"
      maxLength: 255
      description: |
        Optional image identifier. The identifier consists of a prefix and a resource identifier, separated by `:`.  
        Available prefixes:
        - `custom:` - custom image resource

        Other prefixes might be rejected by the service.
        
        An empty identifier, while updating the object, removes the existing image.

    name:
      type: string
      minLength: 1
      maxLength: 50

    pages:
      type: array
      items:
        $ref: '#/components/schemas/page'

    page:
      type: object
      properties:
        page_id:
          $ref: '#/components/schemas/simpleId'
        profile_id:
          $ref: '#/components/schemas/simpleId'
        name:
          $ref: '#/components/schemas/name'
          description: Group name. Must be unique within the profile.
        image:
          type: string
          description: Optional image identifier
        items:
          type: array
          description: Page items
          items:
            $ref: '#/components/schemas/pageItem'
        pos:
          type: integer
          format: int32
          minimum: 0
          description: Position of the page within the profile
      required:
        - page_id
        - profile_id
        - name
        - items
        - pos

    pageItem:
      type: object
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        group_id:
          $ref: '#/components/schemas/simpleId'
        pos:
          type: integer
          format: int32
          minimum: 0
          description: |
            Position of the item within the page. Returned on retrieval, ignored for page updates where the position is
            taken from the page array position.
      oneOf:
        - required: [ entity_id ]
        - required: [ group_id ]

    pageData:
      description: Profile page data to create or update an existing page.
      type: object
      properties:
        page_id:
          $ref: '#/components/schemas/simpleId'
        profile_id:
          $ref: '#/components/schemas/simpleId'
        name:
          $ref: '#/components/schemas/name'
          description: Page name
        image:
          $ref: '#/components/schemas/imageIdentifier'
        items:
          type: array
          description: |
            Changed or re-ordered page items.
            - An empty array removes all items.
            - If the property is not specified the defined items will not be changed.
          items:
            $ref: '#/components/schemas/pageItem'
      required:
        - page_id
        - profile_id
        - name

    profiles:
      type: array
      items:
        $ref: '#/components/schemas/profile'

    profile:
      type: object
      properties:
        profile_id:
          $ref: '#/components/schemas/simpleId'
        name:
          $ref: '#/components/schemas/name'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        restricted:
          description: A restricted profile cannot change settings. Switching profiles requires the admin pin.
          type: boolean
        description:
          $ref: '#/components/schemas/description'
      required:
        - profile_id
        - name
        - protected

    profileData:
      description: |
        Profile data to create or modify a profile. Missing properties are not updated when modifying an existing profile.
      type: object
      properties:
        profile_id:
          $ref: '#/components/schemas/simpleId'
        name:
          $ref: '#/components/schemas/name'
        icon:
          $ref: '#/components/schemas/iconIdentifier'
        restricted:
          description: A restricted profile cannot change settings. Switching profiles requires the admin pin.
          type: boolean
        description:
          $ref: '#/components/schemas/description'
        pages:
          description: |
            Used for update only: modify page order or delete pages in profile.
            - An empty `pages` array will delete all pages and containing groups!
            - If the property is missing, the existing page configuration will not be changed.
          type: array
          items:
            $ref: '#/components/schemas/simpleId'
      required:
        - profile_id

    adminPin:
      type: string
      maxLength: 20
      description: Optional administrator pin.

    simpleId:
      type: string
      format: "^[a-zA-Z0-9\\-_\\.]+$"
      minLength: 1
      maxLength: 36
      description: Simple string identifier, also usable as URL parameter or file identifier.

    driverId:
      type: string
      format: "^[a-zA-Z0-9\\-_]+$"
      minLength: 1
      maxLength: 36
      description: Unique integration driver identifier, e.g. `hass`, `homey`, etc.

    integrationId:
      type: string
      format: "^[a-zA-Z0-9\\-_\\.]+$"
      minLength: 1
      maxLength: 73
      description: |
        Unique integration instance identifier. Automatically created by the system when creating a new instance from a driver.

    deviceId:
      type: string
      format: "^[a-zA-Z0-9\\-_]+$"
      minLength: 1
      maxLength: 36
      description: Device identifier for multi-device integrations only.

    entityId:
      type: string
      format: "^[a-zA-Z0-9\\-_\\.]+$"
      minLength: 1
      maxLength: 110
      description: UC remote entity identifier.

    intgAuthMethod:
      type: string
      description: |
        Integration driver authentication method if a token is required.

        The JSON `auth` message is used if a token is configured but no authentication method is set.
      enum:
        - HEADER
        - MESSAGE

    # --- OpenApi Wifi.yaml

    ApScanStatus:
      type: object
      properties:
        active:
          type: boolean
        scan:
          type: array
          items:
            $ref: '#/components/schemas/AccessPointScan'
      required:
        - active
        - scan

    AccessPointScan:
      type: object
      properties:
        bssid:
          description: MAC physical address of the access point (basic service set identifier)
          type: string
        frequency:
          description: Frequency of the channel in MHz (e.g., 2412 = channel 1)
          type: string
        signal_level:
          description: Signal level (dBm)
          type: integer
        auth:
          description: Authentication method
          type: string
        ssid:
          description: |
            SSID network name as friendly UTF-8 representation. Use this name to present the network to users, but not for
            adding a new network configuration. This is a lossy conversion from the native SSID byte array.
          type: string
        ssid_hex:
          description: |
            Hex encoded string of the native SSID byte array.

            Always use this representation, when connecting to a network from a scan result.
          type: string
      required:
        - bssid
        - ssid
        - ssid_hex

    WifiStatus:
      type: object
      properties:
        wpa_state:
          $ref: '#/components/schemas/WpaState'
        id:
          description: Network identifier
          type: integer
        bssid:
          description: MAC physical address of the access point (basic service set identifier)
          type: string
        ssid:
          description: Network name (service set identifier)
          type: string
        ssid_hex:
          description: Hex encoded string of the native SSID byte array.
          type: string
        freq:
          description: Frequency of the channel in MHz (e.g., 2412 = channel 1)
          type: integer
        address:
          description: MAC physical address of the WiFi adapter
          type: string
        pairwise_cipher:
          type: string
        group_cipher:
          type: string
        key_mgmt:
          type: string
        ip_address:
          description: Client IP address
          type: string
        noise:
          description: Noise level (dBm)
          type: integer
        rssi:
          description: Signal level (dBm)
          type: integer
        avg_rssi:
          description: Average RSSI (dBm)
          type: integer
        est_throughput:
          description: Estimated throughput in kbps
          type: integer
        snr:
          description: Signal-to-noise ratio in dB
          type: integer
        linkspeed:
          description: Link speed (Mbps)
          type: integer
      required:
        - wpa_state

    CreateWifiNetwork:
      type: object
      properties:
        ssid:
          description: |
            Network name (service set identifier).
            
            Only use for valid UTF-8 names, when creating a new configuration and not from a scan result.    
            Always use `ssid_hex`, when adding a network configuration from a scan result! Otherwise it's not guaranteed,
            that the correct network is configured. The SSID name can contain non-displayable characters.
          type: string
          minLength: 1
          maxLength: 32
        ssid_hex:
          description: |
            Hex encoded string of the native SSID byte array, returned from a network scan.
          minLength: 2
          maxLength: 64
        password:
          type: string
          minLength: 1
          maxLength: 63

    # change to OpenAPI: enhanced with id
    ModifyWifiNetwork:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
        password:
          type: string
          minLength: 1
          maxLength: 63
      required:
        - id
        - password

    SavedNetworks:
      type: array
      items:
        $ref: '#/components/schemas/SavedNetwork'

    SavedNetwork:
      description: A saved network configuration (known network)
      type: object
      properties:
        id:
          description: Network identification, used for further operations on this network
          type: integer
        ssid:
          description: Network name (service set identifier)
          type: string
        ssid_hex:
          description: Hex encoded string of the native SSID byte array.
          type: string
        secured:
          description: Secured or unsecured network
          type: boolean
        signal_level:
          type: integer
        state:
          $ref: '#/components/schemas/NetworkState'
      required:
        - id
        - ssid
        - ssid_hex
        - secured

    WpaState:
      description: |
        - `UNKNOWN`: Unknown state. The driver returned a state which could not be handled.
        - `ERROR`: Error retrieving state information.
        - `DISCONNECTED`: This state indicates that client is not associated, but is likely to start looking for an access point. This state is entered when a connection is lost.
        - `INTERFACE_DISABLED`: This state is entered if the network interface is disabled. The driver refuses any new operations that would use the radio until the interface has been enabled.
        - `INACTIVE`: This state is entered if there are no enabled networks in the configuration. The driver is not trying to associate with a new network and external interaction (e.g. add or enable a network) is needed to start association.
        - `SCANNING`: Scanning for a network.
        - `AUTHENTICATED`: Trying to authenticate with a BSS/SSID.
        - `ASSOCIATING`: Trying to associate with a BSS/SSID.
        - `ASSOCIATED`: Association completed.
        - `FOUR_WAY_HANDSHAKE`: WPA 4-Way Key Handshake in progress.
        - `GROUP_HANDSHAKE`: WPA Group Key Handshake in progress.
        - `COMPLETED`: All authentication completed.
      type: string
      enum:
        - UNKNOWN
        - ERROR
        - DISCONNECTED
        - INTERFACE_DISABLED
        - INACTIVE
        - SCANNING
        - AUTHENTICATED
        - ASSOCIATING
        - ASSOCIATED
        - FOUR_WAY_HANDSHAKE
        - GROUP_HANDSHAKE
        - COMPLETED

    WifiCmd:
      type: string
      enum:
        - DISCONNECT
        - RECONNECT
        - REASSOCIATE
        - ENABLE_ALL_NETWORKS
        - DISABLE_ALL_NETWORKS

    WifiNetworkCmd:
      type: string
      enum:
        - ENABLE
        - DISABLE
        - SELECT

    NetworkState:
      type: string
      enum:
        - CONNECTED
        - OUT_OF_RANGE
        - DISABLED
        - TEMPORARY_DISABLED

    WifiChange:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/WifiEvent'

    WifiEvent:
      description: |
        WiFi event:
        - `CONNECTED`: Authentication completed successfully and data connection enabled.
        - `DISCONNECTED`: Disconnected from access point and data connection not available.
        - `SCAN_STARTED`: Network scan started.
        - `SCAN_COMPLETED`: New network scan results available.
        - `SCAN_FAILED`: Network scanning failed.
        - `NETWORK_NOT_FOUND`: No suitable network was found.
        - `WRONG_KEY`: Authentication failure due to an invalid pre-shared key.
        - `NETWORK_ADDED`: A new network profile was added.
        - `NETWORK_REMOVED`: A network profile was removed.
      type: string
      enum:
        - CONNECTED
        - DISCONNECTED
        - SCAN_STARTED
        - SCAN_COMPLETED
        - SCAN_FAILED
        - NETWORK_NOT_FOUND
        - WRONG_KEY
        - NETWORK_ADDED
        - NETWORK_REMOVED

    # --- BT handling
    BtPairingStarted:
      type: object
      properties:
        id:
          description: Bonding request identifier.
          type: integer
        peer:
          $ref: '#/components/schemas/BtPeer'
      required:
        - id
        - peer
    
    BtPairingAuthRequest:
      type: object
      properties:
        id:
          description: Bonding request identifier.
          type: integer
        entity_id:
          description: Optional remote-entity identifier.
          type: string
        peer:
          $ref: '#/components/schemas/BtPeer'
        kind:
          $ref: '#/components/schemas/BtBondingSecurityType'
        passkey:
          description: |
            Only set for `kind: DisplayNumber | NumericComparison`
          type: integer
          minimum: 0
      required:
        - id
        - peer
        - kind

    BtPairingComplete:
      type: object
      properties:
        id:
          description: Bonding request identifier.
          type: integer
        entity_id:
          description: Optional remote-entity identifier.
          type: string
        success:
          type: boolean
        status_code:
          description: Pairing error if not successful.
          type: string
          enum:
            - SUCCESS
            - CONNECTION_TIMEOUT
            - REMOTE_USER_TERMINATED_CONNECTION
            - AUTHENTICATION_FAILURE
            - OTHER
        reason:
          description: |
            Authentication error reason code. Only set for `status_code: AUTHENTICATION_FAILURE`.
            Common reason codes are, but not limited to:
            - `PASSKEY_ENTRY_FAILED`
            - `AUTHENTICATION_REQUIREMENTS`
            - `CONFIRM_VALUE_FAILED`
            - `PAIRING_NOT_SUPPORTED`
            - `ENCRYPTION_KEY_SIZE`
            - `COMMAND_NOT_SUPPORTED`
            - `UNSPECIFIED_REASON`
            - `REPEATED_ATTEMPTS`
            - `INVALID_PARAMETERS`
            - `DHKEY_CHECK_FAILED`
            - `NUMERIC_COMPARISON_FAILED`
          type: string
        peer:
          $ref: '#/components/schemas/BtPeer'
      required:
        - id
        - success
        - peer

    # --- OpenAPI Dock.yaml
    ExternalPortConfiguration:
      description: |
        External port configuration.
        - `mode`: configured operation mode.
        - `active_mode`: active operation mode, usually only set with the detected peripheral for `mode: AUTO`.
      type: object
      properties:
        port:
          $ref: '#/components/schemas/ExternalPortNumber'
          readOnly: true # with OpenAPI 3.1 schema definitions support sibling keywords alongside $ref
        mode:
          $ref: '#/components/schemas/ExternalPortMode'
        active_mode:
          $ref: '#/components/schemas/ExternalPortActiveMode'
          readOnly: true # with OpenAPI 3.1 schema definitions support sibling keywords alongside $ref
        supported_modes:
          description: Supported modes of the port.
          type: array
          items:
            $ref: "#/components/schemas/ExternalPortMode"
          readOnly: true
        uart:
          $ref: '#/components/schemas/UartConfiguration'
      required:
        - port
        - mode
    
    ExternalPortNumber:
      description: 1-based port index number.
      type: integer
      minimum: 1
    
    ExternalPortMode:
      type: string
      enum:
        - AUTO
        - NONE
        - INFRARED
        - IR_BLASTER
        - IR_EMITTER_MONO_PLUG
        - IR_EMITTER_STEREO_PLUG
        - TRIGGER_5V
        - RS232
    
    ExternalPortActiveMode:
      type: string
      enum:
        - UNKNOWN
        - NONE
        - ERROR
        - INFRARED
        - IR_BLASTER
        - IR_EMITTER_MONO_PLUG
        - IR_EMITTER_STEREO_PLUG
        - TRIGGER_5V
        - RS232
    
    UartConfiguration:
      type: object
      properties:
        baud_rate:
          $ref: '#/components/schemas/UartBaudRate'
        data_bits:
          $ref: '#/components/schemas/UartDataBits'
        stop_bits:
          $ref: '#/components/schemas/UartStopBits'
        parity:
          $ref: '#/components/schemas/UartParity'
      required:
        - baud_rate
        - data_bits
        - stop_bits
        - parity
    
    UartBaudRate:
      description: |
        Common baud rate values: 300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200
      type: integer
      minimum: 300
      maximum: 115200
      default: 9600
    UartDataBits:
      type: integer
      minimum: 5
      maximum: 8
      default: 8
    UartStopBits:
      description: Stop bits must be set as string, number format is not supported!
      type: string
      enum:
        - "1"
        - "1.5"
        - "2"
      default: "1"
    UartParity:
      type: string
      enum:
        - none
        - even
        - odd
      default: none

    # --- OpenAPI Remote.yaml

    BtBondingSecurityType:
      description: |
        Bonding security type:
        - `JustWorks`: Automatic pairing, peripheral only needs to confirm pairing request from central.
        - `DisplayNumber`: Peripheral must display number for the central to confirm.
        - `NumericComparison`: Peripheral must confirm or declined if the numeric value matches the displayed number on the central.
        - `PasskeyInput`: Peripheral must enter displayed passkey on central.
      type: string
      enum:
        - JUST_WORKS
        - DISPLAY_NUMBER
        - NUMERIC_COMPARISON
        - PASSKEY_INPUT

    BtPairingResponse:
      description: |
        Response to a pairing request.
        - `Passkey` request: either provide the passkey entered by the user, decline it with `confirm: false`.
        - `NumericComparison` request: confirm or decline with `confirm: true | false`.
      type: object
      allOf:
        - properties:
            id:
              description: Bonding request identifier.
              type: integer
          required:
            - id
        - oneOf:
            - type: object
              properties:
                passkey:
                  description: 6-digit passkey displayed on the central, sent as text. Leading zero(s) can be included or omitted.
                  type: string
                  minLength: 1
                  maxLength: 6
              required:
                - passkey
            - type: object
              properties:
                confirm:
                  description: Confirm or decline a bonding request.
                  type: boolean
              required:
                - confirm

    BtPeer:
      description: Information about the (paired) peer.
      type: object
      properties:
        address:
          description: BT address in 00:00:00:00:00:00 format.
          type: string
        addr_type:
          $ref: '#/components/schemas/BtAddressType'
      required:
        - address
        - addr_type

    BtAddressType:
      description: |
        Address type:
        - `LE_PUBLIC`: Public device address
        - `LE_RANDOM`: Random device address
        - `LE_PUBLIC_IDENTITY`: Public identity address (corresponds to resolved private address)
        - `LE_RANDOM_IDENTITY`: Random (static) identity address (corresponds to resolved private address)
        - `UNKNOWN`: Address could not be determined, or an error occurred
      type: string
      enum:
        - LE_PUBLIC
        - LE_RANDOM
        - LE_PUBLIC_IDENTITY
        - LE_RANDOM_IDENTITY
        - UNKNOWN

    # --- OpenAPI PowerMode.yaml

    PowerMode:
      type: string
      enum:
        - NORMAL
        - IDLE
        - LOW_POWER
        - SUSPEND

    # --- OpenAPI Battery.yaml

    PowerStatus:
      type: string
      enum:
        - CHARGING
        - DISCHARGING
        - NOT_CHARGING
        - FULL

    BatteryCharger:
      type: object
      properties:
        features:
          type: array
          items:
            type: string
        power_supply:
          description: A power supply is online, device doesn't run on battery.
          type: boolean
        wireless_charging:
          description: Wireless charging is active. Only returned on devices with wireless charging.
          type: boolean
        wireless_charging_enabled:
          description: Wireless charging is enabled. Only returned on devices with wireless charging.
          type: boolean
      required:
        - features
        - power_supply

    BatteryChargerUpdate:
      type: object
      properties:
        wireless_charging_enabled:
          description: Enable or disable wireless charging. Only supported on devices with wireless charging.
          type: boolean

    # --- OpenAPI AmbientLight.yaml

    AmbientLight:
      type: object
      properties:
        intensity:
          documentation: Light intensity. 0 = pitch black, 65535 = very bright.
          type: integer
          minimum: 0
          maximum: 65535
      required:
        - intensity

    # --- OpenAPI Standby.yaml

    Inhibitors:
      type: array
      items:
        $ref: '#/components/schemas/Inhibitor'

    Inhibitor:
      type: object
      properties:
        id:
          description: Unique identifier
          type: string
        who:
          description: A descriptive string who is inhibiting
          type: string
        why:
          description: A descriptive string why is being inhibited
          type: string
        mode:
          $ref: '#/components/schemas/InhibitMode'
        delay:
          description: "Delay value in seconds for mode: DELAY"
          type: integer
          minimum: 0
        created:
          description: Duration in seconds when this inhibitor was created
          type: integer
          minimum: 0
      required:
        - id
        - who
        - mode

    InhibitMode:
      type: string
      enum:
        - BLOCK
        - DELAY

    CreateStandbyInhibitor:
      type: object
      properties:
        id:
          description: Unique identifier, automatically crated if not specified.
          type: string
          minLength: 1
          maxLength: 64
        who:
          description: A descriptive string who is inhibiting
          type: string
          minLength: 1
          maxLength: 64
        why:
          description: A descriptive string why is being inhibited
          type: string
          maxLength: 64
        delay:
          description: Delay standby for given seconds, otherwise block indefinitely until inhibitor is removed.
          type: integer
          minimum: 1
      required:
        - who
